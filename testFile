Then Send request to generate New Document with below details
  | challengeWord | Challenge Answer |
  | question1     | Question 1       |
  | answer1       | Answer 1         |
  | question2     | Question 2       |
  | answer2       | Answer 2         |
  | question3     | Question 3       |
  | answer3       | Answer 3         |
  | question4     | Question 4       |
  | answer4       | Answer 4         |
  | question5     | MMN              |
  | answer5       | Answer 5         |

public static POJONewDocumentRequest buildNewDocumentPayload(Map<String, String> mapDocDetails) {
    POJONewDocumentRequest documentRequest = new POJONewDocumentRequest();

    documentRequest.setPersonId(mapDocDetails.get("personId"));
    documentRequest.setChallengeWord(mapDocDetails.get("challengeWord"));

    List<POJONewDocumentRequest.QuestionAnswer> qaList = new ArrayList<>();

    // Collect question-answer pairs from the map
    for (int i = 1; i <= 5; i++) {
        String questionKey = "question" + i;
        String answerKey = "answer" + i;

        if (mapDocDetails.containsKey(questionKey) && mapDocDetails.containsKey(answerKey)) {
            POJONewDocumentRequest.QuestionAnswer qa = new POJONewDocumentRequest.QuestionAnswer();
            qa.setQuestion(mapDocDetails.get(questionKey));
            qa.setAnswer(mapDocDetails.get(answerKey));
            qaList.add(qa);
        }
    }

    documentRequest.setQuestions(qaList);
    return documentRequest;
}


package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

public class POJONewDocumentRequest {

    @JsonProperty("personId")
    private String personId;

    @JsonProperty("challengeWord")
    private String challengeWord;

    @JsonProperty("questions")
    private List<QuestionAnswer> questions;

    // Inner class for question-answer
    public static class QuestionAnswer {
        @JsonProperty("question")
        private String question;

        @JsonProperty("answer")
        private String answer;

        // Getters and Setters
        public String getQuestion() {
            return question;
        }

        public void setQuestion(String question) {
            this.question = question;
        }

        public String getAnswer() {
            return answer;
        }

        public void setAnswer(String answer) {
            this.answer = answer;
        }
    }

    // Getters and Setters
    public String getPersonId() {
        return personId;
    }

    public void setPersonId(String personId) {
        this.personId = personId;
    }

    public String getChallengeWord() {
        return challengeWord;
    }

    public void setChallengeWord(String challengeWord) {
        this.challengeWord = challengeWord;
    }

    public List<QuestionAnswer> getQuestions() {
        return questions;
    }

    public void setQuestions(List<QuestionAnswer> questions) {
        this.questions = questions;
    }
}


public Response createNewDocument(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapDocDetails, ScenarioContext scenarioContext) throws JsonProcessingException {
    String strUrl = getTYKURL(strEnvType, "TYK.DOCUMENT");

    // Inject personId from scenario context
    String personId = scenarioContext.getContext("naturalPersonObjectId");
    mapDocDetails.put("personId", personId);

    POJONewDocumentRequest pojoNewDocumentRequest = Payloads.buildNewDocumentPayload(mapDocDetails);
    String strRequestBody = objObjectMapper.writeValueAsString(pojoNewDocumentRequest);

    ExtentCucumberAdapter.addTestStepLog("Sending request to create Document");

    Response resCreateDocument = sendPostRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, null);
    String strResponseBody = devHelperLibrary.getResponseBody(resCreateDocument);
    objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

    // Optional: Store document ID from response
    String strDocumentId = resCreateDocument.jsonPath().getString("documentId");
    scenarioContext.setContext("documentId", strDocumentId);

    return resCreateDocument;
}
