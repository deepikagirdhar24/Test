Like in below SD, we are using SC:scenariocontextname in Examples and its implementation is as follows - 

      And I verify the following fields in Update Natural Person response
        | id                                           | <id>                              |
        | firstName                                    | <firstName>                       |
        | middleName                                   | <middleName>                      |
        | lastName                                     | <lastName>                        |
        | birthDate                                    | <birthDate>                       |
        | nationalities[0]                             | <nationality>                     |
        | subType.key                                  | <subTypeKey>                      |
        | subType.value                                | <subTypeValue>                    |
        | gender.key                                   | <genderKey>                       |
        | gender.value                                 | <genderValue>                     |
        | title.key                                    | <titleKey>                        |
        | title.value                                  | <titleValue>                      |
        | birthPlace                                   | <birthPlace>                      |
        | birthCountry                                 | <birthCountry>                    |
        | domiCountry                                  | <domiCountry>                     |
        | residenceAddress.firstName                   | <resAddressFirstName>             |
        | residenceAddress.middleName                  | <resAddressMiddleName>            |
        | residenceAddress.lastName                    | <resAddressLastName>              |
        | residenceAddress.firm                        | <resAddressFirm>                  |
        | residenceAddress.residency                   | <resAddressResidency>             |
        | residenceAddress.streetNr                    | <resAddressStreetNr>              |
        | residenceAddress.street                      | <resAddressStreet>                |
        | residenceAddress.streetAdd                   | <resAddressStreetAdd>             |
        | residenceAddress.poBox                       | <resAddressPoBox>                 |
        | residenceAddress.city                        | <resAddressCity>                  |
        | residenceAddress.state                       | <resAddressState>                 |
        | residenceAddress.zip                         | <resAddressZip>                   |
        | residenceAddress.country                     | <resAddressCountry>               |
        | correspondanceAddress.id                     | <corrAddressId>                   |
        | correspondanceAddress.firstName              | <corrAddressFirstName>            |
        | correspondanceAddress.middleName             | <corrAddressMiddleName>           |
        | correspondanceAddress.lastName               | <corrAddressLastName>             |
        | correspondanceAddress.firm                   | <corrAddressFirm>                 |
        | correspondanceAddress.residency              | <corrAddressResidency>            |
        | correspondanceAddress.streetNr               | <corrAddressStreetNr>             |
        | correspondanceAddress.street                 | <corrAddressStreet>               |
        | correspondanceAddress.streetAdd              | <corrAddressStreetAdd>            |
        | correspondanceAddress.poBox                  | <corrAddressPoBox>                |
        | correspondanceAddress.city                   | <corrAddressCity>                 |
        | correspondanceAddress.state                  | <corrAddressState>                |
        | correspondanceAddress.zip                    | <corrAddressZip>                  |
        | correspondanceAddress.country                | <corrAddressCountry>              |
        | correspondanceAddress.salutation.key         | <corrSalutationKey>               |
        | correspondanceAddress.salutation.value       | <corrSalutationValue>             |
        | correspondanceAddress.salutationLetter.key   | <corrSalutationLetterKey>         |
        | correspondanceAddress.salutationLetter.value | <corrSalutationLetterValue>       |
        | electronicAddresses[0].value                 | <emailValue>                      |
        | electronicAddresses[0].isPreferred           | <emailIsPreferred>                |
        | electronicAddresses[0].medium.key            | <emailMediumKey>                  |
        | electronicAddresses[0].medium.value          | <emailMediumValue>                |
        | electronicAddresses[0].kind.key              | <emailKindKey>                    |
        | electronicAddresses[0].kind.value            | <emailKindValue>                  |
        | electronicAddresses[0].country               | <emailCountry>                    |
        | isEmployee                                   | <isEmployee>                      |
        | employmentKind.key                           | <employmentKey>                   |
        | employmentKind.value                         | <employmentValue>                 |
        | idQuestions[0].isChallengeWord               | <idQ1IsChallenge>                 |
        | idQuestions[0].question                      | <idQ1Question>                    |
        | idQuestions[0].answer                        | <idQ1Answer>                      |
        | idQuestions[1].isChallengeWord               | <idQ2IsChallenge>                 |
        | idQuestions[1].question                      | <idQ2Question>                    |
        | idQuestions[1].answer                        | <idQ2Answer>                      |
        | idQuestions[2].isChallengeWord               | <idQ3IsChallenge>                 |
        | idQuestions[2].question                      | <idQ3Question>                    |
        | idQuestions[2].answer                        | <idQ3Answer>                      |
        | idQuestions[3].isChallengeWord               | <idQ4IsChallenge>                 |
        | idQuestions[3].question                      | <idQ4Question>                    |
        | idQuestions[3].answer                        | <idQ4Answer>                      |
        | idQuestions[4].isChallengeWord               | <idQ5IsChallenge>                 |
        | idQuestions[4].question                      | <idQ5Question>                    |
        | idQuestions[4].answer                        | <idQ5Answer>                      |
        | idQuestions[5].isChallengeWord               | <idQ6IsChallenge>                 |
        | idQuestions[5].question                      | <idQ6Question>                    |
        | idQuestions[5].answer                        | <idQ6Answer>                      |
        | taxResidences[0].country                     | <taxCountry>                      |
        | taxResidences[0].taxNumber                   | <taxNumber>                       |
        | taxResidences[0].identityType.key            | <taxIdentityKey>                  |
        | taxResidences[0].identityType.value          | <taxIdentityValue>                |
        | fatcaStatus.key                              | <fatcaKey>                        |
        | fatcaStatus.value                            | <fatcaValue>                      |
        | crsType.key                                  | <crsKey>                          |
        | crsType.value                                | <crsValue>                        |
        | ukTaxResidenceFromDate                       | <ukTaxFromDate>                   |
        | hasTaxAvoidanceSchemes                       | <hasTaxAvoidanceSchemes>          |
        | isHoldingBearerShares                        | <isHoldingBearerShares>           |
        | hasInvestableAssets10M                       | <hasInvestableAssets10M>          |
        | hasHistoricTaxIssues                         | <hasHistoricTaxIssues>            |
        | hasTaxChgDomiStatus                          | <hasTaxChgDomiStatus>             |
        | taxChgDomiStatusDate                         | <taxChgDomiStatusDate>            |
        | hasTaxChgUkDomiStatus                        | <hasTaxChgUkDomiStatus>           |
        | hasTaxPrevClaimRemitanceBasis                | <hasTaxPrevClaimRemitanceBasis>   |
        | hasTaxIntendClaimRemitanceBasis              | <hasTaxIntendClaimRemitanceBasis> |
        | accountants[0].name                          | <accountantName>                  |
        | accountants[0].companyId                     | <accountantCompanyId>             |
        | accountants[0].companyName                   | <accountantCompanyName>           |
        | accountants[0].companyResidenceCountry       | <accountantCompanyCountry>        |
        | accountants[0].email                         | <accountantEmail>                 |
        | accountants[0].hasConsent                    | <accountantHasConsent>            |
        | accountants[0].doSendCopy                    | <accountantDoSendCopy>            |
        | accountants[0].role.key                      | <accountantRoleKey>               |
        | accountants[0].role.value                    | <accountantRoleValue>             |
        | accountants[0].address.id                    | <accAddressId>                    |
        | accountants[0].address.firstName             | <accAddressFirstName>             |
        | accountants[0].address.middleName            | <accAddressMiddleName>            |
        | accountants[0].address.lastName              | <accAddressLastName>              |
        | accountants[0].address.firm                  | <accAddressFirm>                  |
        | accountants[0].address.residency             | <accAddressResidency>             |
        | accountants[0].address.streetNr              | <accAddressStreetNr>              |
        | accountants[0].address.street                | <accAddressStreet>                |
        | accountants[0].address.streetAdd             | <accAddressStreetAdd>             |
        | accountants[0].address.poBox                 | <accAddressPoBox>                 |
        | accountants[0].address.city                  | <accAddressCity>                  |
        | accountants[0].address.state                 | <accAddressState>                 |
        | accountants[0].address.zip                   | <accAddressZip>                   |
        | accountants[0].address.country               | <accAddressCountry>               |
        | accountants[0].address.salutation.key        | <accAddressSalutationKey>         |
        | accountants[0].address.salutation.value      | <accAddressSalutationValue>       |
        | accountants[0].address.salutationLetter.key  | <accAddressSalutationLetterKey>   |
        | accountants[0].address.salutationLetter.value| <accAddressSalutationLetterValue> |
        | hasTravelProtection                          | <hasTravelProtection>             |
        | hasCouttsOnline                              | <hasCouttsOnline>                 |
        | associations[0].personId                     | <associationPersonId>             |
        | associations[0].personFirstName              | <associationPersonFirstName>      |
        | associations[0].personLastName               | <associationPersonLastName>       |
        | associations[0].personResidenceCountry       | <associationPersonResCountry>     |
        | associations[0].personNationality            | <associationPersonNationality>    |
        | associations[0].isProfessional               | <associationIsProfessional>       |
        | associations[0].personGender.key             | <associationGenderKey>            |
        | associations[0].personGender.value           | <associationGenderValue>          |
        | associations[0].role.key                     | <associationRoleKey>              |
        | associations[0].role.value                   | <associationRoleValue>            |
        | pepCategory.key                              | <pepCategoryKey>                  |
        | pepCategory.value                            | <pepCategoryValue>                |
        | dueDillegence.key                            | <dueDiligenceKey>                 |
        | dueDillegence.value                          | <dueDiligenceValue>               |
        | coreDv.key                                   | <coreDvKey>                       |
        | coreDv.value                                 | <coreDvValue>                     |
        | income                                       | <income>                          |

      Examples:
        | id                          | firstName | middleName | lastName  | birthDate                    | nationality | subTypeKey     | subTypeValue      | genderKey | genderValue | titleKey | titleValue | birthPlace | birthCountry | domiCountry | resAddressId | resAddressFirstName | resAddressMiddleName | resAddressLastName | resAddressFirm | resAddressResidency | resAddressStreetNr | resAddressStreet | resAddressStreetAdd | resAddressPoBox | resAddressCity | resAddressState | resAddressZip | resAddressCountry | corrAddressId       | corrAddressFirstName | corrAddressMiddleName | corrAddressLastName | corrAddressFirm | corrAddressResidency | corrAddressStreetNr | corrAddressStreet  | corrAddressStreetAdd | corrAddressPoBox | corrAddressCity | corrAddressState | corrAddressZip | corrAddressCountry | corrSalutationKey | corrSalutationValue | corrSalutationLetterKey | corrSalutationLetterValue | emailValue             | emailIsPreferred | emailMediumKey | emailMediumValue | emailKindKey | emailKindValue | emailCountry | isEmployee | employmentKey | employmentValue | idQ1IsChallenge | idQ1Question | idQ1Answer | idQ2IsChallenge | idQ2Question | idQ2Answer | idQ3IsChallenge | idQ3Question | idQ3Answer | idQ4IsChallenge | idQ4Question | idQ4Answer | idQ5IsChallenge | idQ5Question | idQ5Answer | idQ6IsChallenge | idQ6Question                                                                  | idQ6Answer         | taxCountry | taxNumber                    | taxIdentityKey | taxIdentityValue               | fatcaKey                     | fatcaValue         | crsKey             | crsValue                          | ukTaxFromDate | hasTaxAvoidanceSchemes | isHoldingBearerShares | hasInvestableAssets10M | hasHistoricTaxIssues | hasTaxChgDomiStatus | taxChgDomiStatusDate | hasTaxChgUkDomiStatus | hasTaxPrevClaimRemitanceBasis | hasTaxIntendClaimRemitanceBasis | accountantName | accountantCompanyId    | accountantCompanyName | accountantCompanyCountry | accountantEmail               | accountantHasConsent | accountantDoSendCopy | accountantRoleKey                    | accountantRoleValue          | accAddressId       | accAddressFirstName | accAddressMiddleName | accAddressLastName | accAddressFirm | accAddressResidency | accAddressStreetNr | accAddressStreet  | accAddressStreetAdd | accAddressPoBox | accAddressCity | accAddressState | accAddressZip | accAddressCountry | accAddressSalutationKey | accAddressSalutationValue | accAddressSalutationLetterKey | accAddressSalutationLetterValue | hasTravelProtection | hasCouttsOnline | associationPersonId          | associationPersonFirstName | associationPersonLastName | associationPersonResCountry | associationPersonNationality | associationIsProfessional | associationGenderKey | associationGenderValue | associationRoleKey   | associationRoleValue | pepCategoryKey | pepCategoryValue | dueDiligenceKey | dueDiligenceValue | coreDvKey | coreDvValue | income |
        | SC:updNaturalPersonObjectId | Firstname | Middlename | Lastname  | SC:updNaturalPersonBirthDate | GB          | pers_form_doc  | Documented (01)   | male      | male        | mr       | Mr         | London     | GB           | CH          | 665877226    | Firstname            |                     | Lastname           |                |                     |                    |                  |                     |                 |                |                 |               | CH                | SC:addressObjectId  | Firstname            | Middlename            | Lastname            |                 | 123                  | 123                 | SC:addressStreet   | Addition street      | P.O.Box 123      | Zurich          | Zürich           | 8001           | CH                 | mr                | Mr                  | mr                      | Dear Mr                   | first.last@gmail.com   | false            | email          | E-Mail Address   | private      | Private        |              | false      | employee      | Employed        | false           | Question1    | Answer1   | false            | Question2    | Answer2    | false           | Question3    | Answer3    | false           | Question4    | Answer4    | false           | Question5    | Answer5    | true            | Client Challenge Word (to be given at clients request on outbound calls only) | Challenge Answer   | GB         | SC:updNaturalPersonTaxNumber | nin            | National Insurance number      | rbsc$fatca_non_us_person     | Non US Person (03) | rbsc$crs_np_doc    | Natural Person: Documented (01)   | 2015-04-06    | false                  | false                 | false                  | false                | false               | 2015/16              | false                 | false                         | false                           | TestName       | SC:legalPersonObjectId | Lastname              | CH                       | accountant.person@acccomp.com | false                | false                | netw$rbsc$prim_tax_advs_h            | has Tax Adviser (Primary)    | SC:addressObjectId | Firstname           | Middlename           | Lastname           |                | 123                 | 123                | SC:addressStreet  | Addition street     | P.O.Box 123     | Zurich         | Zürich          | 8001          | CH                | mr                      | Mr                        | mr                            | Dear Mr                         | false               | false           | SC:naturalPersonObjectIdAss1 | Firstname                  | Lastname                  | CH                          | CH                           | false                     | male                 | male                   | rbsc$is_sibling_of   | has Sibling          | none           | None (10)        |                 |                   |           |             |        |

@Then("I verify the following fields in Update Natural Person response")
    public void verifyUpdateNaturalPersonFields(DataTable dataTable) {
        Map<String, String> expectedValues = dataTable.asMap(String.class, String.class);

        for (Map.Entry<String, String> entry : expectedValues.entrySet()) {
            String responseKey = entry.getKey();
            String expectedValue = entry.getValue();

            // 🔹 ScenarioContext placeholder handling
            if (expectedValue != null && expectedValue.startsWith("SC:")) {
                String contextKey = expectedValue.replace("SC:", "").trim();
                expectedValue = scenarioContext.getContext(contextKey);
            }

            // 🔹 Treat blank cells as null
            if (expectedValue == null || expectedValue.trim().isEmpty()) {
                expectedValue = null;
            }

            String actualValue = jsonHelper.getValue(response, responseKey);

            // 🔹 Normalize actual "null" (jsonHelper may return string "null")
            if (actualValue != null && "null".equalsIgnoreCase(actualValue.trim())) {
                actualValue = null;
            }

            ExtentCucumberAdapter.addTestStepLog(
                    "Validating field: '" + responseKey +
                            "' | Expected: '" + expectedValue +
                            "' | Actual: '" + actualValue + "'"
            );

            Assert.assertEquals(
                    actualValue,
                    expectedValue,
                    "Mismatch for field: " + responseKey
            );
        }
    }

Now, in some create requests like below - 

    Then Send Request to create Overdraft with below details
      | bpId    | <bpId>    |
      | maccId  | <maccId>  |
    And I verify the Status Code for Overdraft "200"
    And I verify the "objectId" exists in Overdraft response
    And I verify the "orderId" exists in Overdraft response

    Examples:
      | bpId     | maccId                   | Comments              |
      | 66110978 | MONEY_ACCOUNT_OBJECT_ID  | 001 - StraightThrough |

We are using MONEY_ACCOUNT_OBJECT_ID which is implemented in Payloads and PayloadHleper - 

    @Then("Send Request to create Overdraft with below details")
    public void sendRequestToCreateOverdraftWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapOverdraftDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objCredit.createOverdraft(strEnvType, "Bearer", jwtToken, mapOverdraftDetails, scenarioContext);
    }

// Create Overdraft
    public Response createOverdraft(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapOverdraftDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.OVERDRAFT");

        POJOCreditRequest pojoCreditRequest = payloads.buildCreditPayload(mapOverdraftDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoCreditRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Overdraft");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Overdraft is: " + strResponseBody);

        String strOverdraftObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strOverdraftOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("overdraftObjectId", strOverdraftObjectId);
        scenarioContext.setContext("overdraftOrderId", strOverdraftOrderId);

        return objResponse;
    }

    public POJOCreditRequest buildCreditPayload(Map<String, String> mapCreditDetails, ScenarioContext scenarioContext) {
        POJOCreditRequest creditRequest = new POJOCreditRequest();

        creditRequest.setStrBpId(payloadHelper.normalize(mapCreditDetails.get("bpId")));

        String resolvedMaccId = payloadHelper.resolveId(mapCreditDetails.get("maccId"), scenarioContext);
        creditRequest.setStrMaccId(resolvedMaccId);

        return creditRequest;
    }

public String resolveId(String input, ScenarioContext scenarioContext) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }

        String token = input.trim().toUpperCase();

        switch (token) {
            case "EMPTY":
                return "";
            case "NA":
                return null;

            case "NATURAL_PERSON_OBJECT_ID":
                return scenarioContext.getContext("naturalPersonObjectId");

            case "NATURAL_PERSON_OBJECT_ID_1":
                return scenarioContext.getContext("naturalPersonObjectIdAss1");

            case "NATURAL_PERSON_OBJECT_ID_2":
                return scenarioContext.getContext("naturalPersonObjectIdAss2");

            case "LEGAL_PERSON_OBJECT_ID":
                return scenarioContext.getContext("legalPersonObjectId");

            case "LEGAL_PERSON_OBJECT_ID_1":
                return scenarioContext.getContext("legalPersonObjectIdAss1");

            case "CONTAINER_OBJECT_ID":
                return scenarioContext.getContext("containerObjectId");

            case "ADDRESS_OBJECT_ID":
                return scenarioContext.getContext("addressObjectId");

            case "MONEY_ACCOUNT_OBJECT_ID":
                return scenarioContext.getContext("moneyAccountObjectId");

            case "DOCUMENT_OBJECT_ID":
                return scenarioContext.getContext("documentObjectId");

            default:
                return input;
        }

Can we make this EGT and post methods consistnet to use same approach, or what u sggest, shall I keep this approach only ?
