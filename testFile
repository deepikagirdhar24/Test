public Response createAddress(String strEnvType, String strBearerToken, String strJWTToken,
                              Map<String, String> mapAddressDetails, ScenarioContext scenarioContext) throws Exception {

    String strTYKURL = getTYKURL(strEnvType, "TYK.ADDRESS");
    POJOAddressRequest pojoAddressRequest = payloads.buildAddressPayload(mapAddressDetails, true);
    String strRequestBody = objObjectMapper.writeValueAsString(pojoAddressRequest);

    ExtentCucumberAdapter.addTestStepLog("Sending request to Create Address");

    Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
    String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
    objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

    String strAddressObjectId = jsonHelper.extractStringField(objResponse, "objectId");
    String strAddressOrderId = jsonHelper.extractStringField(objResponse, "orderId");
    String strAddressUuid = pojoAddressRequest.getStrUuid();

    // Store latest for backward compatibility (optional)
    scenarioContext.setContext("addressObjectId", strAddressObjectId);
    scenarioContext.setContext("addressOrderId", strAddressOrderId);
    scenarioContext.setContext("addressUuid", strAddressUuid);

    // âœ… NEW: Maintain list of address IDs for multiple address use
    List<String> addressIds = (List<String>) scenarioContext.getOrDefault("addressObjectIds", new ArrayList<>());
    addressIds.add(strAddressObjectId);
    scenarioContext.setContext("addressObjectIds", addressIds);

    return objResponse;
}

String addressList = payloadHelper.normalize(mapMoneyAccountDetails.get("addressIds"));
if (addressList != null) {
    List<String> resolvedAddressIds = Arrays.stream(addressList.split(","))
        .map(id -> {
            if ("ADDRESS_OBJECT_ID".equalsIgnoreCase(id.trim())) {
                // Return all stored address IDs
                List<String> addressIds = (List<String>) scenarioContext.getContext("addressObjectIds");
                return String.join(",", addressIds); // returns single comma-separated string
            } else {
                return payloadHelper.resolveId(id.trim(), strAddressObjectId);
            }
        })
        .flatMap(ids -> Arrays.stream(ids.split(","))) // handle nested commas
        .collect(Collectors.toList());

    moneyAccount.setLstAddressIds(resolvedAddressIds);
}
