Update COntact Notes also similar to the Legal person code below - 

package ICOS;

import ICOS.pojo.LegalPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import io.restassured.response.Response;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.Payloads;
import utilities.ScenarioContext;

import java.util.HashMap;
import java.util.Map;

public class LegalPerson extends BaseApiClient {

    private ObjectMapper objObjectMapper;
    private CucumberLogger objCucumberLogger;
    private EncryptionUtil objEncryptionUtil;

    public LegalPerson() throws Exception {
        objObjectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
        objEncryptionUtil = new EncryptionUtil();
    }

    // Create Legal Person
    public Response createLegalPerson(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        String strTYKURL = getTYKURL(strEnvType, "TYK.CREATELEGALPERSON");
        LegalPersonRequest pojoLegalPersonRequest = Payloads.buildLegalPersonPayload(mapPersonDetails, true);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoLegalPersonRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Legal Person");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        String strObjectId = objResponse.jsonPath().getString("objectId");
        String strOrderId = objResponse.jsonPath().getString("orderId");
        String strUuid = pojoLegalPersonRequest.getStrUuid();

        scenarioContext.setContext("objectId", strObjectId);
        scenarioContext.setContext("orderId", strOrderId);
        scenarioContext.setContext("uuid", strUuid);

        return objResponse;
    }

    // Get Legal Person
    public Response getLegalPerson(String strEnvType, String strBearerToken, String strJWTToken,
                                   ScenarioContext scenarioContext) {

        String strTYKURL = getTYKURL(strEnvType, "TYK.CREATELEGALPERSON") + "/{id}";
        String strObjectId = scenarioContext.getContext("objectId");
        String strUuid = scenarioContext.getContext("uuid");

        Map<String, String> mapPathParams = new HashMap<>();
        mapPathParams.put("id", strObjectId);

        Map<String, String> mapQueryParams = new HashMap<>();
        mapQueryParams.put("uuid", strUuid);
        mapQueryParams.put("minimal", "yes");

        ExtentCucumberAdapter.addTestStepLog("Sending GET request for Legal Person");

        Response objResponse = sendGetRequest(strTYKURL, strBearerToken, strJWTToken, mapPathParams, mapQueryParams);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return objResponse;
    }

    // Update Legal Person (Order)
    public Response createLegalPersonOrder(String strEnvType, String strBearerToken, String strJWTToken,
                                           Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        String strOrderId = scenarioContext.getContext("orderId");
        String strTYKURL = getTYKURL(strEnvType, "TYK.CREATELEGALPERSON");

        LegalPersonRequest pojoLegalPersonRequest = Payloads.buildLegalPersonPayload(mapPersonDetails, false);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoLegalPersonRequest);

        Map<String, String> mapQueryParams = new HashMap<>();
        mapQueryParams.put("order", strOrderId);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Legal Person Order");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, mapQueryParams);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return objResponse;
    }
}



package ICOS;

import ICOS.pojo.ContactNoteRequest;
import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.*;

import java.util.*;
import java.util.stream.Collectors;

import static io.restassured.RestAssured.with;

public class ContactNotes {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String strResponseBody;
    String TYK_KEY = TestConfig.getTykApiKey();
    String strObjectId;
    String strOrderId;
    String strJsonBody;
    String strAuthentication;
    String strTYKURL;


    public ContactNotes() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }

    // New method to get Contact Notes
    public Response getGetContactNotes(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Get Contact Notes");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .get(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        return response;
    }

    //Function to create a Contact Note
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapNoteDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        ContactNoteRequest noteRequest = Payloads.buildContactNotePayload(mapNoteDetails, scenarioContext);

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);
        objCucumberLogger.PrintStatus("Response Code: " + response.getStatusCode());
        return response;
    }

    // Overloaded method to support multiple PersonIds
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapNoteDetails, List<String> lstPersonIds) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        ContactNoteRequest noteRequest = Payloads.buildContactNotePayload(mapNoteDetails, lstPersonIds);

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization", strBearerToken + " " + strJWTToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json")
                .body(strJsonBody)
                .post(strTYKURL);

        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is" + strResponseBody);
        objCucumberLogger.PrintStatus("Response Code: " + response.getStatusCode());

        return response;
    }

}
