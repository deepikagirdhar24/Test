These are SD in WorkRequestSteps, but in Steps class, we are just calling the function, and asserting there. The main function and its logic should be defined in WorkRequest class.
Can you help me spli the beow tow SDs accordingly

@And("I verify the Work Request API 400 error response with below details")
    public void iVerifyWorkRequest400ErrorResponse(DataTable dataTable) throws Exception {
        Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

        String expectedDescription = expectedData.get("description");
        String expectedErrorMessages = expectedData.get("error message");

        String actualDescription = JsonHelper.extractStringField(response, "description");
        ExtentCucumberAdapter.addTestStepLog("Actual description: " + actualDescription);
        Assert.assertEquals(actualDescription, expectedDescription, "Mismatch in description");

        // Handle multiple error messages
        String[] expectedErrors = expectedErrorMessages.split("\\s*,\\s*");
        List<String> actualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "validationErrors", "error");

        ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + actualErrors);

        for (String expectedError : expectedErrors) {
            Assert.assertTrue(actualErrors.contains(expectedError),
                    "Expected error message not found: " + expectedError);
        }
    }

    @And("I verify the Work Request AWS-style 400 error response with below details")
    public void iVerifyWorkRequestAWS400ErrorResponse(DataTable dataTable) throws Exception {
        Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

        // Top-level fields
        String expectedType = expectedData.get("type");
        String expectedTitle = expectedData.get("title");
        String expectedDetail = expectedData.get("detail");

        String actualType = JsonHelper.extractStringField(response, "type");
        String actualTitle = JsonHelper.extractStringField(response, "title");
        String actualDetail = JsonHelper.extractStringField(response, "detail");

        ExtentCucumberAdapter.addTestStepLog("Actual type: " + actualType);
        ExtentCucumberAdapter.addTestStepLog("Actual title: " + actualTitle);
        ExtentCucumberAdapter.addTestStepLog("Actual detail: " + actualDetail);

        Assert.assertEquals(actualType, expectedType, "Mismatch in 'type'");
        Assert.assertEquals(actualTitle, expectedTitle, "Mismatch in 'title'");
        Assert.assertEquals(actualDetail, expectedDetail, "Mismatch in 'detail'");

        // Validate errorDetails[0] fields for presence and non-null content
        String actualErrorTitle = JsonHelper.extractStringFieldFromArray(response, "errorDetails", 0, "title");
        String actualErrorField = JsonHelper.extractStringFieldFromArray(response, "errorDetails", 0, "field");
        String actualErrorDetail = JsonHelper.extractStringFieldFromArray(response, "errorDetails", 0, "detail");

        ExtentCucumberAdapter.addTestStepLog("Actual errorDetails[0].title: " + actualErrorTitle);
        ExtentCucumberAdapter.addTestStepLog("Actual errorDetails[0].field: " + actualErrorField);
        ExtentCucumberAdapter.addTestStepLog("Actual errorDetails[0].detail: " + actualErrorDetail);

        Assert.assertEquals(actualErrorTitle, expectedData.get("errorDetails.title"), "Mismatch in errorDetails.title");
        Assert.assertEquals(actualErrorDetail, expectedData.get("errorDetails.detail"), "Mismatch in errorDetails.detail");

        // Validate only that errorDetails[0].field exists and is not null/empty
        Assert.assertNotNull(actualErrorField, "errorDetails[0].field should not be null");
        Assert.assertFalse(actualErrorField.trim().isEmpty(), "errorDetails[0].field should not be empty");
    }
