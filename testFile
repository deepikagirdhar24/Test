List<String> personIdList = new ArrayList<>();

@And("Send request to generate New Person with below details")
public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
    Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
    String jwtToken = scenarioContext.getToken("JWTToken");

    response = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails);

    // Store the created objectId from the response
    String objectId = response.jsonPath().getString("objectId");
    personIdList.add(objectId);
}


@Then("Send POST ContactNote Request with below details")
public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
    Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
    String jwtToken = scenarioContext.getToken("JWTToken");

    // Join the personId list as a comma-separated string
    if (!personIdList.isEmpty()) {
        mapNoteDetails.put("personIds", String.join(",", personIdList));
    }

    response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails);
}


In ContactNotes.java, update this logic:

// Old logic - only supports one ID
noteRequest.setLstPersonIds(Collections.singletonList(mapNoteDetails.get("personIds")));
Replace with:
// New logic - splits comma-separated IDs into list
if (mapNoteDetails.containsKey("personIds") && mapNoteDetails.get("personIds") != null && !mapNoteDetails.get("personIds").isEmpty()) {
    List<String> personIdsList = Arrays.asList(mapNoteDetails.get("personIds").split(","));
    noteRequest.setLstPersonIds(personIdsList);
} else {
    noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));
}
