Feature: Create Contact Notes API

  Scenario Outline: Verify the Post Contact Notes API
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And Send request to generate New Person with below details
      | firstName       | <firstName>    |
      | lastName        | Lastname       |
      | subType         | pers_form_ass  |
      | domicileCountry | CH             |
      | gender          | male           |
      | nationality     | CH             |
    Then Send POST ContactNote Request with below details
      | subject      | Testsubject     |
      | notes        | Testnote        |
      | hasFollowup  | false           |
    And I verify the Status Code for Contact Notes "<statusCode>"
    And I verify the OrderId

    Examples:
      | firstName   | statusCode |
      | ghgf        | 400        |


package stepDefinations;

import ICOS.ContactNotes;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import commonLibrary.DBUtil;
import commonLibrary.SQLQueries;
import config.JsonExtractor;
import config.JsonVerifier;
import config.TestConfig;
import hooks.CucumberHooks;
import io.cucumber.core.logging.Logger;
import io.cucumber.core.logging.LoggerFactory;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.CucumberLogger;
import utilities.JsonHelper;
import utilities.ScenarioContext;

import java.util.Map;

public class ContactNotesSteps extends BaseStep{


    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();
    private static final Logger logger = LoggerFactory.getLogger(CucumberHooks.class);
    TestConfig testConfig;
    ContactNotes objContactNotes;
    private static Response response;
    public static String strToken;
    public String strMembershipDetails;
    public int sizeOfPagination;
    public static String strEnv;
    public static String strEnvType;
    public static String strEnvFDSType;
    public String strFDSHostURL;
    public String strFDSDevHelperURL;
    public Object strRes;
    public String strJWTToken;
    public String strEIAMTokenURL;
    CucumberLogger objCucumberLogger;
    JsonVerifier objJsonVerifier;
    JsonExtractor objJsonExtractor;
    DBUtil objDBUtil;
    public String strUserid;
    SQLQueries objSQLQueries;
    protected ScenarioContext scenarioContext;

    public ContactNotesSteps(ScenarioContext scenarioContext) throws Exception {
        super();
        this.scenarioContext = scenarioContext;
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objContactNotes = new ContactNotes();
        this.strEnvType = scenarioContext.getToken("strEnvType");
    }

    @Then("Send Request to get Contact Note Information")
    public void sendRequestToGetContactNoteInformation() throws JsonProcessingException {
        String jwtToken = scenarioContext.getToken("JWTToken");
        //response =objContactNotes.getGetContactNotes(strEnvType,objAccessToken.get("tokenType"),strJWTToken);
        response =objContactNotes.getGetContactNotes(strEnvType,"Bearer",jwtToken);
    }

    @And("I verify the Status Code for Contact Notes {string}")
    public void iVerifyTheStatusCodeForContactNotes(String strStatusCode) {
        int responseCode= response.statusCode();
        ExtentCucumberAdapter.addTestStepLog("Actual value of Status code is : " +responseCode);
        Assert.assertEquals(Integer.parseInt(strStatusCode),responseCode);
    }

    @And("I verify the Subject {string}")
    public void iVerifyTheSubject(String subject) throws Exception {
        String stringValueSubject= JsonHelper.extractStringField(response, "subject");
        ExtentCucumberAdapter.addTestStepLog("Actual value of Subject is : " +stringValueSubject);
        Assert.assertEquals(subject,stringValueSubject);
    }

    @And("I verify the Notes {string}")
    public void iVerifyTheNotes(String notes) throws Exception {
        String stringValueNotes=JsonHelper.extractStringField(response, "notes");
        ExtentCucumberAdapter.addTestStepLog("Actual value of Notes is : " +stringValueNotes);
        Assert.assertEquals(notes,stringValueNotes);
    }

    @And("I verify the HasFollowup {string}")
    public void iVerifyTheHasFollowup(String hasFollowup) throws Exception {
        Boolean boolValuehasFollowup=JsonHelper.extractBooleanField(response, "hasFollowup");
        ExtentCucumberAdapter.addTestStepLog("Actual value of HasFollowUp is : " +boolValuehasFollowup);
        Assert.assertEquals(true,boolValuehasFollowup);
    }

    @And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails);
    }

    @Then("Send POST ContactNote Request with below details")
    public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails);
    }

    @And("I verify the Person Item {string}")
    public void iVerifyThePersonItem(String personItem) throws Exception {
        boolean boolIsPersonPresent = objContactNotes.personIdExists(response, personItem);
        Assert.assertEquals(true, boolIsPersonPresent);
    }

    @And("I verify the OrderId")
    public void iVerifyTheOrderId() throws Exception {
        String actualOrderId = JsonHelper.extractStringField(response, "orderId");
        ExtentCucumberAdapter.addTestStepLog("Actual value of Order Id is: " + actualOrderId);

        Assert.assertNotNull(actualOrderId, "Order Id should not be null");
        Assert.assertFalse(actualOrderId.isEmpty(), "Order Id should not be empty");
    }
}


package ICOS;

import ICOS.pojo.ContactNoteRequest;
import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.JsonHelper;

import java.util.Collections;
import java.util.Map;
import java.util.UUID;

import static io.restassured.RestAssured.with;

public class ContactNotes {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String strResponseBody;
    String TYK_KEY = TestConfig.getTykApiKey();
    String strObjectId;
    String strOrderId;
    String strJsonBody;
    String strAuthentication;
    String strTYKURL;


    public ContactNotes() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }

    // New method to get Contact Notes
    public Response getGetContactNotes(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Get Contact Notes");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .get(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        return response;
    }

    // Specific usage example: Check if a personId exists
    public boolean personIdExists(Response response, String personId) throws Exception {
        return JsonHelper.valueExistsInJsonArray(response, "personIds", personId);
    }

    //Function to create a New Person
    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, Map<String, String> mapPersonDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));
        personRequest.setLstNationalities(Collections.singletonList(mapPersonDetails.get("nationality")));

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);
        return response;
    }

    //Function to create a Contact Note
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapNoteDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        ContactNoteRequest noteRequest = new ContactNoteRequest();
        noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));

        noteRequest.setStrSubject(mapNoteDetails.get("subject"));
        noteRequest.setStrNotes(mapNoteDetails.get("notes"));
        noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);
        return response;
    }

}

This a test case for wrong person ID. We need to pass an invalid personId in the feature file and my validation is below - 

Verification										
	VERIFY: Error Message_Reference									
		VERIFY: Validation Error								
			StatusCode		400 Bad Request		Verify		String	
			description		Validation Errors		Verify		String	
			error_1		    Person not found		Verify		String	

	
		
