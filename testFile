package stepDefinations;

import ICOS.createContactNotes;
import ICOS.getContactNotes;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import commonLibrary.DBUtil;
import commonLibrary.SQLQueries;
import config.JsonExtractor;
import config.JsonVerifier;
import config.TestConfig;
import hooks.CucumberHooks;
import io.cucumber.core.logging.Logger;
import io.cucumber.core.logging.LoggerFactory;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.CucumberLogger;
import utilities.ScenarioContext;

public class CreateContactSteps extends BaseStep{


    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();
    private static final Logger logger = LoggerFactory.getLogger(CucumberHooks.class);
    TestConfig testConfig;
    createContactNotes objpostContactNotes;
    private static Response response;
    public static String strToken;
    public String strMembershipDetails;
    public int sizeOfPagination;
    public static String strEnv;
    public static String strEnvType;
    public static String strEnvFDSType;
    public String strFDSHostURL;
    public String strFDSDevHelperURL;
    public Object strRes;
    public String strJWTToken;
    public String strEIAMTokenURL;
    CucumberLogger objCucumberLogger;
    JsonVerifier objJsonVerifier;
    JsonExtractor objJsonExtractor;
    //HashMap<String,String> objAccessToken= new HashMap<>();
    DBUtil objDBUtil;
    public String strUserid;
    SQLQueries objSQLQueries;
    protected ScenarioContext scenarioContext;


    public CreateContactSteps() throws Exception {
        super();
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objpostContactNotes = new createContactNotes();

        //scenarioContext = new ScenarioContext();
    }

    public CreateContactSteps(ScenarioContext scenarioContext) throws Exception {
        super();
        this.scenarioContext = scenarioContext;
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objpostContactNotes = new createContactNotes();
        this.strEnvType = scenarioContext.getToken("strEnvType");
    }

    @And("Send request to generate New Person with {string}")
    public void sendRequestToGenerateNewPerson(String firstName) throws JsonProcessingException {
        String jwtToken = scenarioContext.getToken("JWTToken");
        response =objpostContactNotes.createNewPerson(strEnvType,"Bearer",jwtToken, firstName);
    }

    @Then("Send POST ContactNote Request")
    public void sendPOSTContactNoteRequest() throws JsonProcessingException {
        String jwtToken = scenarioContext.getToken("JWTToken");
        response =objpostContactNotes.createContactNote(strEnvType,"Bearer",jwtToken);
    }

    @And("I verify the Status Code for Create Contact Notes {string}")
    public void iVerifyTheStatusCodeForCreateContactNotes(String strStatusCode) {
        int responseCode= response.statusCode();
        Assert.assertEquals(Integer.parseInt(strStatusCode),responseCode);
    }

    @And("I verify the OrderId")
    public void iVerifyTheOrderId() throws JsonProcessingException {
        String stringOrderId=objpostContactNotes.getOrderId(response);
        ExtentCucumberAdapter.addTestStepLog("Actual value of Order Id is : " +stringOrderId);
        Assert.assertEquals(,stringOrderId);
    }
}

package ICOS;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.Buffer;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;

import java.awt.*;
import java.util.*;
import java.util.List;

import static io.restassured.RestAssured.with;

public class createContactNotes {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String responseBody;
    String TYK_KEY = System.getenv("X-TYK-API-KEY");
    String objectId;
    String orderId;

    public createContactNotes() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }

    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, String firstName) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CREATENEWPERSON");
        objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("uuid", UUID.randomUUID().toString().substring(0,7));
        requestBody.put("subType", "pers_form_ass");
        requestBody.put("domiCountry", "CH");
        requestBody.put("firstName", firstName);
        requestBody.put("lastName", "Lastname");
        requestBody.put("gender", "male");

        List<String> nationalities = new ArrayList<>();
        nationalities.add("CH");

        requestBody.put("nationalities", nationalities);

        String jsonBody = new ObjectMapper().writeValueAsString(requestBody);
        objCucumberLogger.PrintStatus(jsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(jsonBody)
                .post(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        String objectId = response.jsonPath().getString("objectId");
        String orderId = response.jsonPath().getString("orderId");
        objCucumberLogger.PrintStatus("Response is"+responseBody);
        objCucumberLogger.PrintStatus("Extracted Object Id is : "+objectId);
        objCucumberLogger.PrintStatus("Extracted Order Id is : "+orderId);
        return response;
    }

    public Response createContactNote(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CONTACTNOTES");
        objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        Map<String, Object> requestBody = new HashMap<>();

        List<String> personIds = new ArrayList<>();
        personIds.add(objectId);

        requestBody.put("personIds", personIds);
        requestBody.put("subject", "Testsubject");
        requestBody.put("notes", "Testnote");
        requestBody.put("hasFollowup", false);

        String jsonBody = new ObjectMapper().writeValueAsString(requestBody);
        objCucumberLogger.PrintStatus(jsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(jsonBody)
                .post(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);
        return response;
    }

    public String getOrderId(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("orderId").asText();
    }

}
 help me how can I use scneario context here. I need to extract order Id from response of createContactNote and apply assert on it without using any hardcoded value.
