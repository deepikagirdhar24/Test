See the below code - 

package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJODebitCardRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("type")
    private String strType;

    @JsonProperty("maccId")
    private String strMaccId;

    @JsonProperty("ownerId")
    private String strOwnerId;

    @JsonProperty("label")
    private String strLabel;

    @JsonProperty("dailyLimit")
    private BigDecimal bdDailyLimit;

    @JsonProperty("addressId")
    private String strAddressId;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public String getStrMaccId() {
        return strMaccId;
    }

    public void setStrMaccId(String strMaccId) {
        this.strMaccId = strMaccId;
    }

    public String getStrOwnerId() {
        return strOwnerId;
    }

    public void setStrOwnerId(String strOwnerId) {
        this.strOwnerId = strOwnerId;
    }

    public String getStrLabel() {
        return strLabel;
    }

    public void setStrLabel(String strLabel) {
        this.strLabel = strLabel;
    }

    public BigDecimal getBdDailyLimit() {
        return bdDailyLimit;
    }

    public void setBdDailyLimit(BigDecimal bdDailyLimit) {
        this.bdDailyLimit = bdDailyLimit;
    }

    public String getStrAddressId() {
        return strAddressId;
    }

    public void setStrAddressId(String strAddressId) {
        this.strAddressId = strAddressId;
    }
}

 public POJODebitCardRequest buildDebitCardPayload(Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) {
        POJODebitCardRequest debitCard = new POJODebitCardRequest();

        String strMoneyAccountObjectId = scenarioContext.getContext("moneyAccountObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");
//        String strAddressObjectId = scenarioContext.getContext("addressObjectIdCard");

        debitCard.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        debitCard.setStrType(payloadHelper.normalize(mapDebitCardDetails.get("type")));

        String resolvedMaccId = payloadHelper.resolveId(mapDebitCardDetails.get("maccId"), strMoneyAccountObjectId);
        debitCard.setStrMaccId(resolvedMaccId);

        debitCard.setStrOwnerId(payloadHelper.normalize(mapDebitCardDetails.get("ownerId")));

        debitCard.setStrLabel(payloadHelper.normalize(mapDebitCardDetails.get("label")));
        payloadHelper.applyBigDecimalField(mapDebitCardDetails.get("dailyLimit"), "dailyLimit", debitCard);

        String resolvedAddressId = payloadHelper.resolveId(mapDebitCardDetails.get("addressId"), strAddressObjectId);
        debitCard.setStrAddressId(resolvedAddressId);

        return debitCard;
    }

public void applyBigDecimalField(String rawValue, String fieldName, POJODebitCardRequest card) {
        String normalized = normalize(rawValue);
        if (normalized != null && !normalized.isEmpty()) {
            try {
                BigDecimal parsed = new BigDecimal(normalized);
                switch (fieldName) {
                    case "dailyLimit":
                        card.setBdDailyLimit(parsed);
                        break;
                    default:
                        System.err.println("Unknown field: " + fieldName);
                }
            } catch (NumberFormatException e) {
                System.err.println("Invalid numeric value for " + fieldName + ": " + normalized);
            }
        }
}

    public String normalize(String value) {
        if (value == null) return "";
        switch (value.trim().toUpperCase()) {
            case "NA": return null;
            case "EMPTY": return "";
            default: return value;
        }
    }

but I am gettig the error on below 2 test cases - 
