package utilities;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.restassured.response.Response;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;

public class JsonHelper {

    static ObjectMapper objectMapper = new ObjectMapper();

    public static String extractStringField(Response response, String key) throws Exception {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path(key).asText();
    }

    public static Boolean extractBooleanField(Response response, String key) throws Exception {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path(key).asBoolean();
    }

    public static boolean valueExistsInJsonArray(Response response, String jsonPath, String targetValue) throws Exception {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode arrayNode = rootNode.path(jsonPath);
        if (arrayNode.isArray()) {
            return iterateAndCheckArray(arrayNode, targetValue);
        }
        return false;
    }

    private static boolean iterateAndCheckArray(JsonNode arrayNode, String targetValue) {
        for (JsonNode itemNode : arrayNode) {
            String currentValue = itemNode.asText();
            System.out.println("Checking item: " + currentValue);
            if (targetValue.equals(currentValue)) {
                logMatchFound(currentValue);
                return true;
            }
        }
        return false;
    }

    private static void logMatchFound(String value) {
        System.out.println("Match found: " + value);
        ExtentCucumberAdapter.addTestStepLog("Actual value found: " + value);
    }
}

String val = JsonHelper.extractStringField(response, "objectId");
Boolean flag = JsonHelper.extractBooleanField(response, "hasFollowup");
boolean found = JsonHelper.valueExistsInJsonArray(response, "personIds", "1234");
