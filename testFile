package ICOS;

import ICOS.pojo.ContactNoteRequest;
import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.JsonHelper;

import java.util.Collections;
import java.util.Map;
import java.util.UUID;

import static io.restassured.RestAssured.with;

public class ContactNotes {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String strResponseBody;
    String TYK_KEY = TestConfig.getTykApiKey();
    String strObjectId;
    String strOrderId;
    String strJsonBody;
    String strAuthentication;
    String strTYKURL;


    public ContactNotes() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }

    // New method to get Contact Notes
    public Response getGetContactNotes(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Get Contact Notes");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .get(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        return response;
    }

    // Specific usage example: Check if a personId exists
    public boolean personIdExists(Response response, String personId) throws Exception {
        return JsonHelper.valueExistsInJsonArray(response, "personIds", personId);
    }

    //Function to create a New Person
    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, Map<String, String> mapPersonDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));
        personRequest.setLstNationalities(Collections.singletonList(mapPersonDetails.get("nationality")));

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);
        return response;
    }

    //Function to create a Contact Note
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapNoteDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        ContactNoteRequest noteRequest = new ContactNoteRequest();
        noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));

        noteRequest.setStrSubject(mapNoteDetails.get("subject"));
        noteRequest.setStrNotes(mapNoteDetails.get("notes"));
        noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);
        return response;
    }

}


package ICOS;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;

import java.util.*;

import static io.restassured.RestAssured.with;

public class getUser {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String responseBody;
    //String TYK_KEY = System.getenv("X-TYK-API-KEY");
    String TYK_KEY = TestConfig.getTykApiKey();//--> Newly Added
    String strAuthentication;//--> Newly Added
    String strTYKURL;//--> Newly Added

    public getUser() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }



    //Step4 get the user id

    public Response getGetUser(String strEnvType,String strBearerToken,String strJWTToken, String strUserId) throws JsonProcessingException {
//        HashMap<String,String> formParams= new HashMap<String,String>();
//        String strAuthentication=strBearerToken+" "+strJWTToken;
//        objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
//        ExtentCucumberAdapter.addTestStepLog("Actual value of Authentication is : " +strAuthentication);
//        objCucumberLogger.PrintStatus("user id is"+strUserId);
//        //String strTYKURLKey="TYK.ENV."+strEnvType;
//        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.USERID")+strUserId;
//        objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken); //--> Newly Added
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.USERID");//--> Newly Added

        // Logging request details //--> Newly Added
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("UserID",strUserId)
                .get(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);
        //objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);

        // Logging response details //--> Newly Added
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        return response;
    }


    // New method to get name from the JSON
    public String getName(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("name").asText();
    }

    // New method to get business units as a list
    public List<String> getBusinessUnits(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode businessUnitsNode = rootNode.path("businessUnits");

        List<String> businessUnits = new ArrayList<>();

        if (businessUnitsNode.isArray()) {
            for (JsonNode buNode : businessUnitsNode) {
                businessUnits.add(buNode.path("bu").asText());
            }
        }

        return businessUnits;
    }

    // Method to get all roles across all business units
    public List<String> getAllRoles(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode businessUnitsNode = rootNode.path("businessUnits");

        List<String> allRoles = new ArrayList<>();

        if (businessUnitsNode.isArray()) {
            for (JsonNode buNode : businessUnitsNode) {
                JsonNode rolesNode = buNode.path("roles");
                if (rolesNode.isArray()) {
                    for (JsonNode roleNode : rolesNode) {
                        allRoles.add(roleNode.path("name").asText());
                    }
                }
            }
        }

        return allRoles;
    }

    // Method to get teams
    public List<String> getTeams(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode teamsNode = rootNode.path("privateBanker").path("teams");

        List<String> teams = new ArrayList<>();

        if (teamsNode.isArray()) {
            for (JsonNode teamNode : teamsNode) {
                teams.add(teamNode.path("name").asText());
            }
        }

        return teams;
    }


    public List<List<String>> processUserData(Response response) throws JsonProcessingException {
        List<List<String>> strGetUserResponse = new ArrayList<>();

        String name = getName(response);
        List<String> businessUnits = getBusinessUnits(response);
        List<String> roles = getAllRoles(response);
        List<String> teams = getTeams(response);
        //boolean hasRequiredRole = hasRole(response, "R_OB_SUPP_CENT_COUTTS");

        List<String> nameList = new ArrayList<>();
        nameList.add(name);
        strGetUserResponse.add(nameList);

        strGetUserResponse.add(businessUnits);
        strGetUserResponse.add(teams);
        strGetUserResponse.add(roles);


        return strGetUserResponse;
    }


    public boolean hasRole(Response response, String roleName) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode businessUnitsNode = rootNode.path("businessUnits");
        if (businessUnitsNode.isArray()) {
            for (JsonNode buNode : businessUnitsNode) {
                JsonNode rolesNode = buNode.path("roles");
                if (rolesNode.isArray()) {
                    for (JsonNode roleNode : rolesNode) {
                        String currentRole = roleNode.path("name").asText();
                        if (roleName.equals(currentRole)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }


    public boolean hasBURole(Response response, String buName) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode businessUnitsNode = rootNode.path("businessUnits");
        if (businessUnitsNode.isArray()) {
            for (JsonNode buNode : businessUnitsNode) {
                String currentBU = buNode.path("bu").asText();
                if (buName.equals(currentBU)) {
                    return true;
                }
            }
        }
        return false;
    }


    /**
     * Checks if the user is NOT a private banker
     *
     * @param response The API response containing user data
     * @return true if the user is NOT a private banker, false if they are
     * @throws JsonProcessingException if JSON parsing fails
     */
    public boolean isNotPrivateBanker(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode privateBankerNode = rootNode.path("privateBanker");

        // Check if privateBanker node is missing or is null/empty
        if (privateBankerNode.isMissingNode() || privateBankerNode.isNull()) {
            return true;
        }

        // Check if teams array is empty
        JsonNode teamsNode = privateBankerNode.path("teams");
        if (teamsNode.isArray() && teamsNode.size() == 0) {
            return true;
        }

        // If we have a privateBanker node with teams, the user is a private banker
        return false;
    }



    /**
     * Checks if the specific team ID exists in the user's teams
     *
     * @param response The API response containing user data
     * @param teamId The team ID to check for
     * @return true if the team ID exists, false otherwise
     * @throws JsonProcessingException if JSON parsing fails
     */
    public boolean hasTeamId(Response response, String teamId) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode teamsNode = rootNode.path("privateBanker").path("teams");

        if (teamsNode.isArray()) {
            for (JsonNode teamNode : teamsNode) {
                String currentTeamId = teamNode.path("id").asText();
                if (teamId.equals(currentTeamId)) {
                    return true;
                }
            }
        }

        return false;
    }




    /**
     * Checks if the user has the specified name
     *
     * @param response The API response containing user data
     * @param userName The name to check for
     * @return true if the name matches, false otherwise
     * @throws JsonProcessingException if JSON parsing fails
     */
    public boolean hasName(Response response, String userName) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        String name = rootNode.path("name").asText();
        if (!name.equalsIgnoreCase(""))
            return true;
        else
            return false;
    }




}


package utilities;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.restassured.response.Response;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;

public class JsonHelper {

    static ObjectMapper objectMapper = new ObjectMapper();

    public static String extractStringField(Response response, String key) throws Exception {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path(key).asText();
    }

    public static Boolean extractBooleanField(Response response, String key) throws Exception {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path(key).asBoolean();
    }

    public static boolean valueExistsInJsonArray(Response response, String jsonPath, String targetValue) throws Exception {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode arrayNode = rootNode.path(jsonPath);
        if (arrayNode.isArray()) {
            return iterateAndCheckArray(arrayNode, targetValue);
        }
        return false;
    }

    private static boolean iterateAndCheckArray(JsonNode arrayNode, String targetValue) {
        for (JsonNode itemNode : arrayNode) {
            String currentValue = itemNode.asText();
            System.out.println("Checking item: " + currentValue);
            if (targetValue.equals(currentValue)) {
                logMatchFound(currentValue);
                return true;
            }
        }
        return false;
    }

    private static void logMatchFound(String value) {
        System.out.println("Match found: " + value);
        ExtentCucumberAdapter.addTestStepLog("Actual value found: " + value);
    }
}

package utilities;

import java.util.HashMap;

public class ScenarioContext {

    private HashMap<String, String> tokenMap = new HashMap<>();

    public void setToken(String key, String value)
    {
        tokenMap.put(key, value);
    }

    public String getToken(String key)
    {
        return tokenMap.get(key);
    }

    public HashMap<String, String> getAllTokens()
    {
        return tokenMap;
    }
}


package stepDefinations;

import ICOS.ContactNotes;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import commonLibrary.DBUtil;
import commonLibrary.SQLQueries;
import config.JsonExtractor;
import config.JsonVerifier;
import config.TestConfig;
import hooks.CucumberHooks;
import io.cucumber.core.logging.Logger;
import io.cucumber.core.logging.LoggerFactory;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.CucumberLogger;
import utilities.JsonHelper;
import utilities.ScenarioContext;

import java.util.Map;

public class ContactNotesSteps extends BaseStep{


    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();
    private static final Logger logger = LoggerFactory.getLogger(CucumberHooks.class);
    TestConfig testConfig;
    ContactNotes objContactNotes;
    private static Response response;
    public static String strToken;
    public String strMembershipDetails;
    public int sizeOfPagination;
    public static String strEnv;
    public static String strEnvType;
    public static String strEnvFDSType;
    public String strFDSHostURL;
    public String strFDSDevHelperURL;
    public Object strRes;
    public String strJWTToken;
    public String strEIAMTokenURL;
    CucumberLogger objCucumberLogger;
    JsonVerifier objJsonVerifier;
    JsonExtractor objJsonExtractor;
    DBUtil objDBUtil;
    public String strUserid;
    SQLQueries objSQLQueries;
    protected ScenarioContext scenarioContext;

    public ContactNotesSteps(ScenarioContext scenarioContext) throws Exception {
        super();
        this.scenarioContext = scenarioContext;
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objContactNotes = new ContactNotes();
        this.strEnvType = scenarioContext.getToken("strEnvType");
    }

    @Then("Send Request to get Contact Note Information")
    public void sendRequestToGetContactNoteInformation() throws JsonProcessingException {
        String jwtToken = scenarioContext.getToken("JWTToken");
        //response =objContactNotes.getGetContactNotes(strEnvType,objAccessToken.get("tokenType"),strJWTToken);
        response =objContactNotes.getGetContactNotes(strEnvType,"Bearer",jwtToken);
    }

    @And("I verify the Status Code for Contact Notes {string}")
    public void iVerifyTheStatusCodeForContactNotes(String strStatusCode) {
        int responseCode= response.statusCode();
        ExtentCucumberAdapter.addTestStepLog("Actual value of Status code is : " +responseCode);
        Assert.assertEquals(Integer.parseInt(strStatusCode),responseCode);
    }

    @And("I verify the Subject {string}")
    public void iVerifyTheSubject(String subject) throws Exception {
        String stringValueSubject= JsonHelper.extractStringField(response, "subject");
        ExtentCucumberAdapter.addTestStepLog("Actual value of Subject is : " +stringValueSubject);
        Assert.assertEquals(subject,stringValueSubject);
    }

    @And("I verify the Notes {string}")
    public void iVerifyTheNotes(String notes) throws Exception {
        String stringValueNotes=JsonHelper.extractStringField(response, "notes");
        ExtentCucumberAdapter.addTestStepLog("Actual value of Notes is : " +stringValueNotes);
        Assert.assertEquals(notes,stringValueNotes);
    }

    @And("I verify the HasFollowup {string}")
    public void iVerifyTheHasFollowup(String hasFollowup) throws Exception {
        Boolean boolValuehasFollowup=JsonHelper.extractBooleanField(response, "hasFollowup");
        ExtentCucumberAdapter.addTestStepLog("Actual value of HasFollowUp is : " +boolValuehasFollowup);
        Assert.assertEquals(true,boolValuehasFollowup);
    }

    @And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails);
    }

    @Then("Send POST ContactNote Request with below details")
    public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails);
    }

    @And("I verify the Person Item {string}")
    public void iVerifyThePersonItem(String personItem) throws Exception {
        boolean boolIsPersonPresent = objContactNotes.personIdExists(response, personItem);
        Assert.assertEquals(true, boolIsPersonPresent);
    }

    @And("I verify the OrderId")
    public void iVerifyTheOrderId() throws Exception {
        String actualOrderId = JsonHelper.extractStringField(response, "orderId");
        ExtentCucumberAdapter.addTestStepLog("Actual value of Order Id is: " + actualOrderId);

        Assert.assertNotNull(actualOrderId, "Order Id should not be null");
        Assert.assertFalse(actualOrderId.isEmpty(), "Order Id should not be empty");
    }
}


package stepDefinations;

import ICOS.getUser;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import commonLibrary.DBUtil;
import commonLibrary.SQLQueries;
import config.JsonExtractor;
import config.JsonVerifier;
import config.TestConfig;
import hooks.CucumberHooks;
import io.cucumber.core.logging.Logger;
import io.cucumber.core.logging.LoggerFactory;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.CucumberLogger;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import utilities.ScenarioContext;

public class GetUserSteps extends BaseStep{


    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();
    private static final Logger logger = LoggerFactory.getLogger(CucumberHooks.class);
    TestConfig testConfig;
    getUser objgetUser;
    private static Response response;
    public static String strToken;
    public String strMembershipDetails;
    public int sizeOfPagination;
    public static String strEnv;
    public static String strEnvType;
    public static String strEnvFDSType;
    public String strFDSHostURL;
    public String strFDSDevHelperURL;
    public Object strRes;
    public String strJWTToken;
    public String strEIAMTokenURL;
    CucumberLogger objCucumberLogger;
    JsonVerifier objJsonVerifier;
    JsonExtractor objJsonExtractor;
    //HashMap<String,String> objAccessToken= new HashMap<>();
    DBUtil objDBUtil;
    public String strUserid;
    SQLQueries objSQLQueries;
    ScenarioContext scenarioContext;


    public GetUserSteps() throws Exception {
        super();
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objgetUser = new getUser();

        //scenarioContext = new ScenarioContext();
    }

    public GetUserSteps(ScenarioContext scenarioContext) throws Exception {


        super();
        this.scenarioContext = scenarioContext;
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objgetUser = new getUser();

    }


    @Then("I verify the API Response")
    public void VerifyResponse()
    {
        Map<String, Object> extractedValues = new HashMap<>();
        objCucumberLogger.PrintStatus("Inside this");
        objCucumberLogger.PrintStatus("Response",strRes.toString());
        extractedValues=objJsonExtractor.extractJsonValues(strRes.toString());
        List<String> ccValues = (List<String>) extractedValues.get("isoCode");
        ExtentCucumberAdapter.addTestStepLog("Response is" +ccValues);
        Assert.assertEquals(objJsonVerifier.verifyJson_getCurrency(strRes.toString()),true);

    }

    @Given("I generate EIAM JWT Token")
    public void iGenerateEIAMJWTToken() {
    }

    @Given("Send Request to get Authentication Token for ICOS")
    public void sendRequestToGetAuthenticationTokenForICOS() throws JsonProcessingException {
        this.strEnvType=testDataConfig.getENVIRONMENT();
        strEIAMTokenURL= objdevHelperLibrary.getEIAMTokenURL();
        objAccessToken= objdevHelperLibrary.getEIAMToken_ICOS(strEIAMTokenURL);
        objCucumberLogger.PrintStatus("Access Token  is"+objAccessToken);
        ExtentCucumberAdapter.addTestStepLog("Actual value of Access Token is : " +objAccessToken);
        scenarioContext.setToken("AccessToken",objAccessToken.get("accessToken"));
        scenarioContext.setToken("strEnvType",strEnvType);
    }

    @When("I generate the JWT Token")
    public void iGenerateTheJWTToken() throws JsonProcessingException {
        String strBearerToken=objAccessToken.get("tokenType");
        String strAccessToken=objAccessToken.get("accessToken");
        strJWTToken= objdevHelperLibrary.getTykToken(strEnvType,strAccessToken,strBearerToken);
        scenarioContext.setToken("JWTToken",strJWTToken);
    }

    @And("I get the Customer ID from Database {string}")
    public void iGetTheCustomerIDFromDatabase(String strSQLQuery) throws SQLException, ClassNotFoundException {
        String strTACBDB=testConfig.getTACBEnv();
        String strTACBPassword=testConfig.getTACBPassword(strTACBDB);
        objCucumberLogger.PrintStatus("Password is"+strTACBPassword);
        ArrayList<String> objUserID=objDBUtil.selectQuery(strTACBDB, strTACBPassword,objSQLQueries.ReturnSQLQuery(strSQLQuery));
        objCucumberLogger.PrintStatus("UserIDS are:"+objUserID.toString());
        strUserid=objUserID.get(0);

    }

    @Then("Send Request to get User Role Information")
    public void sendRequestToGetUserRoleInformation() throws JsonProcessingException {
        response =objgetUser.getGetUser(strEnvType,objAccessToken.get("tokenType"),strJWTToken,strUserid);

    }


    @And("I verify the BU Name {string}")
    public void iVerifyTheBUName(String strBU) throws JsonProcessingException{
        boolean boolHasBURole= objgetUser.hasBURole(response,strBU);
        Assert.assertEquals(true,boolHasBURole);
    }


    @And("I verify the Role {string}")
    public void iVerifyTheRole(String strRole) throws JsonProcessingException {
        boolean boolHasRoleName=objgetUser.hasRole(response,strRole);
        Assert.assertEquals(true,boolHasRoleName);
    }

    @And("I verify that Private Banker Status {string}")
    public void iVerifyThatPrivateBankerStatus(String IsPrivateBanker) throws JsonProcessingException {
        Assert.assertEquals(false,objgetUser.isNotPrivateBanker(response));
    }

    @And("I verify the Status Code {string}")
    public void iVerifyTheStatusCode(String strStatusCode) {
        int responseCode= response.statusCode();
        Assert.assertEquals(Integer.parseInt(strStatusCode),responseCode);
    }

    @And("I verify the TeamID {string}")
    public void iVerifyTheTeamID(String strTeamID) throws JsonProcessingException {
        Assert.assertEquals(true,objgetUser.hasTeamId(response,strTeamID));
    }
}


Feature: Create Contact Notes API

  Scenario Outline: Verify the Post Contact Notes API
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And Send request to generate New Person with below details
      | firstName       | <firstName>    |
      | lastName        | Lastname       |
      | subType         | pers_form_ass  |
      | domicileCountry | CH             |
      | gender          | male           |
      | nationality     | CH             |
    Then Send POST ContactNote Request with below details
      | subject      | Testsubject     |
      | notes        | Testnote        |
      | hasFollowup  | false           |
    And I verify the Status Code for Contact Notes "<statusCode>"
    And I verify the OrderId

    Examples:
      | firstName   | statusCode |
      | FirstName_1 | 200        |
      | FirstName_2 | 200        |




Feature: Get Contact Notes API

  Scenario Outline: Verify the Get Contact Notes API
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send Request to get Contact Note Information
    And I verify the Status Code for Contact Notes "<StatusCode>"
    And I verify the Person Item "<Item>"
    And I verify the Subject "<Subject>"
    And I verify the Notes "<Notes>"
    And I verify the HasFollowup "<HasFollowup>"

    Examples:
      | StatusCode | Item      | Subject | Notes | HasFollowup |
      |  200       | 665321701 | Subject | Notes | true        |

Feature:  Get User API

  Scenario Outline: Verify the Get User API for Hub Service User
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And I get the Customer ID from Database "<SQLQueries>"
    Then Send Request to get User Role Information
    And I verify the BU Name "<BU>"
    And I verify the Role "<Role>"

    Examples:
      | SQLQueries         | BU      | Role                  |
      | query_HubService   | RBS.CUK | R_OB_SUPP_CENT_COUTTS |
      | queryNonHubService | RBS.CUK | R_BANK_COUTTS         |



  Scenario Outline: Verify the Get User API for User With 0Teams
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And I get the Customer ID from Database "<SQLQueries>"
    Then Send Request to get User Role Information
    And I verify that Private Banker Status "<Is_PrivateBanker>"


    Examples:
      | SQLQueries          | BU      | Is_PrivateBanker |
      | UserWith0TeamsQuery | RBS.CUK | false            |


  Scenario Outline: Verify the Get User API for Invalid User
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And I get the Customer ID from Database "<SQLQueries>"
    Then Send Request to get User Role Information
    And I verify the Status Code "<StatusCode>"

    Examples:
      | SQLQueries       | StatusCode |
      | InvalidUserQuery | 404        |


    @Test
  Scenario Outline: Verify the Get User API for Hub Service User
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And I get the Customer ID from Database "<SQLQueries>"
    Then Send Request to get User Role Information
      And I verify the BU Name "<BU>"
      And I verify the TeamID "<TeamID>"


    Examples:
      | SQLQueries                     | BU      | TeamID          |
      | UserwithGreaterThan0TeamsQuery | RBS.CUK | £H6_0_00_00_037 |


  Scenario Outline: Verify the Get User API for Hub Service User
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And I get the Customer ID from Database "<SQLQueries>"
    Then Send Request to get User Role Information
    And I verify the BU Name "<BU>"
    And I verify the Role "<Role>"

    Examples:
      | SQLQueries               | BU      | Role                  |
      | UserwithMultipleBUsQuery | RBS.CUK | R_OB_SUPP_CENT_COUTTS |
