@UpdNaturalPerson200
Scenario Outline: Verify the Patch Update Natural Persons API with valid data - 089 - documentationIdentity with identityType=Residence permit # src/test/resources/Features/UpdateNaturalPerson.feature:162
  Given Send Request to get Authentication Token for ICOS                                                                                      # stepDefinations.GetUserSteps.sendRequestToGetAuthenticationTokenForICOS()
  When I generate the JWT Token                                                                                                                # stepDefinations.GetUserSteps.iGenerateTheJWTToken()
Sept 04, 2025 4:30:54 PM hooks.CucumberHooks beforeScenario
INFO: Before Scenario: Test is starting!
Sept 04, 2025 4:30:56 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Natural Person Association1 is: {"objectId":"665099736","orderId":"2957169943"}
Sept 04, 2025 4:30:58 PM utilities.CucumberLogger PrintStatus
  Then Send request to generate Natural Person for Association1 with below details                                                             # stepDefinations.NaturalPersonSteps.sendRequestToGenerateNaturalPersonAssc1WithDetails(io.cucumber.datatable.DataTable)
    | firstName       | Firstname     |
    | lastName        | Lastname      |
    | subType         | pers_form_ass |
    | domicileCountry | CH            |
    | gender          | male          |
    | nationalities   | CH            |
  Then Send request to generate Natural Person for Association2 with below details                                                             # stepDefinations.NaturalPersonSteps.sendRequestToGenerateNaturalPersonAssc2WithDetails(io.cucumber.datatable.DataTable)
INFO: Value is: Response for Natural Person Association2 is: {"objectId":"665099737","orderId":"2957169951"}
    | firstName       | Firstname     |
    | lastName        | Lastname      |
    | subType         | pers_form_ass |
    | domicileCountry | CH            |
    | gender          | male          |
    | nationalities   | CH            |
  Then Send request to generate Legal Person for Association1 with below details                                                               # stepDefinations.LegalPersonSteps.sendRequestToGenerateLegalPersonForAcc1WithDetails(io.cucumber.datatable.DataTable)
    | subType         | pers_form_ass    |
Sept 04, 2025 4:31:00 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Legal Person Association1 is: {"objectId":"665099738","orderId":"2957169966"}
Sept 04, 2025 4:31:02 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Natural Person is: {"objectId":"665099739","orderId":"2957169974"}
    | domicileCountry | GB               |
    | name            | Company Name Ltd |
  Then Send request to generate New Person with below details                                                                                  # stepDefinations.NaturalPersonSteps.sendRequestToGenerateNewPersonWithDetails(io.cucumber.datatable.DataTable)
    | firstName       | Firstname     |
    | lastName        | Lastname      |
    | subType         | pers_form_ass |
    | domicileCountry | CH            |
    | gender          | male          |
    | nationalities   | CH            |
  Then Send request to generate Legal Person with below details                                                                                # stepDefinations.LegalPersonSteps.sendRequestToGenerateLegalPersonWithDetails(io.cucumber.datatable.DataTable)
    | subType         | pers_form_ass    |
Sept 04, 2025 4:31:04 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Legal Person is: {"objectId":"665099740","orderId":"2957169987"}
Sept 04, 2025 4:31:06 PM utilities.CucumberLogger PrintStatus
    | domicileCountry | GB               |
    | name            | Company Name Ltd |
  Then Send request to create Address with below details                                                                                       # stepDefinations.AddressSteps.sendRequestToCreateAddressWithDetails(io.cucumber.datatable.DataTable)
    | firstName        | Firstname             |
    | middleName       | Middlename            |
INFO: Value is: Response for Address is: {"objectId":"665882877","orderId":"2957169997"}
    | lastName         | Lastname              |
    | salutation       | mr                    |
    | salutationLetter | mr                    |
    | attnOf           | [empty]               |
    | crof             | [empty]               |
    | residency        | 123                   |
    | streetNr         | 123                   |
    | street           | teststreet + RANDOM_6 |
    | streetAdd        | Addition street       |
    | poBox            | P.O.Box 123           |
    | city             | Zurich                |
    | state            | RANDOM_49             |
    | zip              | 8001                  |
    | country          | CH                    |
  Then Send request to generate New Document with below details                                                                                # stepDefinations.DocumentSteps.sendRequestToGenerateNewDocumentWithDetails(io.cucumber.datatable.DataTable)
    | personId      | NATURAL_PERSON_OBJECT_ID                                                                      |
Sept 04, 2025 4:31:07 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Document is: {"objectId":"665099739","orderId":"2957170004"}
    | challengeWord | Challenge Answer                                                                              |
    | qaPairs       | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5 |
Sept 04, 2025 4:31:08 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Request for UPDATE Natural Person is: {"uuid":"7fd4b3d","subType":"pers_form_doc","domiCountry":"GB","firstName":"Firstname","middleName":"Middlename","lastName":"Lastname","birthDate":"1985-09-04","gender":"male","nationalities":["GB"],"title":"mr","birthPlace":"London","birthCountry":"GB","electronicAddresses":[{"medium":"email","kind":"private","value":"first.last@gmail.com","isPreferred":false}],"isEmployee":false,"taxResidences":[{"country":"GB","taxNumber":"cojfcmqogd","identityType":"nin"}],"documentationIdentity":[{"identityType":"aa","number":"GB1234567890","issueCountry":"GB","issuePlace":"London","issueDate":"2025-09-03","validUntil":"2025-09-05"}],"pepAssociationCountry":"GB","pepClassificationReason":"Testreason","pepCategory":"none","isMarketingOptOut":false,"fatcaStatus":"rbsc$fatca_non_us_person","crsType":"rbsc$crs_np_doc","ukTaxResidenceFromDate":"2015-09-04","hasTaxAvoidanceSchemes":false,"isHoldingBearerShares":false,"hasInvestableAssets10M":false,"hasHistoricTaxIssues":false,"hasTaxChgDomiStatus":false,"hasTaxChgUkDomiStatus":false,"hasTaxPrevClaimRemitanceBasis":false,"hasTaxIntendClaimRemitanceBasis":false,"accountants":[{"name":"TestName","companyId":"665099740","role":"rbsc$tax_adviser_primary","addressId":"665099740","email":"accountant.person@acccomp.com","hasConsent":false,"doSendCopy":false}],"hasTravelProtection":false,"hasCouttsOnline":false,"hasCouttsId":false,"associations":[{"personId":"665099736","role":"rbsc$is_sibling_of"}],"idQuestionId":"665099739","correspondanceAddressId":"665882877"}
Sept 04, 2025 4:31:08 PM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for UPDATE Natural Person is: {"description":"Validation Errors","validationErrors":[{"value":"665099740","error":"Address tax accountant not found"}]}
  Then Send request to update Natural Person with below details                                                                                # stepDefinations.UpdNaturalPersonSteps.sendRequestToGenerateNewPersonWithDetails(io.cucumber.datatable.DataTable)
    | subType                         | pers_form_doc                                                                                                        |
    | domiCountry                     | GB                                                                                                                   |
    | firstName                       | Firstname                                                                                                            |
    | middleName                      | Middlename                                                                                                           |
    | lastName                        | Lastname                                                                                                             |
    | birthDate                       | DEFAULT                                                                                                              |
    | gender                          | male                                                                                                                 |
    | nationalities                   | GB                                                                                                                   |
    | title                           | mr                                                                                                                   |
    | birthPlace                      | London                                                                                                               |
    | birthCountry                    | GB                                                                                                                   |
    | electronicAddresses             | email;private;first.last@gmail.com;false                                                                             |
    | isEmployee                      | false                                                                                                                |
    | taxResidences                   | GB;RANDOM_10;nin                                                                                                     |
    | documentationIdentity           | aa;GB1234567890;GB;London;DEFAULT;DEFAULT                                                                            |
    | pepAssociationCountry           | GB                                                                                                                   |
    | pepClassificationReason         | Testreason                                                                                                           |
    | pepCategory                     | none                                                                                                                 |
    | isMarketingOptOut               | false                                                                                                                |
    | fatcaStatus                     | rbsc$fatca_non_us_person                                                                                             |
    | crsType                         | rbsc$crs_np_doc                                                                                                      |
    | ukTaxResidenceFromDate          | DEFAULT                                                                                                              |
    | hasTaxAvoidanceSchemes          | false                                                                                                                |
    | isHoldingBearerShares           | false                                                                                                                |
    | hasInvestableAssets10M          | false                                                                                                                |
    | hasHistoricTaxIssues            | false                                                                                                                |
    | hasTaxChgDomiStatus             | false                                                                                                                |
    | hasTaxChgUkDomiStatus           | false                                                                                                                |
    | hasTaxPrevClaimRemitanceBasis   | false                                                                                                                |
    | hasTaxIntendClaimRemitanceBasis | false                                                                                                                |
    | accountants                     | TestName;LEGAL_PERSON_OBJECT_ID;rbsc$tax_adviser_primary;ADDRESS_OBJECT_ID;accountant.person@acccomp.com;false;false |
    | hasTravelProtection             | false                                                                                                                |
    | hasCouttsOnline                 | false                                                                                                                |
    | hasCouttsId                     | false                                                                                                                |
    | associations                    | NATURAL_PERSON_OBJECT_ID_1;rbsc$is_sibling_of                                                                        |
    | idQuestionId                    | DOCUMENT_OBJECT_ID                                                                                                   |
    | correspondanceAddressId         | ADDRESS_OBJECT_ID                                                                                                    |
  And I verify the Status Code for Update Natural Persons "200"                                                                                # stepDefinations.UpdNaturalPersonSteps.iVerifyTheStatusCodeForUpdateNaturalPersons(java.lang.String)
      java.lang.AssertionError: expected [400] but found [200]
	at org.testng.Assert.fail(Assert.java:111)
	at org.testng.Assert.failNotEquals(Assert.java:1578)
	at org.testng.Assert.assertEqualsImpl(Assert.java:150)
	at org.testng.Assert.assertEquals(Assert.java:132)
	at org.testng.Assert.assertEquals(Assert.java:1419)
	at org.testng.Assert.assertEquals(Assert.java:1383)
	at org.testng.Assert.assertEquals(Assert.java:1429)
	at stepDefinations.UpdNaturalPersonSteps.iVerifyTheStatusCodeForUpdateNaturalPersons(UpdNaturalPersonSteps.java:84)
	at âœ½.I verify the Status Code for Update Natural Persons "200"(file:///C:/Users/girdd/IdeaProjects/icosapitests/src/test/resources/Features/UpdateNaturalPerson.feature:95)

  And I verify the "objectId" exists in Update Natural Person response                                                                         # stepDefinations.UpdNaturalPersonSteps.iVerifyTheKeyExistsInUpdateNaturalPersonResponse(java.lang.String)
  And I verify the "orderId" exists in Update Natural Person response   


code is - 

  Scenario Outline: Verify the Patch Update Natural Persons API with valid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to generate Natural Person for Association1 with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate Natural Person for Association2 with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate Legal Person for Association1 with below details
      | subType         | pers_form_ass     |
      | domicileCountry | GB                |
      | name            | Company Name Ltd  |
    Then Send request to generate New Person with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate Legal Person with below details
      | subType         | pers_form_ass     |
      | domicileCountry | GB                |
      | name            | Company Name Ltd  |
    Then Send request to create Address with below details
      | firstName       | Firstname             |
      | middleName      | Middlename            |
      | lastName        | Lastname              |
      | salutation      | mr                    |
      | salutationLetter| mr                    |
      | attnOf          |                       |
      | crof            |                       |
      | residency       | 123                   |
      | streetNr        | 123                   |
      | street          | teststreet + RANDOM_6 |
      | streetAdd       | Addition street       |
      | poBox           | P.O.Box 123           |
      | city            | Zurich                |
      | state           | RANDOM_49             |
      | zip             | 8001                  |
      | country         | CH                    |
    Then Send request to generate New Document with below details
      | personId      | NATURAL_PERSON_OBJECT_ID                                                                       |
      | challengeWord | Challenge Answer                                                                               |
      | qaPairs       | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5  |
    Then Send request to update Natural Person with below details
      | subType                           | <subType>                           |
      | domiCountry                       | <domiCountry>                       |
      | firstName                         | <firstName>                         |
      | middleName                        | <middleName>                        |
      | lastName                          | <lastName>                          |
      | birthDate                         | <birthDate>                         |
      | gender                            | <gender>                            |
      | nationalities                     | <nationalities>                     |
      | title                             | <title>                             |
      | birthPlace                        | <birthPlace>                        |
      | birthCountry                      | <birthCountry>                      |
      | electronicAddresses               | <electronicAddresses>               |
      | isEmployee                        | <isEmployee>                        |
      | taxResidences                     | <taxResidences>                     |
      | documentationIdentity             | <documentationIdentity>             |
      | pepAssociationCountry             | <pepAssociationCountry>             |
      | pepClassificationReason           | <pepClassificationReason>           |
      | pepCategory                       | <pepCategory>                       |
      | isMarketingOptOut                 | <isMarketingOptOut>                 |
      | fatcaStatus                       | <fatcaStatus>                       |
      | crsType                           | <crsType>                           |
      | ukTaxResidenceFromDate            | <ukTaxResidenceFromDate>            |
      | hasTaxAvoidanceSchemes            | <hasTaxAvoidanceSchemes>            |
      | isHoldingBearerShares             | <isHoldingBearerShares>             |
      | hasInvestableAssets10M            | <hasInvestableAssets10M>            |
      | hasHistoricTaxIssues              | <hasHistoricTaxIssues>              |
      | hasTaxChgDomiStatus               | <hasTaxChgDomiStatus>               |
      | hasTaxChgUkDomiStatus             | <hasTaxChgUkDomiStatus>             |
      | hasTaxPrevClaimRemitanceBasis     | <hasTaxPrevClaimRemitanceBasis>     |
      | hasTaxIntendClaimRemitanceBasis   | <hasTaxIntendClaimRemitanceBasis>   |
      | accountants                       | <accountants>                       |
      | hasTravelProtection               | <hasTravelProtection>               |
      | hasCouttsOnline                   | <hasCouttsOnline>                   |
      | hasCouttsId                       | <hasCouttsId>                       |
      | associations                      | <associations>                      |
      | idQuestionId                      | <idQuestionId>                      |
      | correspondanceAddressId           | <correspondanceAddressId>           |
    And I verify the Status Code for Update Natural Persons "200"
    And I verify the "objectId" exists in Update Natural Person response
    And I verify the "orderId" exists in Update Natural Person response

    Examples:
      | subType       | domiCountry | firstName    | middleName    | lastName    | birthDate  | gender | nationalities | title | birthPlace | birthCountry | electronicAddresses                                                                  | isEmployee | taxResidences                      | documentationIdentity                                                                     | pepAssociationCountry | pepClassificationReason | pepCategory | isMarketingOptOut | fatcaStatus              | crsType            | ukTaxResidenceFromDate | hasTaxAvoidanceSchemes | isHoldingBearerShares | hasInvestableAssets10M | hasHistoricTaxIssues | hasTaxChgDomiStatus | hasTaxChgUkDomiStatus | hasTaxPrevClaimRemitanceBasis | hasTaxIntendClaimRemitanceBasis | accountants                                                                                                                                                                                                                                | hasTravelProtection | hasCouttsOnline | hasCouttsId | associations                                                                                 | idQuestionId         | correspondanceAddressId | Comments                                                                       |
      | pers_form_doc | GB          | Firstname    | Middlename    | Lastname    | DEFAULT    | male   | GB            | mr    | London     | GB           | email;private;first.last@gmail.com;false                                             | false      | GB;RANDOM_10;nin                   | aa;GB1234567890;GB;London;DEFAULT;DEFAULT                                                 | GB                    | Testreason              | none        | false             | rbsc$fatca_non_us_person | rbsc$crs_np_doc    | DEFAULT                | false                  | false                 | false                  | false                | false               | false                 | false                         | false                           | TestName;LEGAL_PERSON_OBJECT_ID;rbsc$tax_adviser_primary;ADDRESS_OBJECT_ID;accountant.person@acccomp.com;false;false                                                                                                                       | false               | false           | false       | NATURAL_PERSON_OBJECT_ID_1;rbsc$is_sibling_of                                                | DOCUMENT_OBJECT_ID   | ADDRESS_OBJECT_ID       | 089 - documentationIdentity with identityType=Residence permit                 |

// Update Natural Person
    public Response updateNaturalPerson(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapUpdPersonDetails, ScenarioContext scenarioContext) throws Exception {

        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON") + "/{PersonKey}";
        String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId");

        POJOUpdNaturalPersonRequest pojoUpdNaturalPersonRequest = payloads.buildUpdNaturalPersonPayload(mapUpdPersonDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoUpdNaturalPersonRequest);
        objCucumberLogger.PrintStatus("Request for UPDATE Natural Person is: " + strRequestBody);

        ExtentCucumberAdapter.addTestStepLog("Sending request to update Natural Person");

        Map<String, String> mapPathParams = new HashMap<>();
        mapPathParams.put("PersonKey", strNaturalPersonObjectId);

        Response objResponse = sendPatchRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, mapPathParams, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for UPDATE Natural Person is: " + strResponseBody);

        // Avoid parsing if response is not JSON
        if (objResponse.getContentType() != null && objResponse.getContentType().contains("application/json")) {
            String strUpdNaturalPersonObjectId = jsonHelper.extractStringField(objResponse, "objectId");
            String strUpdNaturalPersonOrderId = jsonHelper.extractStringField(objResponse, "orderId");
            String strUpdNaturalPersonUuid = pojoUpdNaturalPersonRequest.getStrUuid();
            String strUpdNaturalPersonBirthDate = pojoUpdNaturalPersonRequest.getStrBirthDate();

            List<POJOTaxResidence> taxResidences = pojoUpdNaturalPersonRequest.getLstTaxResidences();
            if (taxResidences != null && !taxResidences.isEmpty()) {
                String strUpdNaturalPersonTaxNumber = taxResidences.get(0).getStrTaxNumber();
                scenarioContext.setContext("updNaturalPersonTaxNumber", strUpdNaturalPersonTaxNumber);
            }

            scenarioContext.setContext("updNaturalPersonObjectId", strUpdNaturalPersonObjectId);
            scenarioContext.setContext("updNaturalPersonOrderId", strUpdNaturalPersonOrderId);
            scenarioContext.setContext("updNaturalPersonUuid", strUpdNaturalPersonUuid);
            scenarioContext.setContext("updNaturalPersonBirthDate", strUpdNaturalPersonBirthDate);
        }

        return objResponse;
    }

public POJOUpdNaturalPersonRequest buildUpdNaturalPersonPayload(Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) {
        POJOUpdNaturalPersonRequest updNaturalPerson = new POJOUpdNaturalPersonRequest();

        updNaturalPerson.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
//        updNaturalPerson.setStrId(payloadHelper.normalize(mapPersonDetails.get("id")));
        updNaturalPerson.setStrSubType(payloadHelper.normalize(mapPersonDetails.get("subType")));
        updNaturalPerson.setStrDomiCountry(payloadHelper.normalize(mapPersonDetails.get("domiCountry")));
        updNaturalPerson.setStrFirstName(payloadHelper.normalize(mapPersonDetails.get("firstName")));
        updNaturalPerson.setStrMiddleName(payloadHelper.normalize(mapPersonDetails.get("middleName")));
        updNaturalPerson.setStrLastName(payloadHelper.normalize(mapPersonDetails.get("lastName")));
        updNaturalPerson.setStrBirthDate(payloadHelper.resolveDate("UpdateNaturalPerson", "birthDate", mapPersonDetails.get("birthDate")));
        updNaturalPerson.setStrGender(payloadHelper.normalize(mapPersonDetails.get("gender")));
        updNaturalPerson.setLstNationalities(payloadHelper.parseNationalities(mapPersonDetails.get("nationalities")));
        updNaturalPerson.setStrTitle(payloadHelper.normalize(mapPersonDetails.get("title")));
        updNaturalPerson.setStrBirthPlace(payloadHelper.normalize(mapPersonDetails.get("birthPlace")));
        updNaturalPerson.setStrBirthCountry(payloadHelper.normalize(mapPersonDetails.get("birthCountry")));
        updNaturalPerson.setLstElectronicAddresses(buildElectronicAddresses(mapPersonDetails.get("electronicAddresses")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("isEmployee"), "isEmployee", updNaturalPerson);
        updNaturalPerson.setLstTaxResidences(buildTaxResidences(mapPersonDetails.get("taxResidences")));
        updNaturalPerson.setLstDocumentationIdentity(buildDocumentationIdentity(
                mapPersonDetails.get("documentationIdentity"), "UpdateNaturalPerson"
        ));
        updNaturalPerson.setStrPepAssociationCountry(payloadHelper.normalize(mapPersonDetails.get("pepAssociationCountry")));
        updNaturalPerson.setStrPepClassificationReason(payloadHelper.normalize(mapPersonDetails.get("pepClassificationReason")));
        updNaturalPerson.setStrPepCategory(payloadHelper.normalize(mapPersonDetails.get("pepCategory")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("isMarketingOptOut"), "isMarketingOptOut", updNaturalPerson);
        updNaturalPerson.setStrFatcaStatus(payloadHelper.normalize(mapPersonDetails.get("fatcaStatus")));
        updNaturalPerson.setStrCrsType(payloadHelper.normalize(mapPersonDetails.get("crsType")));
        updNaturalPerson.setStrUkTaxResidenceFromDate(payloadHelper.resolveDate("UpdateNaturalPerson", "ukTaxResidenceFromDate", mapPersonDetails.get("ukTaxResidenceFromDate")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxAvoidanceSchemes"), "hasTaxAvoidanceSchemes", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("isHoldingBearerShares"), "isHoldingBearerShares", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasInvestableAssets10M"), "hasInvestableAssets10M", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasHistoricTaxIssues"), "hasHistoricTaxIssues", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxChgDomiStatus"), "hasTaxChgDomiStatus", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxChgUkDomiStatus"), "hasTaxChgUkDomiStatus", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxPrevClaimRemitanceBasis"), "hasTaxPrevClaimRemitanceBasis", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxIntendClaimRemitanceBasis"), "hasTaxIntendClaimRemitanceBasis", updNaturalPerson);
        updNaturalPerson.setLstAccountants(buildAccountants(mapPersonDetails.get("accountants"), scenarioContext));
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTravelProtection"), "hasTravelProtection", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasCouttsOnline"), "hasCouttsOnline", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasCouttsId"), "hasCouttsId", updNaturalPerson);
        updNaturalPerson.setLstAssociations(buildAssociations(mapPersonDetails.get("associations"), scenarioContext));

        String resolvedStrQuestionId = payloadHelper.resolveId(mapPersonDetails.get("idQuestionId"), scenarioContext);
        updNaturalPerson.setStrIdQuestionId(resolvedStrQuestionId);

        String resolvedCorrespondanceAddressId = payloadHelper.resolveId(mapPersonDetails.get("correspondanceAddressId"), scenarioContext);
        updNaturalPerson.setStrCorrespondanceAddressId(resolvedCorrespondanceAddressId);

        return updNaturalPerson;
    }

public String resolveId(String input, ScenarioContext scenarioContext) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }

        String token = input.trim();

        // 🔹 SC: format for response verification
        if (token.toUpperCase().startsWith("SC:")) {
            String contextKey = token.substring(3).trim(); // remove "SC:"
            return scenarioContext.getContext(contextKey);
        }

        // 🔹 Normal OBJECT_ID placeholders for request payloads
        switch (token.toUpperCase()) {
            case "EMPTY": return "";
            case "NA": return null;

            case "NATURAL_PERSON_OBJECT_ID":
                return scenarioContext.getContext("naturalPersonObjectId");
            case "NATURAL_PERSON_OBJECT_ID_1":
                return scenarioContext.getContext("naturalPersonObjectIdAss1");
            case "NATURAL_PERSON_OBJECT_ID_2":
                return scenarioContext.getContext("naturalPersonObjectIdAss2");

            case "LEGAL_PERSON_OBJECT_ID":
                return scenarioContext.getContext("legalPersonObjectId");
            case "LEGAL_PERSON_OBJECT_ID_1":
                return scenarioContext.getContext("legalPersonObjectIdAss1");

            case "CONTAINER_OBJECT_ID":
                return scenarioContext.getContext("containerObjectId");
            case "ADDRESS_OBJECT_ID":
                return scenarioContext.getContext("addressObjectId");
            case "MONEY_ACCOUNT_OBJECT_ID":
                return scenarioContext.getContext("moneyAccountObjectId");
            case "DOCUMENT_OBJECT_ID":
                return scenarioContext.getContext("documentObjectId");

            default:
                return token;
        }
    }
