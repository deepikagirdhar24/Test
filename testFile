@And("I verify the following questions and answers in Document response")
public void iVerifyAllQuestionAnswerPairs(DataTable dataTable) throws Exception {
    List<Map<String, String>> expectedQAList = dataTable.asMaps(String.class, String.class);

    List<Map<String, Object>> actualQAList = JsonHelper.extractListOfMapFromArray(response, "questions");

    Assert.assertEquals(actualQAList.size(), expectedQAList.size(), "Mismatch in number of question/answer pairs");

    for (int i = 0; i < expectedQAList.size(); i++) {
        Map<String, String> expected = expectedQAList.get(i);
        Map<String, Object> actual = actualQAList.get(i);

        String expectedQuestion = expected.get("question");
        String expectedAnswer = expected.get("answer");
        String actualQuestion = actual.get("question").toString();
        String actualAnswer = actual.get("answer").toString();

        ExtentCucumberAdapter.addTestStepLog("Validating Q/A Pair " + (i + 1));
        ExtentCucumberAdapter.addTestStepLog("Expected → Q: " + expectedQuestion + ", A: " + expectedAnswer);
        ExtentCucumberAdapter.addTestStepLog("Actual   → Q: " + actualQuestion + ", A: " + actualAnswer);

        Assert.assertEquals(actualQuestion, expectedQuestion, "Mismatch in question at index " + (i + 1));
        Assert.assertEquals(actualAnswer, expectedAnswer, "Mismatch in answer at index " + (i + 1));
    }
}

public static List<Map<String, Object>> extractListOfMapFromArray(Response response, String arrayFieldPath) throws Exception {
    JsonNode rootNode = objectMapper.readTree(response.asString());
    JsonNode arrayNode = getNodeByPath(rootNode, arrayFieldPath);

    if (!arrayNode.isArray()) {
        throw new Exception("Expected an array at path: " + arrayFieldPath);
    }

    List<Map<String, Object>> result = new ArrayList<>();
    for (JsonNode node : arrayNode) {
        Map<String, Object> map = objectMapper.convertValue(node, new TypeReference<Map<String, Object>>() {});
        result.add(map);
    }

    return result;
}
