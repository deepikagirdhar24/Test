This is the feature file - 

Scenario Outline: Verify the Patch Update Natural Persons API with valid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to generate New Person1 with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate New Person with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate Legal Person with below details
      | subType         | pers_form_ass     |
      | domicileCountry | GB                |
      | name            | Company Name Ltd  |
    Then Send request to create Address with below details
      | firstName       | Firstname             |
      | middleName      | Middlename            |
      | lastName        | Lastname              |
      | salutation      | mr                    |
      | salutationLetter| mr                    |
      | attnOf          |                       |
      | crof            |                       |
      | residency       | 123                   |
      | streetNr        | 123                   |
      | street          | teststreet + RANDOM_6 |
      | streetAdd       | Addition street       |
      | poBox           | P.O.Box 123           |
      | city            | Zurich                |
      | state           | RANDOM_49             |
      | zip             | 8001                  |
      | country         | CH                    |
    Then Send request to generate New Document with below details
      | personId      | NATURAL_PERSON_OBJECT_ID                                                                       |
      | challengeWord | Challenge Answer                                                                               |
      | qaPairs       | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5  |
    Then Send request to update Natural Person with below details
#      | id                                | 0                                   |
      | subType                           | <subType>                           |
      | domiCountry                       | <domiCountry>                       |
      | firstName                         | <firstName>                         |
      | middleName                        | <middleName>                        |
      | lastName                          | <lastName>                          |
      | birthDate                         | <birthDate>                         |
      | gender                            | <gender>                            |
      | nationalities                     | <nationalities>                     |
      | title                             | <title>                             |
      | birthPlace                        | <birthPlace>                        |
      | birthCountry                      | <birthCountry>                      |
      | electronicAddresses               | <electronicAddresses>              |
      | isEmployee                        | <isEmployee>                        |
      | taxResidences                     | <taxResidences>                     |
      | documentationIdentity             | <documentationIdentity>            |
      | pepAssociationCountry             | <pepAssociationCountry>            |
      | pepClassificationReason           | <pepClassificationReason>          |
      | pepCategory                       | <pepCategory>                       |
      | isMarketingOptOut                 | <isMarketingOptOut>                |
      | fatcaStatus                       | <fatcaStatus>                       |
      | crsType                           | <crsType>                           |
      | ukTaxResidenceFromDate            | <ukTaxResidenceFromDate>           |
      | hasTaxAvoidanceSchemes            | <hasTaxAvoidanceSchemes>           |
      | isHoldingBearerShares             | <isHoldingBearerShares>            |
      | hasInvestableAssets10M            | <hasInvestableAssets10M>           |
      | hasHistoricTaxIssues              | <hasHistoricTaxIssues>             |
      | hasTaxChgDomiStatus               | <hasTaxChgDomiStatus>              |
      | hasTaxChgUkDomiStatus             | <hasTaxChgUkDomiStatus>            |
      | hasTaxPrevClaimRemitanceBasis     | <hasTaxPrevClaimRemitanceBasis>    |
      | hasTaxIntendClaimRemitanceBasis   | <hasTaxIntendClaimRemitanceBasis>  |
      | accountants                       | <accountants>                      |
      | hasTravelProtection               | <hasTravelProtection>              |
      | hasCouttsOnline                   | <hasCouttsOnline>                  |
      | hasCouttsId                       | <hasCouttsId>                      |
      | associations                      | <associations>                     |
      | idQuestionId                      | <idQuestionId>                     |
      | correspondanceAddressId           | <correspondanceAddressId>          |
    And I verify the Status Code for Update Natural Persons "200"
    And I verify the "objectId" exists in Update Natural Person response
    And I verify the "orderId" exists in Update Natural Person response

    Examples:
      | subType       | domiCountry | firstName | middleName | lastName | birthDate  | gender | nationalities | title | birthPlace | birthCountry | electronicAddresses                        | isEmployee | taxResidences       | documentationIdentity                        | pepAssociationCountry | pepClassificationReason | pepCategory | isMarketingOptOut | fatcaStatus              | crsType            | ukTaxResidenceFromDate | hasTaxAvoidanceSchemes | isHoldingBearerShares | hasInvestableAssets10M | hasHistoricTaxIssues | hasTaxChgDomiStatus | hasTaxChgUkDomiStatus | hasTaxPrevClaimRemitanceBasis | hasTaxIntendClaimRemitanceBasis | accountants                                                                                                          | hasTravelProtection | hasCouttsOnline | hasCouttsId | associations                                  | idQuestionId         | correspondanceAddressId | Comments    |
      | pers_form_doc | GB          | Firstname | Middlename | Lastname | DEFAULT    | male   | GB            | mr    | London     | GB           | email;private;first.last@gmail.com;false   | false      | GB;RANDOM_10;nin    | pass;GB1234567890;GB;London;DEFAULT;DEFAULT  | GB                    | Testreason              | none        | false             | rbsc$fatca_non_us_person | rbsc$crs_np_doc    | DEFAULT                | false                  | false                 | false                  | false                | false               | false                 | false                         | false                           | TestName;LEGAL_PERSON_OBJECT_ID;rbsc$tax_adviser_primary;ADDRESS_OBJECT_ID;accountant.person@acccomp.com;false;false | false               | false           | false       | NATURAL_PERSON_OBJECT_ID_1;rbsc$is_sibling_of | DOCUMENT_OBJECT_ID   | ADDRESS_OBJECT_ID         | Valid entry |


Here what I am doing is there is one field in association which is NATURAL_PERSON_OBJECT_ID_! which fetches value from 1st SD which is 
    Then Send request to generate New Person1 with below details but it is fetching value of natural person object id from this SD     Then Send request to generate New Person with below details - why can you tell me, below is the code and all

    @Then("Send request to generate New Person1 with below details")
    public void sendRequestToGenerateNewPerson1WithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objNaturalPerson.createNewPerson1(strEnvType, "Bearer", jwtToken, mapPersonDetails, scenarioContext);
    }

    @Then("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objNaturalPerson.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails, scenarioContext);
    }

    // Create Natural Person1
    public Response createNewPerson1(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws Exception {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        POJONewPersonRequest pojoNewPersonRequest = payloads.buildNewPersonPayload(mapPersonDetails);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoNewPersonRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to create Natural Person1");

        Response objResponse = sendPostRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Natural Person1 is: " + strResponseBody);

        String strNaturalPersonObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strNaturalPersonOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("naturalPersonObjectId1", strNaturalPersonObjectId);
        scenarioContext.setContext("naturalPersonOrderId1", strNaturalPersonOrderId);

        return objResponse;
    }

    // Create Natural Person
    public Response createNewPerson(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws Exception {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        POJONewPersonRequest pojoNewPersonRequest = payloads.buildNewPersonPayload(mapPersonDetails);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoNewPersonRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to create Natural Person");

        Response objResponse = sendPostRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Natural Person is: " + strResponseBody);

        String strNaturalPersonObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strNaturalPersonOrderId = jsonHelper.extractStringField(objResponse, "orderId");
        String strNaturalPersonUuid = pojoNewPersonRequest.getStrUuid();

        scenarioContext.setContext("naturalPersonObjectId", strNaturalPersonObjectId);
        scenarioContext.setContext("naturalPersonOrderId", strNaturalPersonOrderId);
        scenarioContext.setContext("naturalPersonUuid", strNaturalPersonUuid);

        scenarioContext.setContext("naturalPersonObjectId1", strNaturalPersonObjectId);

        return objResponse;
    }

    @Then("Send request to update Natural Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapUpdPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objUpdNaturalPerson.updateNaturalPerson(strEnvType, "Bearer", jwtToken, mapUpdPersonDetails, scenarioContext);
    }

 // Update Natural Person
    public Response updateNaturalPerson(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapUpdPersonDetails, ScenarioContext scenarioContext) throws Exception {

        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON") + "/{PersonKey}";
        String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId");

        POJOUpdNaturalPersonRequest pojoUpdNaturalPersonRequest = payloads.buildUpdNaturalPersonPayload(mapUpdPersonDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoUpdNaturalPersonRequest);
        objCucumberLogger.PrintStatus("Request for UPDATE Natural Person is: " + strRequestBody);

        ExtentCucumberAdapter.addTestStepLog("Sending request to update Natural Person");

        Map<String, String> mapPathParams = new HashMap<>();
        mapPathParams.put("PersonKey", strNaturalPersonObjectId);

        Response objResponse = sendPatchRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, mapPathParams, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for UPDATE Natural Person is: " + strResponseBody);

        String strUpdNaturalPersonObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strUpdNaturalPersonOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("updNaturalPersonObjectId", strUpdNaturalPersonObjectId);
        scenarioContext.setContext("updNaturalPersonOrderId", strUpdNaturalPersonOrderId);

        return objResponse;
    }

public POJOUpdNaturalPersonRequest buildUpdNaturalPersonPayload(Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) {
        POJOUpdNaturalPersonRequest updNaturalPerson = new POJOUpdNaturalPersonRequest();

        String strDocumentObjectId = scenarioContext.getContext("documentObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");

        updNaturalPerson.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
//        updNaturalPerson.setStrId(payloadHelper.normalize(mapPersonDetails.get("id")));
        updNaturalPerson.setStrSubType(payloadHelper.normalize(mapPersonDetails.get("subType")));
        updNaturalPerson.setStrDomiCountry(payloadHelper.normalize(mapPersonDetails.get("domiCountry")));
        updNaturalPerson.setStrFirstName(payloadHelper.normalize(mapPersonDetails.get("firstName")));
        updNaturalPerson.setStrMiddleName(payloadHelper.normalize(mapPersonDetails.get("middleName")));
        updNaturalPerson.setStrLastName(payloadHelper.normalize(mapPersonDetails.get("lastName")));
        updNaturalPerson.setStrBirthDate(payloadHelper.resolveDate("UpdateNaturalPerson", "birthDate", mapPersonDetails.get("birthDate")));
        updNaturalPerson.setStrGender(payloadHelper.normalize(mapPersonDetails.get("gender")));
        updNaturalPerson.setLstNationalities(payloadHelper.parseNationalities(mapPersonDetails.get("nationalities")));
        updNaturalPerson.setStrTitle(payloadHelper.normalize(mapPersonDetails.get("title")));
        updNaturalPerson.setStrBirthPlace(payloadHelper.normalize(mapPersonDetails.get("birthPlace")));
        updNaturalPerson.setStrBirthCountry(payloadHelper.normalize(mapPersonDetails.get("birthCountry")));
        updNaturalPerson.setLstElectronicAddresses(buildElectronicAddresses(mapPersonDetails.get("electronicAddresses")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("isEmployee"), "isEmployee", updNaturalPerson);
        updNaturalPerson.setLstTaxResidences(buildTaxResidences(mapPersonDetails.get("taxResidences")));
        updNaturalPerson.setLstDocumentationIdentity(buildDocumentationIdentity(
                mapPersonDetails.get("documentationIdentity"), "UpdateNaturalPerson"
        ));
        updNaturalPerson.setStrPepAssociationCountry(payloadHelper.normalize(mapPersonDetails.get("pepAssociationCountry")));
        updNaturalPerson.setStrPepClassificationReason(payloadHelper.normalize(mapPersonDetails.get("pepClassificationReason")));
        updNaturalPerson.setStrPepCategory(payloadHelper.normalize(mapPersonDetails.get("pepCategory")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("isMarketingOptOut"), "isMarketingOptOut", updNaturalPerson);
        updNaturalPerson.setStrFatcaStatus(payloadHelper.normalize(mapPersonDetails.get("fatcaStatus")));
        updNaturalPerson.setStrCrsType(payloadHelper.normalize(mapPersonDetails.get("crsType")));
        updNaturalPerson.setStrUkTaxResidenceFromDate(payloadHelper.resolveDate("UpdateNaturalPerson", "ukTaxResidenceFromDate", mapPersonDetails.get("ukTaxResidenceFromDate")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxAvoidanceSchemes"), "hasTaxAvoidanceSchemes", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("isHoldingBearerShares"), "isHoldingBearerShares", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasInvestableAssets10M"), "hasInvestableAssets10M", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasHistoricTaxIssues"), "hasHistoricTaxIssues", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxChgDomiStatus"), "hasTaxChgDomiStatus", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxChgUkDomiStatus"), "hasTaxChgUkDomiStatus", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxPrevClaimRemitanceBasis"), "hasTaxPrevClaimRemitanceBasis", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxIntendClaimRemitanceBasis"), "hasTaxIntendClaimRemitanceBasis", updNaturalPerson);
        updNaturalPerson.setLstAccountants(buildAccountants(mapPersonDetails.get("accountants"), scenarioContext));
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTravelProtection"), "hasTravelProtection", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasCouttsOnline"), "hasCouttsOnline", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasCouttsId"), "hasCouttsId", updNaturalPerson);
        updNaturalPerson.setLstAssociations(buildAssociations(mapPersonDetails.get("associations"), scenarioContext));

//        updNaturalPerson.setStrIdQuestionId(payloadHelper.normalize(mapPersonDetails.get("idQuestionId")));
        String resolvedStrQuestionId = payloadHelper.resolveId(mapPersonDetails.get("idQuestionId"), strDocumentObjectId);
        updNaturalPerson.setStrIdQuestionId(resolvedStrQuestionId);

//        updNaturalPerson.setStrCorrespondanceAddressId(payloadHelper.normalize(mapPersonDetails.get("correspondanceAddressId")));
        String resolvedCorrespondanceAddressId = payloadHelper.resolveId(mapPersonDetails.get("correspondanceAddressId"), strAddressObjectId);
        updNaturalPerson.setStrCorrespondanceAddressId(resolvedCorrespondanceAddressId);

        return updNaturalPerson;
    }

    public List<POJOAssociation> buildAssociations(String input, ScenarioContext scenarioContext) {
        if (input == null || input.trim().isEmpty()) return null;

        List<POJOAssociation> listAssociations = new ArrayList<>();
        String[] entries = input.split("\\|");
        for (String entry : entries) {
            String[] parts = entry.split(";");
            POJOAssociation assoc = new POJOAssociation();

            String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId1");

            assoc.setStrPersonId(payloadHelper.resolveId(parts[0], strNaturalPersonObjectId));
            assoc.setStrRole(payloadHelper.normalize(parts[1]));
            listAssociations.add(assoc);
        }
        return listAssociations;
    }

public String resolveId(String input, String resolvedValue) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }

        switch (input.trim().toUpperCase()) {
            case "EMPTY":
                return "";
            case "NA":
                return null;
            case "NATURAL_PERSON_OBJECT_ID":
            case "CONTAINER_OBJECT_ID":
            case "ADDRESS_OBJECT_ID":
//            case "ADDRESS_OBJECT_ID_CARD":
            case "MONEY_ACCOUNT_OBJECT_ID":
            case "DOCUMENT_OBJECT_ID":
            case "LEGAL_PERSON_OBJECT_ID":
            case "NATURAL_PERSON_OBJECT_ID_1":
                return resolvedValue;
            default:
                return input;
        }
    }

[INFO] 
[INFO] --- maven-surefire-plugin:3.0.0-M5:test (default-test) @ wealth-icos-api ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running testRunner.Runner
Scenario Outline: Verify the Patch Update Natural Persons API with valid data - Valid entry # src/test/resources/Features/UpdateNaturalPerson.feature:90
Before All
Aug 01, 2025 11:54:24 AM hooks.CucumberHooks beforeScenario
INFO: Before Scenario: Test is starting!
  Given Send Request to get Authentication Token for ICOS                                   # stepDefinations.GetUserSteps.sendRequestToGetAuthenticationTokenForICOS()
  When I generate the JWT Token                                                             # stepDefinations.GetUserSteps.iGenerateTheJWTToken()
Aug 01, 2025 11:54:32 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Natural Person1 is: {"objectId":"665077905","orderId":"2933857510"}
  Then Send request to generate New Person1 with below details                              # stepDefinations.NaturalPersonSteps.sendRequestToGenerateNewPerson1WithDetails(io.cucumber.datatable.DataTable)
    | firstName       | Firstname     |
    | lastName        | Lastname      |
    | subType         | pers_form_ass |
    | domicileCountry | CH            |
    | gender          | male          |
    | nationalities   | CH            |
Aug 01, 2025 11:54:38 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Natural Person is: {"objectId":"665077906","orderId":"2933857529"}
  Then Send request to generate New Person with below details                               # stepDefinations.NaturalPersonSteps.sendRequestToGenerateNewPersonWithDetails(io.cucumber.datatable.DataTable)
    | firstName       | Firstname     |
    | lastName        | Lastname      |
    | subType         | pers_form_ass |
    | domicileCountry | CH            |
    | gender          | male          |
    | nationalities   | CH            |
Aug 01, 2025 11:54:41 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Legal Person is: {"objectId":"665077907","orderId":"2933857553"}
  Then Send request to generate Legal Person with below details                             # stepDefinations.LegalPersonSteps.sendRequestToGenerateLegalPersonWithDetails(io.cucumber.datatable.DataTable)
    | subType         | pers_form_ass    |
    | domicileCountry | GB               |
    | name            | Company Name Ltd |
Aug 01, 2025 11:54:46 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Address is: {"objectId":"665832865","orderId":"2933857567"}
  Then Send request to create Address with below details                                    # stepDefinations.AddressSteps.sendRequestToCreateAddressWithDetails(io.cucumber.datatable.DataTable)
    | firstName        | Firstname             |
    | middleName       | Middlename            |
    | lastName         | Lastname              |
    | salutation       | mr                    |
    | salutationLetter | mr                    |
    | attnOf           | [empty]               |
    | crof             | [empty]               |
    | residency        | 123                   |
    | streetNr         | 123                   |
    | street           | teststreet + RANDOM_6 |
    | streetAdd        | Addition street       |
    | poBox            | P.O.Box 123           |
    | city             | Zurich                |
    | state            | RANDOM_49             |
    | zip              | 8001                  |
    | country          | CH                    |
Aug 01, 2025 11:54:49 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Document is: {"objectId":"665077906","orderId":"2933857583"}
  Then Send request to generate New Document with below details                             # stepDefinations.DocumentSteps.sendRequestToGenerateNewDocumentWithDetails(io.cucumber.datatable.DataTable)
    | personId      | NATURAL_PERSON_OBJECT_ID                                                                      |
    | challengeWord | Challenge Answer                                                                              |
    | qaPairs       | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5 |
Aug 01, 2025 11:54:49 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Request for UPDATE Natural Person is: {"uuid":"ab797b5","subType":"pers_form_doc","domiCountry":"GB","firstName":"Firstname","middleName":"Middlename","lastName":"Lastname","birthDate":"1985-08-01","gender":"male","nationalities":["GB"],"title":"mr","birthPlace":"London","birthCountry":"GB","electronicAddresses":[{"medium":"email","kind":"private","value":"first.last@gmail.com","isPreferred":false}],"isEmployee":false,"taxResidences":[{"country":"GB","taxNumber":"vnzkqjwhgp","identityType":"nin"}],"documentationIdentity":[{"identityType":"pass","number":"GB1234567890","issueCountry":"GB","issuePlace":"London","issueDate":"2025-07-31","validUntil":"2025-08-02"}],"pepAssociationCountry":"GB","pepClassificationReason":"Testreason","pepCategory":"none","isMarketingOptOut":false,"fatcaStatus":"rbsc$fatca_non_us_person","crsType":"rbsc$crs_np_doc","ukTaxResidenceFromDate":"2015-08-01","hasTaxAvoidanceSchemes":false,"isHoldingBearerShares":false,"hasInvestableAssets10M":false,"hasHistoricTaxIssues":false,"hasTaxChgDomiStatus":false,"hasTaxChgUkDomiStatus":false,"hasTaxPrevClaimRemitanceBasis":false,"hasTaxIntendClaimRemitanceBasis":false,"accountants":[{"name":"TestName","companyId":"665077907","role":"rbsc$tax_adviser_primary","addressId":"665832865","email":"accountant.person@acccomp.com","hasConsent":false,"doSendCopy":false}],"hasTravelProtection":false,"hasCouttsOnline":false,"hasCouttsId":false,"associations":[{"personId":"665077906","role":"rbsc$is_sibling_of"}],"idQuestionId":"665077906","correspondanceAddressId":"665832865"}
Aug 01, 2025 11:54:52 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for UPDATE Natural Person is: {"orderId":"2933857603","error":"The relation 'Family - has Sibling' to target person Lastname Firstname M. is not unique!"}
