public static ContactNoteRequest buildContactNotePayload(Map<String, String> mapNoteDetails, ScenarioContext scenarioContext) {
    ContactNoteRequest noteRequest = new ContactNoteRequest();

    String strObjectId = scenarioContext.getContext("objectId");

    if (mapNoteDetails.containsKey("personIds") && mapNoteDetails.get("personIds") != null && !mapNoteDetails.get("personIds").isEmpty()) {
        noteRequest.setLstPersonIds(Collections.singletonList(mapNoteDetails.get("personIds")));
    } else {
        noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));
    }

    noteRequest.setStrSubject(mapNoteDetails.get("subject") != null
            ? TestDataGenerator.generateRandomSubject(mapNoteDetails.get("subject")) : "");

    noteRequest.setStrNotes(mapNoteDetails.getOrDefault("notes", ""));
    noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

    return noteRequest;
}

public static ContactNoteRequest buildContactNotePayload(Map<String, String> mapNoteDetails, List<String> lstPersonIds) {
    ContactNoteRequest noteRequest = new ContactNoteRequest();

    noteRequest.setLstPersonIds(lstPersonIds);

    noteRequest.setStrSubject(mapNoteDetails.get("subject") != null
            ? TestDataGenerator.generateRandomSubject(mapNoteDetails.get("subject")) : "");

    noteRequest.setStrNotes(mapNoteDetails.getOrDefault("notes", ""));
    noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

    return noteRequest;
}

ContactNoteRequest noteRequest = Payloads.buildContactNotePayload(mapNoteDetails, scenarioContext);

ContactNoteRequest noteRequest = Payloads.buildContactNotePayload(mapNoteDetails, lstPersonIds);
