I have these 2 features files, t hese can be combined into one,
but the problem is that for scenario 1, we are deriving the personId from strNaturaPersonObjectId and for scenario2, we want to provide personid as invalid - one as invalid string and another as empty string.
can we combine this one ? and how ?

Scenario Outline: Verify the Post Document API with invalid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to generate New Person with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate New Document with below details
      | challengeWord | <challengeWord> |
      | qaPairs       | <qaPairs>       |
    And I verify the Status Code for Document "400"
    And I verify the Document API 400 error response with below details
      | description   | <description> |
      | error message | <error>       |

    Examples:
      | challengeWord     | qaPairs                                                                                                           | description       | error                                    | Comments            |
      | Challenge Answer  | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5; Question6=Answer6  | Validation Errors | Number of question and answers must be 5 | 6 ID_Questions      |
      | Challenge Answer  | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4                                        | Validation Errors | Number of question and answers must be 5 | 4 ID_Questions      |

  Scenario Outline: Verify the Post Document API with invalid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to generate New Person with below details
      | firstName       | Firstname     |
      | lastName        | Lastname      |
      | subType         | pers_form_ass |
      | domicileCountry | CH            |
      | gender          | male          |
      | nationalities   | CH            |
    Then Send request to generate New Document with below details
      | personId      | <personId>      |
      | challengeWord | <challengeWord> |
      | qaPairs       | <qaPairs>       |
    And I verify the Status Code for Document "400"
    And I verify the Document API 400 error response with below details
      | description   | <description> |
      | error message | <error>       |

    Examples:
      | personId | challengeWord     | qaPairs                                                                                        | description       | error                                                      | Comments                                     |
      | zz?      | Challenge Answer  | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5  | Validation Errors | Person not found                                           | PersonId wrong                               |
      |          | Challenge Answer  | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4; Question5=Answer5  | Validation Errors | Person not found                                           | PersonId empty                               |
      | zz?      | Challenge Answer  | Question1=Answer1; Question2=Answer2; Question3=Answer3; Question4=Answer4                     | Validation Errors | Person not found, Number of question and answers must be 5 | 2 Errors - PersonId wrong and 4 ID_Questions |


public static POJONewDocumentRequest buildNewDocumentPayload(Map<String, String> mapDocDetails, ScenarioContext scenarioContext) {
        POJONewDocumentRequest documentRequest = new POJONewDocumentRequest();

        String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId");

        if (mapDocDetails.containsKey("personId")) {
            documentRequest.setStrPersonId(mapDocDetails.get("personId") != null ? mapDocDetails.get("personId") : "");
        } else {
            documentRequest.setStrPersonId(strNaturalPersonObjectId);
        }

        documentRequest.setStrChallengeWord(
                mapDocDetails.get("challengeWord") != null ? mapDocDetails.get("challengeWord") : ""
        );

        List<POJONewDocumentRequest.QuestionAnswer> qaList = new ArrayList<>();

        String qaPairs = mapDocDetails.get("qaPairs");
        if (qaPairs != null && !qaPairs.trim().isEmpty()) {
            String[] pairs = qaPairs.split(";");
            for (String pair : pairs) {
                String[] qa = pair.split("=", 2);
                if (qa.length == 2) {
                    POJONewDocumentRequest.QuestionAnswer qaObj = new POJONewDocumentRequest.QuestionAnswer();
                    qaObj.setStrQuestion(TestDataGenerator.resolveDynamicText(qa[0].trim()));
                    qaObj.setStrAnswer(TestDataGenerator.resolveDynamicText(qa[1].trim()));
                    qaList.add(qaObj);
                }
            }
        }

        documentRequest.setLstQuestions(qaList);
        return documentRequest;
    }

public static String resolveDynamicText(String type) {
        if (type == null || type.isEmpty()) return "";

        if (type.equalsIgnoreCase("EMPTY")) return "";

        if (type.equalsIgnoreCase("RANDOM_LT_250")) {
            return randomString(new Random().nextInt(249) + 1);
        }

        if (type.equalsIgnoreCase("RANDOM_GT_250")) {
            return randomString(new Random().nextInt(500) + 251);
        }

        // Pattern-based: RANDOM_49, RANDOM_50, etc.
        if (type.toUpperCase().startsWith("RANDOM_")) {
            try {
                int length = Integer.parseInt(type.substring(7));
                return randomString(length);
            } catch (NumberFormatException e) {
                return type;
            }
        }

        // Default case: literal string
        return type;
    }

    private static String randomString(int length) {
        int leftLimit = 97; // 'a'
        int rightLimit = 122; // 'z'
        Random random = new Random();

        return random.ints(leftLimit, rightLimit + 1)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();
    }
