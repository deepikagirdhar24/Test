@And("I verify the Legal Person AWS-style 400 error response with below details")
public void iVerifyLegalPersonAWS400ErrorResponse(DataTable dataTable) throws Exception {
    Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

    // Top-level fields
    String expectedType = expectedData.get("type");
    String expectedTitle = expectedData.get("title");
    String expectedDetail = expectedData.get("detail");

    String actualType = JsonHelper.extractStringField(response, "type");
    String actualTitle = JsonHelper.extractStringField(response, "title");
    String actualDetail = JsonHelper.extractStringField(response, "detail");

    ExtentCucumberAdapter.addTestStepLog("Actual type: " + actualType);
    ExtentCucumberAdapter.addTestStepLog("Actual title: " + actualTitle);
    ExtentCucumberAdapter.addTestStepLog("Actual detail: " + actualDetail);

    Assert.assertEquals(actualType, expectedType, "Mismatch in 'type'");
    Assert.assertEquals(actualTitle, expectedTitle, "Mismatch in 'title'");
    Assert.assertEquals(actualDetail, expectedDetail, "Mismatch in 'detail'");

    // Validate errorDetails list fields
    List<String> actualErrorTitles = JsonHelper.extractListOfStringFieldsFromArray(response, "errorDetails", "title");
    List<String> actualErrorFields = JsonHelper.extractListOfStringFieldsFromArray(response, "errorDetails", "field");
    List<String> actualErrorDetails = JsonHelper.extractListOfStringFieldsFromArray(response, "errorDetails", "detail");

    ExtentCucumberAdapter.addTestStepLog("Actual errorDetails.title: " + actualErrorTitles);
    ExtentCucumberAdapter.addTestStepLog("Actual errorDetails.field: " + actualErrorFields);
    ExtentCucumberAdapter.addTestStepLog("Actual errorDetails.detail: " + actualErrorDetails);

    // Validate first entry only (as per your previous behavior)
    if (!actualErrorTitles.isEmpty()) {
        Assert.assertEquals(actualErrorTitles.get(0), expectedData.get("errorDetails.title"), "Mismatch in errorDetails.title");
        Assert.assertEquals(actualErrorFields.get(0), expectedData.get("errorDetails.field"), "Mismatch in errorDetails.field");
        Assert.assertEquals(actualErrorDetails.get(0), expectedData.get("errorDetails.detail"), "Mismatch in errorDetails.detail");
    } else {
        throw new AssertionError("errorDetails array is empty in the response");
    }
}

  And I verify the Legal Person AWS-style 400 error response with below details
    | type                | /aws/validation_error       |
    | title               | Validation Error            |
    | detail              | A validation error has occurred |
    | errorDetails.title  | Validation                  |
    | errorDetails.field  | Body description            |
    | errorDetails.detail | Field must not be null      |

    @And("I verify the {string} exists in Work Request response")
    public void iVerifyTheKeyExistsInWorkRequestResponse(String key) throws Exception {
        String strActualKeyValue = JsonHelper.extractStringField(response, key);
        ExtentCucumberAdapter.addTestStepLog("Actual value of " + key + " is: " + strActualKeyValue);

        Assert.assertNotNull(strActualKeyValue, key + " should not be null");
        Assert.assertFalse(strActualKeyValue.isEmpty(), key + " should not be empty");
    }
