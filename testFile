@Then("Send request to update New Person with below details and orderId {string}")
public void sendRequestToUpdatePersonWithOrderId(String validSubType, DataTable dataTable) throws JsonProcessingException {
    Map<String, String> updatedPersonDetails = dataTable.asMap(String.class, String.class);

    // Set the correct (non-empty) personSubType to update
    updatedPersonDetails.put("subType", validSubType);

    // Retrieve token from context
    String jwtToken = scenarioContext.getContext("JWTToken");

    // Call the update method (no need to pass orderId/objectId now)
    response = objNaturalPerson.updateNaturalPerson(
        strEnvType,
        "Bearer",
        jwtToken,
        updatedPersonDetails,
        scenarioContext
    );
}

public Response updateNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken,
                                    Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

    String orderId = scenarioContext.getContext("orderId");

    strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
    strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.UPDATENATURALPERSON");

    NewPersonRequest personRequest = new NewPersonRequest();
    personRequest.setStrSubType(mapPersonDetails.get("subType"));
    personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
    personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
    personRequest.setStrLastName(mapPersonDetails.get("lastName"));
    personRequest.setStrGender(mapPersonDetails.get("gender"));

    // Handle nationalities
    String strNationalities = mapPersonDetails.get("nationalities");
    List<String> lstNationality = new ArrayList<>();
    if (strNationalities != null && !strNationalities.trim().isEmpty()) {
        lstNationality = Arrays.stream(strNationalities.split(","))
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());
    }
    personRequest.setLstNationalities(lstNationality);

    strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

    ExtentCucumberAdapter.addTestStepLog("Sending request to Update Natural Person");
    ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
    ExtentCucumberAdapter.addTestStepLog("Query Param: order=" + orderId);
    ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

    response = with().spec(rspec)
            .header("Authorization", strBearerToken + " " + strJWTToken)
            .header("X-TYK-API-KEY", TYK_KEY)
            .header("Content-Type", "application/json")
            .queryParam("order", orderId)  // âœ… cleaner query param usage
            .body(strJsonBody)
            .put(strTYKURL);

    strResponseBody = objdevHelperLibrary.getResponseBody(response);

    ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
    ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

    return response;
}
