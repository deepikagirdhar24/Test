This is NaturalPerson.java - 

package ICOS;

import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.Payloads;
import utilities.ScenarioContext;

import java.util.HashMap;
import java.util.Map;

public class NaturalPerson extends BaseApiClient {

    private ObjectMapper objObjectMapper;
    private CucumberLogger objCucumberLogger;
    private EncryptionUtil objEncryptionUtil;

    public NaturalPerson() throws Exception {
        objObjectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
        objEncryptionUtil = new EncryptionUtil();
    }

    // Create Natural Person
    public Response createNewPerson(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        NewPersonRequest pojoNewPersonRequest = Payloads.buildNewPersonPayload(mapPersonDetails);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoNewPersonRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to create Natural Person");

        Response resCreatePerson = sendPostRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(resCreatePerson);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        String strNaturalPersonObjectId = resCreatePerson.jsonPath().getString("objectId");
        String strNaturalPersonOrderId = resCreatePerson.jsonPath().getString("orderId");
        String strNaturalPersonUuid = pojoNewPersonRequest.getStrUuid();

        scenarioContext.setContext("naturalPersonObjectId", strNaturalPersonObjectId);
        scenarioContext.setContext("naturalPersonOrderId", strNaturalPersonOrderId);
        scenarioContext.setContext("naturalPersonUuid", strNaturalPersonUuid);

        return resCreatePerson;
    }

    // Get Natural Person
    public Response getNaturalPerson(String strEnvType, String strBearerToken, String strJwtToken, ScenarioContext scenarioContext) {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON") + "/{id}";
        String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId");
        String strNaturalPersonUuid = scenarioContext.getContext("naturalPersonUuid");

        Map<String, String> mapPathParams = new HashMap<>();
        mapPathParams.put("id", strNaturalPersonObjectId);

        Map<String, String> mapQueryParams = new HashMap<>();
        mapQueryParams.put("uuid", strNaturalPersonUuid);
        mapQueryParams.put("minimal", "yes");

        ExtentCucumberAdapter.addTestStepLog("Sending GET request for Natural Person");

        Response resGetPerson = sendGetRequest(strUrl, strBearerToken, strJwtToken, mapPathParams, mapQueryParams);
        String strResponseBody = devHelperLibrary.getResponseBody(resGetPerson);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return resGetPerson;
    }

Can you update GetUser also below similar o the NaturalPerson class using the functions in BaseAPICLinet - 

package ICOS;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;

import java.util.*;

import static io.restassured.RestAssured.with;

public class getUser {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String responseBody;
    //String TYK_KEY = System.getenv("X-TYK-API-KEY");
    String TYK_KEY = TestConfig.getTykApiKey();//--> Newly Added
    String strAuthentication;//--> Newly Added
    String strTYKURL;//--> Newly Added

    public getUser() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }



    //Step4 get the user id

    public Response getGetUser(String strEnvType,String strBearerToken,String strJWTToken, String strUserId) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken); //--> Newly Added
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.USERID")+strUserId;//--> Newly Added

        // Logging request details //--> Newly Added
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("UserID",strUserId)
                .get(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);
        //objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);

        // Logging response details //--> Newly Added
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        return response;
    }

Base API CLient - 

package ICOS;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import java.util.Map;

import static io.restassured.RestAssured.given;

public class BaseApiClient {
    protected static devHelperLibrary objDevHelperLibrary;

    static {
        try {
            objDevHelperLibrary = new devHelperLibrary();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static TestConfig testDataConfig;

    static {
        try {
            testDataConfig = TestConfig.getTestDataConfig();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static String TYK_KEY = TestConfig.getTykApiKey();

    public static RequestSpecification buildRequestSpec(String strBearerToken, String strJWTToken) {
        return given()
                .header("Authorization", buildAuthHeader(strBearerToken, strJWTToken))
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");
    }

    public static Response sendPostRequest(String url, String bearerToken, String jwtToken, String body, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (queryParams != null && !queryParams.isEmpty()) {
            request.queryParams(queryParams);
        }

        logRequestDetails("POST", url, body, queryParams);
        return request.body(body).post(url);
    }

    public static Response sendGetRequest(String url, String bearerToken, String jwtToken, Map<String, ?> pathParams, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (pathParams != null) {
            request.pathParams(pathParams);
        }
        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("GET", url, null, queryParams);
        return request.get(url);
    }

    public static Response sendPatchRequest(String url, String bearerToken, String jwtToken, String body, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("PATCH", url, body, queryParams);
        return request.body(body).patch(url);
    }

    private static void logRequestDetails(String method, String url, String body, Map<String, ?> queryParams) {
        ExtentCucumberAdapter.addTestStepLog("Sending " + method + " request to: " + url);
        if (queryParams != null && !queryParams.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Query Params: " + queryParams.toString());
        }
        if (body != null && !body.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + body);
        }
    }

    public static String getTYKURL(String strEnvType, String strEndpointKey) {
        return testDataConfig.readApplicationProperty("TYK.ENV." + strEnvType)
                + testDataConfig.readApplicationProperty(strEndpointKey);
    }

    public static String buildAuthHeader(String bearerToken, String jwtToken) {
        return bearerToken + " " + jwtToken;
    }
}

