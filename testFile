package ICOS;

import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.Payloads;
import utilities.ScenarioContext;

import java.util.HashMap;
import java.util.Map;

public class NaturalPerson extends BaseApiClient {

    private ObjectMapper objObjectMapper;
    private CucumberLogger objCucumberLogger;
    private EncryptionUtil objEncryptionUtil;

    public NaturalPerson() throws Exception {
        objObjectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
        objEncryptionUtil = new EncryptionUtil();
    }

    // Create Natural Person
    public Response createNewPerson(String strEnvType, String strBearerToken, String strJwtToken, Map<String, String> mapPersonDetails, ScenarioContext objScenarioContext) throws JsonProcessingException {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        NewPersonRequest pojoNewPersonRequest = Payloads.buildNewPersonPayload(mapPersonDetails);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoNewPersonRequest);

        ExtentCucumberAdapter.addTestStepLog("Creating Natural Person");

        Response resCreatePerson = sendPostRequest(strUrl, strBearerToken, strJwtToken, strRequestBody);
        String strResponseBody = devHelperLibrary.getResponseBody(resCreatePerson);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        String strObjectId = resCreatePerson.jsonPath().getString("objectId");
        String strOrderId = resCreatePerson.jsonPath().getString("orderId");
        String strUuid = pojoNewPersonRequest.getStrUuid();

        objScenarioContext.setContext("objectId", strObjectId);
        objScenarioContext.setContext("orderId", strOrderId);
        objScenarioContext.setContext("uuid", strUuid);

        return resCreatePerson;
    }

    // Get Natural Person
    public Response getNaturalPerson(String strEnvType, String strBearerToken, String strJwtToken, ScenarioContext objScenarioContext) {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON") + "/{id}";
        String strObjectId = objScenarioContext.getContext("objectId");
        String strUuid = objScenarioContext.getContext("uuid");

        Map<String, String> mapPathParams = new HashMap<>();
        mapPathParams.put("id", strObjectId);

        Map<String, String> mapQueryParams = new HashMap<>();
        mapQueryParams.put("uuid", strUuid);
        mapQueryParams.put("minimal", "yes");

        ExtentCucumberAdapter.addTestStepLog("Sending GET request for Natural Person");

        Response resGetPerson = sendGetRequest(strUrl, strBearerToken, strJwtToken, mapPathParams, mapQueryParams);
        String strResponseBody = devHelperLibrary.getResponseBody(resGetPerson);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return resGetPerson;
    }

    // Update Natural Person
    public Response updateNaturalPerson(String strEnvType, String strBearerToken, String strJwtToken,
                                        Map<String, String> mapPersonDetails, ScenarioContext objScenarioContext) throws JsonProcessingException {
        String strUrl = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        String strOrderId = objScenarioContext.getContext("orderId");

        NewPersonRequest pojoNewPersonRequest = Payloads.buildNewPersonPayload(mapPersonDetails);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoNewPersonRequest);

        Map<String, String> mapQueryParams = new HashMap<>();
        mapQueryParams.put("order", strOrderId);

        ExtentCucumberAdapter.addTestStepLog("Sending PATCH request to update Natural Person");

        Response resUpdatePerson = sendPatchRequest(strUrl, strBearerToken, strJwtToken, strRequestBody, mapQueryParams);
        String strResponseBody = devHelperLibrary.getResponseBody(resUpdatePerson);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return resUpdatePerson;
    }
}
