 java.lang.RuntimeException: Unable to set boolean field: setBlnIsMailingPaper on POJOMoneyAccountRequest
	at utilities.PayloadHelper.applyBooleanField(PayloadHelper.java:254)
	at utilities.Payloads.buildMoneyAccountPayload(Payloads.java:166)
	at ICOS.MoneyAccount.createMoneyAccount(MoneyAccount.java:37)
	at stepDefinations.MoneyAccountSteps.sendRequestToCreateMoneyAccountWithDetails(MoneyAccountSteps.java:76)
	at âœ½.Send Request to create Money Account with below details(file:///C:/Users/girdd/IdeaProjects/icosapitests/src/test/resources/Features/MoneyAccount.feature:26)
Caused by: java.lang.NoSuchMethodException: ICOS.pojo.POJOMoneyAccountRequest.setBlnIsMailingPaper(boolean)
	at java.base/java.lang.Class.getMethod(Class.java:2227)
	at utilities.PayloadHelper.applyBooleanField(PayloadHelper.java:251)
	at utilities.Payloads.buildMoneyAccountPayload(Payloads.java:166)
	at ICOS.MoneyAccount.createMoneyAccount(MoneyAccount.java:37)
	at stepDefinations.MoneyAccountSteps.sendRequestToCreateMoneyAccountWithDetails(MoneyAccountSteps.java:76)
	at jdk.internal.reflect.GeneratedMethodAccessor245.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at io.cucumber.java.Invoker.doInvoke(Invoker.java:66)
	at io.cucumber.java.Invoker.invoke(Invoker.java:24)
	at io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)
	at io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)
	at io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)
	at io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:62)
	at io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)
	at io.cucumber.core.runner.TestStep.executeStep(TestStep.java:81)
	at io.cucumber.core.runner.TestStep.run(TestStep.java:53)
	at io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)
	at io.cucumber.core.runner.TestCase.run(TestCase.java:84)
	at io.cucumber.core.runner.Runner.runPickle(Runner.java:75)
	at io.cucumber.junit.PickleRunners$NoStepDescriptions.lambda$run$0(PickleRunners.java:151)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:148)
	at io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:144)
	at io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:28)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at io.cucumber.junit.FeatureRunner.run(FeatureRunner.java:137)
	at io.cucumber.junit.Cucumber.runChild(Cucumber.java:199)
	at io.cucumber.junit.Cucumber.runChild(Cucumber.java:89)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runFeatures$6(CucumberExecutionContext.java:147)
	at io.cucumber.core.runtime.CucumberExecutionContext.execute(CucumberExecutionContext.java:162)
	at io.cucumber.core.runtime.CucumberExecutionContext.runFeatures(CucumberExecutionContext.java:145)
	at io.cucumber.junit.Cucumber$StartAndFinishTestRun.evaluate(Cucumber.java:229)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)


package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;
import java.util.List;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJOMoneyAccountRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("ownerId")
    private String strOwnerId;

    @JsonProperty("type")
    private String strType;

    @JsonProperty("currency")
    private String strCurrency;

    @JsonProperty("rubric")
    private String strRubric;

    @JsonProperty("addressIds")
    private List<String> lstAddressIds;

    @JsonProperty("mailingOffsetDay")
    private BigDecimal bdMailingOffsetDay;

    @JsonProperty("mailingOffsetMonth")
    private BigDecimal bdMailingOffsetMonth;

    @JsonProperty("minimalNoticeDays")
    private BigDecimal bdMinimalNoticeDays;

    @JsonProperty("isMailingPaper")
    private Boolean blnIsMailingPaper;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrOwnerId() {
        return strOwnerId;
    }

    public void setStrOwnerId(String strOwnerId) {
        this.strOwnerId = strOwnerId;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public String getStrCurrency() {
        return strCurrency;
    }

    public void setStrCurrency(String strCurrency) {
        this.strCurrency = strCurrency;
    }

    public String getStrRubric() {
        return strRubric;
    }

    public void setStrRubric(String strRubric) {
        this.strRubric = strRubric;
    }

    public List<String> getLstAddressIds() {
        return lstAddressIds;
    }

    public void setLstAddressIds(List<String> lstAddressIds) {
        this.lstAddressIds = lstAddressIds;
    }

    public BigDecimal getBdMailingOffsetDay() {
        return bdMailingOffsetDay;
    }

    public void setBdMailingOffsetDay(BigDecimal bdMailingOffsetDay) {
        this.bdMailingOffsetDay = bdMailingOffsetDay;
    }

    public BigDecimal getBdMailingOffsetMonth() {
        return bdMailingOffsetMonth;
    }

    public void setBdMailingOffsetMonth(BigDecimal bdMailingOffsetMonth) {
        this.bdMailingOffsetMonth = bdMailingOffsetMonth;
    }

    public BigDecimal getBdMinimalNoticeDays() {
        return bdMinimalNoticeDays;
    }

    public void setBdMinimalNoticeDays(BigDecimal bdMinimalNoticeDays) {
        this.bdMinimalNoticeDays = bdMinimalNoticeDays;
    }

    public Boolean getBlnIsMailingPaper() {
        return blnIsMailingPaper;
    }

    public void setBlnIsMailingPaper(Boolean blnIsMailingPaper) {
        this.blnIsMailingPaper = blnIsMailingPaper;
    }
}

public POJOMoneyAccountRequest buildMoneyAccountPayload(Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) {
        POJOMoneyAccountRequest moneyAccount = new POJOMoneyAccountRequest();

        String strContainerObjectId = scenarioContext.getContext("containerObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");
        @SuppressWarnings("unchecked")
        List<String> addressObjectIds = (List<String>) scenarioContext.getContext("addressObjectIds");

        moneyAccount.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        String ownerId = payloadHelper.resolveId(mapMoneyAccountDetails.get("ownerId"), strContainerObjectId);
        moneyAccount.setStrOwnerId((ownerId));

        moneyAccount.setStrType(payloadHelper.normalize(mapMoneyAccountDetails.get("type")));
        moneyAccount.setStrCurrency(payloadHelper.normalize(mapMoneyAccountDetails.get("currency")));
        moneyAccount.setStrRubric(payloadHelper.normalize(mapMoneyAccountDetails.get("rubric")));

        List<String> resolvedAddressIds = payloadHelper.resolveIdList(mapMoneyAccountDetails.get("addressIds"), strAddressObjectId, addressObjectIds);
        moneyAccount.setLstAddressIds(resolvedAddressIds);

        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetDay"), "mailingOffsetDay", moneyAccount);
        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetMonth"), "mailingOffsetMonth", moneyAccount);
        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("minimalNoticeDays"), "minimalNoticeDays", moneyAccount);
        payloadHelper.applyBooleanField(mapMoneyAccountDetails.get("isMailingPaper"), "isMailingPaper", moneyAccount);

        return moneyAccount;
    }

    public void applyBooleanField(String rawValue, String fieldName, Object targetObject) {
        String normalized = normalize(rawValue);
        if (normalized != null && !normalized.isEmpty()) {
            boolean parsed = Boolean.parseBoolean(normalized);
            String setterName = "setBln" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
            try {
                Method setter = targetObject.getClass().getMethod(setterName, boolean.class);
                setter.invoke(targetObject, parsed);
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                throw new RuntimeException("Unable to set boolean field: " + setterName + " on " + targetObject.getClass().getSimpleName(), e);
            }
        }
    }
test
