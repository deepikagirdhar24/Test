Ok I have updated Paylods class now - 

package utilities;

import ICOS.pojo.*;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

import static utilities.TestDataHelper.*;

public class Payloads {

    public static POJONewPersonRequest buildNewPersonPayload(Map<String, String> mapPersonDetails) {
        POJONewPersonRequest personRequest = new POJONewPersonRequest();

        String uuid = UUID.randomUUID().toString().substring(0, 7);
        personRequest.setStrUuid(uuid);

        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));

//        // Handle multiple nationalities (comma-separated)
//        String strNationalities = mapPersonDetails.get("nationalities");
//        List<String> lstNationality = new ArrayList<>();
//        if (strNationalities != null && !strNationalities.trim().isEmpty()) {
//            lstNationality = Arrays.stream(strNationalities.split(","))
//                    .map(String::trim)
//                    .filter(s -> !s.isEmpty())
//                    .collect(Collectors.toList());
//        }
//        personRequest.setLstNationalities(lstNationality);
        personRequest.setLstNationalities(parseNationalities(mapPersonDetails.get("nationalities")));

        return personRequest;
    }

    public static POJOLegalPersonRequest buildLegalPersonPayload(Map<String, String> mapPersonDetails, boolean includeUuid) {

        POJOLegalPersonRequest legalPersonRequest = new POJOLegalPersonRequest();

        if (includeUuid) {
            String uuid = UUID.randomUUID().toString().substring(0, 7);
            legalPersonRequest.setStrUuid(uuid);
        }

        legalPersonRequest.setStrSubType(normalize(mapPersonDetails.get("subType")));
        legalPersonRequest.setStrDomiCountry(normalize(mapPersonDetails.get("domicileCountry")));
        legalPersonRequest.setStrName(normalize(mapPersonDetails.get("name")));

        return legalPersonRequest;
    }

    public static POJOContactNoteRequest buildContactNotePayload(Map<String, String> mapNoteDetails, ScenarioContext scenarioContext) {

        POJOContactNoteRequest noteRequest = new POJOContactNoteRequest();
        String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId");

        //Set PersonIds: Use provided personIds if available, else use strObjectId
        if (mapNoteDetails.containsKey("personIds") && mapNoteDetails.get("personIds") != null && !mapNoteDetails.get("personIds").isEmpty()) {
            noteRequest.setLstPersonIds(Collections.singletonList(mapNoteDetails.get("personIds")));
        } else {
            noteRequest.setLstPersonIds(Collections.singletonList(strNaturalPersonObjectId));
        }

//        // Set subject: generate based on the subject type
//        noteRequest.setStrSubject(
//                mapNoteDetails.get("subject") != null ?
//                        TestDataGenerator.resolveDynamicText(mapNoteDetails.get("subject")) : "" // use the subject type from feature file
//        );
        noteRequest.setStrSubject(resolveDynamicText(mapNoteDetails.get("subject")));

        noteRequest.setStrNotes(
                mapNoteDetails.get("notes") != null ? mapNoteDetails.get("notes") : ""
        );

        noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

        return noteRequest;
    }

    public static POJOContactNoteRequest buildContactNotePayload(Map<String, String> mapNoteDetails, List<String> lstPersonIds) {

        POJOContactNoteRequest noteRequest = new POJOContactNoteRequest();

        // Set multiple PersonIds directly
        noteRequest.setLstPersonIds(lstPersonIds);

        // Set subject, notes, follow-up
        noteRequest.setStrSubject(
                mapNoteDetails.get("subject") != null ?
                        TestDataGenerator.resolveDynamicText(mapNoteDetails.get("subject")) : ""
        );
        noteRequest.setStrNotes(mapNoteDetails.get("notes") != null ? mapNoteDetails.get("notes") : "");
        noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

        return noteRequest;
    }

    public static POJOWorkRequest buildWorkRequestPayload(Map<String, String> mapWorkRequestDetails) {
        POJOWorkRequest workRequest = new POJOWorkRequest();

        workRequest.setStrBpId(normalize(mapWorkRequestDetails.get("bpId")));
        workRequest.setStrType(normalize(mapWorkRequestDetails.get("type")));
        workRequest.setStrSubject(normalize(mapWorkRequestDetails.get("subject")));
        workRequest.setStrDescription(normalize(mapWorkRequestDetails.get("description")));

        String dueDateInput = mapWorkRequestDetails.get("dueDate");
        String resolvedDueDate = resolveDueDate(dueDateInput);
        workRequest.setStrDueDate(resolvedDueDate);

        return workRequest;
    }

//    //normalize Helper - Used for all fields except dueDate.
//    private static String normalize(String value) {
//        if (value == null) return "";
//        switch (value.trim().toUpperCase()) {
//            case "NA": return null;
//            case "EMPTY": return "";
//            default: return value;
//        }
//    }
//
//    // resolveDueDate Helper (handles NA, EMPTY, FUTURE etc.)
//    private static String resolveDueDate(String dueDateInput) {
//        if (dueDateInput == null || dueDateInput.trim().isEmpty()) {
//            return "";  // empty string
//        }
//
//        String trimmedInput = dueDateInput.trim().toUpperCase();
//
//        switch (trimmedInput) {
//            case "NA":
//                return null;  // will be excluded in final payload
//            case "EMPTY":
//                return "";     // included as empty string
//            case "FUTURE":
//                return LocalDate.now().plusDays(7).toString();
//            case "PAST":
//                return LocalDate.now().minusDays(7).toString();
//            case "TODAY":
//                return LocalDate.now().toString();
//            default:
//                return dueDateInput;  // use as-is (custom date)
//        }
//    }

    public static POJONewDocumentRequest buildNewDocumentPayload(Map<String, String> mapDocDetails, ScenarioContext scenarioContext) {
        POJONewDocumentRequest documentRequest = new POJONewDocumentRequest();

        String strNaturalPersonObjectId = scenarioContext.getContext("naturalPersonObjectId");

        String personId = mapDocDetails.get("personId");

        if (personId == null || personId.trim().isEmpty() || personId.equalsIgnoreCase("EMPTY")) {
            documentRequest.setStrPersonId(""); // Simulate empty input
        } else if (personId.equalsIgnoreCase("NATURAL_PERSON_OBJECT_ID")) {
            documentRequest.setStrPersonId(strNaturalPersonObjectId); // Use the one from context
        } else {
            documentRequest.setStrPersonId(personId); // Use the value provided directly
        }

        documentRequest.setStrChallengeWord(
                mapDocDetails.get("challengeWord") != null ? mapDocDetails.get("challengeWord") : ""
        );

//        List<POJONewDocumentRequest.QuestionAnswer> qaList = new ArrayList<>();
//
//        String qaPairs = mapDocDetails.get("qaPairs");
//        if (qaPairs != null && !qaPairs.trim().isEmpty()) {
//            String[] pairs = qaPairs.split(";");
//            for (String pair : pairs) {
//                String[] qa = pair.split("=", 2);
//                if (qa.length == 2) {
//                    POJONewDocumentRequest.QuestionAnswer qaObj = new POJONewDocumentRequest.QuestionAnswer();
//                    qaObj.setStrQuestion(TestDataGenerator.resolveDynamicText(qa[0].trim()));
//                    qaObj.setStrAnswer(TestDataGenerator.resolveDynamicText(qa[1].trim()));
//                    qaList.add(qaObj);
//                }
//            }
//        }
//
//        documentRequest.setLstQuestions(qaList);
        documentRequest.setLstQuestions(parseQuestionAnswers(mapDocDetails.get("qaPairs")));
        return documentRequest;
    }

}

package utilities;

import ICOS.pojo.POJONewDocumentRequest;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class TestDataHelper {

    private static final Random random = new Random();

    public static String normalize(String value) {
        if (value == null) return "";
        switch (value.trim().toUpperCase()) {
            case "NA": return null;
            case "EMPTY": return "";
            default: return value;
        }
    }

    public static String resolveDueDate(String dueDateInput) {
        if (dueDateInput == null || dueDateInput.trim().isEmpty()) return "";
        switch (dueDateInput.trim().toUpperCase()) {
            case "NA": return null;
            case "EMPTY": return "";
            case "FUTURE": return LocalDate.now().plusDays(7).toString();
            case "PAST": return LocalDate.now().minusDays(7).toString();
            case "TODAY": return LocalDate.now().toString();
            default: return dueDateInput;
        }
    }

    public static String resolveDynamicText(String type) {
        if (type == null || type.isEmpty()) return "";
        if (type.equalsIgnoreCase("EMPTY")) return "";

        if (type.equalsIgnoreCase("RANDOM_LT_250")) {
            return randomString(random.nextInt(249) + 1);
        }

        if (type.equalsIgnoreCase("RANDOM_GT_250")) {
            return randomString(random.nextInt(500) + 251);
        }

        if (type.toUpperCase().startsWith("RANDOM_")) {
            try {
                int length = Integer.parseInt(type.substring(7));
                return randomString(length);
            } catch (NumberFormatException e) {
                return type;
            }
        }

        return type;
    }

    public static List<String> parseNationalities(String commaSeparated) {
        if (commaSeparated == null || commaSeparated.trim().isEmpty()) return Collections.emptyList();
        return Arrays.stream(commaSeparated.split(","))
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());
    }

    public static List<POJONewDocumentRequest.QuestionAnswer> parseQuestionAnswers(String qaPairs) {
        List<POJONewDocumentRequest.QuestionAnswer> qaList = new ArrayList<>();
        if (qaPairs != null && !qaPairs.trim().isEmpty()) {
            String[] pairs = qaPairs.split(";");
            for (String pair : pairs) {
                String[] qa = pair.split("=", 2);
                if (qa.length == 2) {
                    POJONewDocumentRequest.QuestionAnswer qaObj = new POJONewDocumentRequest.QuestionAnswer();
                    qaObj.setStrQuestion(resolveDynamicText(qa[0].trim()));
                    qaObj.setStrAnswer(resolveDynamicText(qa[1].trim()));
                    qaList.add(qaObj);
                }
            }
        }
        return qaList;
    }

    private static String randomString(int length) {
        int leftLimit = 97; // 'a'
        int rightLimit = 122; // 'z'
        return random.ints(leftLimit, rightLimit + 1)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();
    }
}

what other optimimisations to do here -
