package stepDefinations;

import ICOS.ContactNotes;
import ICOS.LegalPerson;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import commonLibrary.DBUtil;
import commonLibrary.SQLQueries;
import config.JsonExtractor;
import config.JsonVerifier;
import config.TestConfig;
import hooks.CucumberHooks;
import io.cucumber.core.logging.Logger;
import io.cucumber.core.logging.LoggerFactory;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.CucumberLogger;
import utilities.JsonHelper;
import utilities.ScenarioContext;

import java.util.*;

public class ContactNotesSteps extends BaseStep{


    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();
    private static final Logger logger = LoggerFactory.getLogger(CucumberHooks.class);
    TestConfig testConfig;
    ContactNotes objContactNotes;
    private static Response response;
    public static String strToken;
    public String strMembershipDetails;
    public int sizeOfPagination;
    public static String strEnv;
    public static String strEnvType;
    public static String strEnvFDSType;
    public String strFDSHostURL;
    public String strFDSDevHelperURL;
    public Object strRes;
    public String strJWTToken;
    public String strEIAMTokenURL;
    CucumberLogger objCucumberLogger;
    JsonVerifier objJsonVerifier;
    JsonExtractor objJsonExtractor;
    DBUtil objDBUtil;
    public String strUserid;
    SQLQueries objSQLQueries;
    protected ScenarioContext scenarioContext;

    public ContactNotesSteps(ScenarioContext scenarioContext) throws Exception {
        super();
        this.scenarioContext = scenarioContext;
        testConfig = new TestConfig();
        objCucumberLogger= new CucumberLogger();
        objJsonVerifier= new JsonVerifier();
        objJsonExtractor= new JsonExtractor();
        objDBUtil= new DBUtil();
        objSQLQueries= new SQLQueries();
        objContactNotes = new ContactNotes();
        this.strEnvType = scenarioContext.getContext("strEnvType");
    }

    @Then("Send Request to get Contact Note Information")
    public void sendRequestToGetContactNoteInformation() throws JsonProcessingException {
        String jwtToken = scenarioContext.getContext("JWTToken");
        //response =objContactNotes.getGetContactNotes(strEnvType,objAccessToken.get("tokenType"),strJWTToken);
        response =objContactNotes.getContactNotes(strEnvType,"Bearer",jwtToken);
    }

    @And("I verify the Status Code for Contact Notes {string}")
    public void iVerifyTheStatusCodeForContactNotes(String strStatusCode) {
        int responseCode= response.statusCode();
        ExtentCucumberAdapter.addTestStepLog("Actual value of Status code is : " +responseCode);
        Assert.assertEquals(Integer.parseInt(strStatusCode),responseCode);
    }

    @And("I verify the array field {string} contains {string} in Contact Notes response")
    public void iVerifyArrayFieldContainsValue(String jsonArrayPath, String expectedValue) throws Exception {
        boolean valueExists = JsonHelper.valueExistsInJsonArray(response, jsonArrayPath, expectedValue);
        ExtentCucumberAdapter.addTestStepLog("Expected value in array '" + jsonArrayPath + "': " + expectedValue + " â†’ Found: " + valueExists);
        Assert.assertTrue(valueExists, "Value '" + expectedValue + "' not found in array: " + jsonArrayPath);
    }

    @And("I verify the string field {string} is {string} in Contact Notes response")
    public void iVerifyStringFieldEquals(String jsonPath, String expectedValue) throws Exception {
        String actualValue = JsonHelper.extractStringField(response, jsonPath);
        ExtentCucumberAdapter.addTestStepLog("Expected value at '" + jsonPath + "': " + expectedValue + ", Actual: " + actualValue);
        Assert.assertEquals(actualValue, expectedValue, "Mismatch at: " + jsonPath);
    }

    @And("I verify the boolean field {string} is {word} in Contact Notes response")
    public void iVerifyBooleanFieldEquals(String jsonPath, String expectedBool) throws Exception {
        boolean expectedValue = Boolean.parseBoolean(expectedBool);
        boolean actualValue = JsonHelper.extractBooleanField(response, jsonPath);
        ExtentCucumberAdapter.addTestStepLog("Expected boolean at '" + jsonPath + "': " + expectedValue + ", Actual: " + actualValue);
        Assert.assertEquals(actualValue, expectedValue, "Mismatch at: " + jsonPath);
    }

    @Then("Send POST ContactNote Request with below details")
    public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");

        if (mapNoteDetails.containsKey("personIds")) {
            // Single person note
            response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails, scenarioContext);
        } else {
            // Multiple persons note
            List<String> lstPersonIds = (List<String>) scenarioContext.getContext("GeneratedPersonIds");
            response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails, lstPersonIds);
        }
    }

    @And("I verify the {string} exists in Contact Notes response")
    public void iVerifyTheKeyExistsInContactNotesResponse(String key) throws Exception {
        String strActualKeyValue = JsonHelper.extractStringField(response, key);
        ExtentCucumberAdapter.addTestStepLog("Actual value of " + key + " is: " + strActualKeyValue);

        Assert.assertNotNull(strActualKeyValue, key + " should not be null");
        Assert.assertFalse(strActualKeyValue.isEmpty(), key + " should not be empty");
    }

    @And("I verify the Contact Notes API 400 error response with below details")
    public void iVerify400ErrorResponse(DataTable dataTable) throws Exception {
        ContactNotes.verify400ErrorResponse(dataTable, response);
    }

    @And("I verify the Contact Notes API 500 error response with message {string}")
    public void iVerify500ErrorResponse(String expectedError) throws Exception {
        String actualError = JsonHelper.extractStringField(response, "error");
        ExtentCucumberAdapter.addTestStepLog("Actual error: " + actualError);
        Assert.assertEquals(actualError, expectedError, "Mismatch in error message");
    }
}

package ICOS;

import ICOS.pojo.POJOContactNoteRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import io.cucumber.datatable.DataTable;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.CucumberLogger;
import utilities.JsonHelper;
import utilities.Payloads;
import utilities.ScenarioContext;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;

import java.util.List;
import java.util.Map;

public class ContactNotes extends BaseApiClient {

    private ObjectMapper objObjectMapper;
    private CucumberLogger objCucumberLogger;

    public ContactNotes() {
        objObjectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
    }

    // Create Contact Note for single PersonId
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapNoteDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        String strTYKURL = getTYKURL(strEnvType, "TYK.CONTACTNOTES");
        POJOContactNoteRequest objContactNoteRequest = Payloads.buildContactNotePayload(mapNoteDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(objContactNoteRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return objResponse;
    }

    // Create Contact Note for multiple PersonIds
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapNoteDetails, List<String> lstPersonIds) throws JsonProcessingException {

        String strTYKURL = getTYKURL(strEnvType, "TYK.CONTACTNOTES");
        POJOContactNoteRequest objContactNoteRequest = Payloads.buildContactNotePayload(mapNoteDetails, lstPersonIds);
        String strRequestBody = objObjectMapper.writeValueAsString(objContactNoteRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note for multiple PersonIds");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return objResponse;
    }

    // Get Contact Notes
    public Response getContactNotes(String strEnvType, String strBearerToken, String strJWTToken) {

        String strTYKURL = getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        ExtentCucumberAdapter.addTestStepLog("Sending GET request to fetch Contact Notes");

        Response objResponse = sendGetRequest(strTYKURL, strBearerToken, strJWTToken, null, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        return objResponse;
    }

    public static void verify400ErrorResponse(DataTable dataTable, Response response) throws Exception {
        Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

        String expectedDescription = expectedData.get("description");
        String expectedErrorMessages = expectedData.get("error message");

        String actualDescription = JsonHelper.extractStringField(response, "description");
        ExtentCucumberAdapter.addTestStepLog("Actual description: " + actualDescription);
        Assert.assertEquals(actualDescription, expectedDescription, "Mismatch in description");

        String[] expectedErrors = expectedErrorMessages.split("\\s*,\\s*");
        List<String> actualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "validationErrors", "error");

        ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + actualErrors);

        for (String expectedError : expectedErrors) {
            Assert.assertTrue(actualErrors.contains(expectedError),
                    "Expected error message not found: " + expectedError);
        }
    }
}
