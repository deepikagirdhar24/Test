@Autowired
ScenarioContext scenarioContext; // if using dependency injection, or initialize manually

@And("I verify the {string} exists")
public void iVerifyTheKeyExists(String key) throws Exception {
    String strActualKeyValue = JsonHelper.extractStringField(response, key);
    ExtentCucumberAdapter.addTestStepLog("Actual value of " + key + " is: " + strActualKeyValue);

    Assert.assertNotNull(strActualKeyValue, key + " should not be null");
    Assert.assertFalse(strActualKeyValue.isEmpty(), key + " should not be empty");

    scenarioContext.setContext(key, strActualKeyValue); // store objectId, orderId etc.
}

public Response getNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken, ScenarioContext scenarioContext) throws JsonProcessingException {
    strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
    
    String objectId = scenarioContext.getContext("objectId"); // Path param
    String uuid = "1278576";  // Query param
    String minimal = "yes";   // Query param

    // Base URL without path or query params
    strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.GETNATURALPERSON"); // example: https://api.com/person

    ExtentCucumberAdapter.addTestStepLog("Sending GET request for Natural Person");
    ExtentCucumberAdapter.addTestStepLog("Base URL: " + strTYKURL);
    ExtentCucumberAdapter.addTestStepLog("Path Param - objectId: " + objectId);
    ExtentCucumberAdapter.addTestStepLog("Query Params - uuid: " + uuid + ", minimal: " + minimal);

    response = with().spec(rspec)
            .header("Authorization", strBearerToken + " " + strJWTToken)
            .header("X-TYK-API-KEY", TYK_KEY)
            .header("Content-Type", "application/json")
            .pathParam("id", objectId)
            .queryParam("uuid", uuid)
            .queryParam("minimal", minimal)
            .get(strTYKURL + "/{id}");

    strResponseBody = objdevHelperLibrary.getResponseBody(response);
    return response;
}
