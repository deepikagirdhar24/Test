How to remove static from here - 

package ICOS;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import java.util.Map;

import static io.restassured.RestAssured.given;

public class BaseApiClient {
    protected static devHelperLibrary objDevHelperLibrary;

    static {
        try {
            objDevHelperLibrary = new devHelperLibrary();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static TestConfig testDataConfig;

    static {
        try {
            testDataConfig = TestConfig.getTestDataConfig();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static String TYK_KEY = TestConfig.getTykApiKey();

    public static RequestSpecification buildRequestSpec(String strBearerToken, String strJWTToken) {
        return given()
                .header("Authorization", buildAuthHeader(strBearerToken, strJWTToken))
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");
    }

    public static Response sendPostRequest(String url, String bearerToken, String jwtToken, String body, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (queryParams != null && !queryParams.isEmpty()) {
            request.queryParams(queryParams);
        }

        logRequestDetails("POST", url, body, queryParams);
        Response response = request.body(body).post(url);
        logResponseDetails(response);
        return response;
    }

    public static Response sendGetRequest(String url, String bearerToken, String jwtToken, Map<String, ?> pathParams, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (pathParams != null) {
            request.pathParams(pathParams);
        }
        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("GET", url, null, queryParams);
        Response response = request.get(url);
        logResponseDetails(response);
        return response;
    }

    public static Response sendPatchRequest(String url, String bearerToken, String jwtToken, String body, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("PATCH", url, body, queryParams);
        Response response = request.body(body).patch(url);
        logResponseDetails(response);
        return response;
    }

    private static void logRequestDetails(String method, String url, String body, Map<String, ?> queryParams) {
        ExtentCucumberAdapter.addTestStepLog("Sending " + method + " request to: " + url);
        if (queryParams != null && !queryParams.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Query Params: " + queryParams.toString());
        }
        if (body != null && !body.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + body);
        }
    }

    private static void logResponseDetails(Response response) {
        String strResponseBody = devHelperLibrary.getResponseBody(response);
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);
    }

    public static String getTYKURL(String strEnvType, String strEndpointKey) {
        return testDataConfig.readApplicationProperty("TYK.ENV." + strEnvType)
                + testDataConfig.readApplicationProperty(strEndpointKey);
    }

    public static String buildAuthHeader(String bearerToken, String jwtToken) {
        return bearerToken + " " + jwtToken;
    }
}


and alos how to reuse in the class functions - 

// Create Address
    public Response createAddress(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapAddressDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.ADDRESS");
        POJOAddressRequest pojoAddressRequest = payloads.buildAddressPayload(mapAddressDetails, true);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoAddressRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Address");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        String strAddressObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strAddressOrderId = jsonHelper.extractStringField(objResponse, "orderId");
        String strAddressUuid = pojoAddressRequest.getStrUuid();

        scenarioContext.setContext("AddressObjectId", strAddressObjectId);
        scenarioContext.setContext("AddressOrderId", strAddressOrderId);
        scenarioContext.setContext("AddressUuid", strAddressUuid);

        return objResponse;
    }

