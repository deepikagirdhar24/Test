package ICOS;

import ICOS.pojo.ContactNoteRequest;
import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;

import java.util.*;

import static io.restassured.RestAssured.with;

public class createContactNotes {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String responseBody;
    String TYK_KEY = System.getenv("X-TYK-API-KEY");
    String strObjectId;
    String strOrderId;

    public createContactNotes() throws Exception {
        objEncryptionUtil = new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
        objdevHelperLibrary = new devHelperLibrary();
        rspec = objdevHelperLibrary.setup();
    }

    public Response createNewPerson(String strEnvType, String strBearerToken, String strJWTToken, String strFirstName) throws JsonProcessingException {
        String authHeader = strBearerToken + " " + strJWTToken;
        String strTYKURL = testDataConfig.readApplicationProperty("TYK.ENV." + strEnvType)
                            + testDataConfig.readApplicationProperty("TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        personRequest.setStrSubType("pers_form_ass");
        personRequest.setStrDomiCountry("CH");
        personRequest.setStrFirstName(strFirstName);
        personRequest.setStrLastName("Lastname");
        personRequest.setStrGender("male");
        personRequest.setLstNationalities(Collections.singletonList("CH"));

        String jsonBody = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + authHeader + ", X-TYK-API-KEY=" + TYK_KEY);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + jsonBody);

        response = with().spec(rspec)
                .header("Authorization", authHeader)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json")
                .body(jsonBody)
                .post(strTYKURL);

        responseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        objCucumberLogger.PrintStatus("Extracted Object Id is : " + strObjectId);
        objCucumberLogger.PrintStatus("Extracted Order Id is : " + strOrderId);

        return response;
    }

    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken) throws JsonProcessingException {
        String authHeader = strBearerToken + " " + strJWTToken;
        String strTYKURL = testDataConfig.readApplicationProperty("TYK.ENV." + strEnvType)
                            + testDataConfig.readApplicationProperty("TYK.CONTACTNOTES");

        ContactNoteRequest noteRequest = new ContactNoteRequest();
        noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));
        noteRequest.setStrSubject("Testsubject");
        noteRequest.setStrNotes("Testnote");
        noteRequest.setBoolHasFollowup(false);

        String jsonBody = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + authHeader + ", X-TYK-API-KEY=" + TYK_KEY);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + jsonBody);

        response = with().spec(rspec)
                .header("Authorization", authHeader)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json")
                .body(jsonBody)
                .post(strTYKURL);

        responseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        return response;
    }

    public String getOrderId(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("orderId").asText();
    }
}
