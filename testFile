Feature: Create Contact Notes API with valid inputs

  Scenario Outline: Verify the Post Contact Notes API with two persons
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And Send request to generate New Persons with below details
      | firstName     | lastName | subType        | domicileCountry | gender | nationality |
      | <firstName1>  | Lastname | pers_form_ass  | CH              | male   | CH          |
      | <firstName2>  | Lastname | pers_form_ass  | CH              | male   | CH          |
    Then Send POST ContactNote Request with below details
      | subject     | <subject>     |
      | notes       | <notes>       |
      | hasFollowup | <hasFollowup> |
    And I verify the Status Code for Contact Notes "<statusCode>"
    And I verify the OrderId

    Examples:
      | firstName1  | firstName2  | subject     | notes     | hasFollowup | statusCode |
      | FirstName_1 | FirstName_2 | Testsubject | Testnote  | false       | 200        |


@And("Send request to generate New Person with below details")
public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
    List<Map<String, String>> personList = dataTable.asMaps(String.class, String.class);
    List<String> generatedPersonIds = new ArrayList<>();

    for (Map<String, String> personDetails : personList) {
        String jwtToken = scenarioContext.getToken("JWTToken");
        Response personResponse = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, personDetails);

        String personId = personResponse.jsonPath().getString("objectId");
        generatedPersonIds.add(personId);
    }

    // Save generated personIds in scenarioContext for later use in ContactNote request
    scenarioContext.setContext("GeneratedPersonIds", generatedPersonIds);
}

@Then("Send POST ContactNote Request with below details")
public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
    Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
    String jwtToken = scenarioContext.getToken("JWTToken");

    List<String> personIds;

    // CASE 1: Check if 'personIds' key exists in the DataTable (for negative test case)
    if (mapNoteDetails.containsKey("personIds") && mapNoteDetails.get("personIds") != null && !mapNoteDetails.get("personIds").isEmpty()) {
        // Support comma-separated multiple IDs if needed
        String[] ids = mapNoteDetails.get("personIds").split(",");
        personIds = Arrays.stream(ids).map(String::trim).collect(Collectors.toList());
    }
    // CASE 2: If 'GeneratedPersonIds' are stored from previous steps
    else if (scenarioContext.getContext("GeneratedPersonIds") != null) {
        personIds = (List<String>) scenarioContext.getContext("GeneratedPersonIds");
    }
    // CASE 3: Fallback to a single strObjectId (used in older tests)
    else if (strObjectId != null) {
        personIds = Collections.singletonList(strObjectId);
    }
    // CASE 4: Fail-safe to prevent NPEs
    else {
        throw new IllegalStateException("No valid personIds found for ContactNote request.");
    }

    response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails, personIds);
}



    // Use the personIds passed to this method
    noteRequest.setLstPersonIds(personIds);
