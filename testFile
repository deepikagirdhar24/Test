@And("I verify the error response with below details")
public void iVerifyTheErrorResponseWithDetails(DataTable dataTable) throws Exception {
    Map<String, String> mapResponsedata = dataTable.asMap(String.class, String.class);

    if (mapResponsedata.containsKey("description") && mapResponsedata.containsKey("error message")) {
        String strExpDescription = mapResponsedata.get("description");
        String strExpErrorMessages = mapResponsedata.get("error message");

        // Assert description
        String strActualDescription = JsonHelper.extractStringField(response, "description");
        ExtentCucumberAdapter.addTestStepLog("Actual description: " + strActualDescription);
        Assert.assertEquals(strActualDescription, strExpDescription, "Mismatch in description");

        // Handle multiple error messages
        String[] expectedErrors = strExpErrorMessages.split("\\s*,\\s*");
        List<String> actualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "validationErrors", "error");

        ExtentCucumberAdapter.addTestStepLog("Actual validation errors: " + actualErrors.toString());

        for (String expectedError : expectedErrors) {
            Assert.assertTrue(actualErrors.contains(expectedError), 
                "Expected error message not found: " + expectedError);
        }

    } else if (mapResponsedata.containsKey("error message")) {
        // For other errors like 500
        String strExpError = mapResponsedata.get("error message");
        String strActualError = JsonHelper.extractStringField(response, "error");
        ExtentCucumberAdapter.addTestStepLog("Actual error: " + strActualError);
        Assert.assertEquals(strActualError, strExpError, "Mismatch in error message");
    } else {
        throw new IllegalArgumentException("Unsupported error format in DataTable");
    }
}

public static List<String> extractListOfStringFieldsFromArray(Response response, String arrayField, String subField) {
    List<Map<String, Object>> errorList = response.jsonPath().getList(arrayField);
    List<String> result = new ArrayList<>();
    for (Map<String, Object> errorMap : errorList) {
        Object value = errorMap.get(subField);
        if (value != null) {
            result.add(value.toString());
        }
    }
    return result;
}
