public static POJOWorkRequest buildWorkRequestPayloadWithExcludedFields(Map<String, String> mapWorkRequestDetails) {
    POJOWorkRequest workRequest = new POJOWorkRequest();

    if (mapWorkRequestDetails.containsKey("bpId")) {
        workRequest.setStrBpId(mapWorkRequestDetails.get("bpId"));
    }

    if (mapWorkRequestDetails.containsKey("type")) {
        workRequest.setStrType(mapWorkRequestDetails.get("type"));
    }

    if (mapWorkRequestDetails.containsKey("subject")) {
        workRequest.setStrSubject(mapWorkRequestDetails.get("subject"));
    }

    if (mapWorkRequestDetails.containsKey("description")) {
        workRequest.setStrDescription(mapWorkRequestDetails.get("description"));
    }

    if (mapWorkRequestDetails.containsKey("dueDate")) {
        String dueDateInput = mapWorkRequestDetails.get("dueDate");
        if (dueDateInput != null && !dueDateInput.trim().isEmpty()) {
            switch (dueDateInput.trim().toUpperCase()) {
                case "FUTURE":
                    workRequest.setStrDueDate(LocalDate.now().plusDays(7).toString());
                    break;
                case "PAST":
                    workRequest.setStrDueDate(LocalDate.now().minusDays(7).toString());
                    break;
                case "TODAY":
                    workRequest.setStrDueDate(LocalDate.now().toString());
                    break;
                default:
                    workRequest.setStrDueDate(dueDateInput);
            }
        }
    }

    return workRequest;
}

public Response createWorkRequest(String strEnvType, String strBearerToken, String strJWTToken,
                                  Map<String, String> mapWorkRequestDetails, ScenarioContext scenarioContext,
                                  boolean excludeMissingFields) throws JsonProcessingException {

    String strTYKURL = getTYKURL(strEnvType, "TYK.WORKREQUESTS");
    POJOWorkRequest pojoWorkRequest = excludeMissingFields
            ? Payloads.buildWorkRequestPayloadWithExcludedFields(mapWorkRequestDetails)
            : Payloads.buildWorkRequestPayload(mapWorkRequestDetails);

    String strRequestBody = objObjectMapper.writeValueAsString(pojoWorkRequest);

    ExtentCucumberAdapter.addTestStepLog("Sending request to Create Work Request");

    Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
    String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
    objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

    if (objResponse.getContentType() != null && objResponse.getContentType().contains("application/json")) {
        String strWorkRequestOrderId = objResponse.jsonPath().getString("orderId");
        scenarioContext.setContext("workRequestOrderId", strWorkRequestOrderId);
    }

    return objResponse;
}

@Then("Send Request to create Work Request with below details excluding {string}")
public void sendRequestToCreateWorkRequestWithExclusion(String excludeField, DataTable dataTable) throws JsonProcessingException {
    Map<String, String> mapWorkRequestDetails = new HashMap<>(dataTable.asMap(String.class, String.class));

    // Remove the excluded field
    if (excludeField != null && !excludeField.trim().isEmpty()) {
        mapWorkRequestDetails.remove(excludeField.trim());
    }

    String jwtToken = scenarioContext.getContext("JWTToken");

    // Use new createWorkRequest with `excludeMissingFields = true`
    response = objWorkRequest.createWorkRequest(strEnvType, "Bearer", jwtToken, mapWorkRequestDetails, scenarioContext, true);
}
