I need to first create natural person with personSubType as empty and there will be orderId generated for this. 
Then update the natural person with a valid value of pers_form_ass in personSubType - Also, in request add query param as order which should be equal to the orderId generated.

How to implement the feature file and step definition and function for this ? - Then Send request to update New Person with below details

Feature: Create Natural Person Order API

  Scenario Outline: Verify the Post Natural Persons API with <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to generate New Person with below details
      | firstName       | <firstName>     |
      | lastName        | <lastName>      |
      | subType         | <subType>       |
      | domicileCountry | <domiCountry>   |
      | gender          | <gender>        |
      | nationalities   | <nationalities> |
    And I verify the Status Code for Natural Persons "<statusCode>"
    And I verify the "orderId" exists in Natural Person response
    Then Send request to update New Person with below details
      | firstName       | <firstName>     |
      | lastName        | <lastName>      |
      | subType         | <subType>       |
      | domicileCountry | <domiCountry>   |
      | gender          | <gender>        |
      | nationalities   | <nationalities> |

    Examples:
      | firstName | lastName | subType        | domiCountry | gender | nationalities | statusCode | Comments                |
      | Firstname | Lastname |                | CH          | male   | CH            | 500        | personSubType as empty  |

function and SD to create a new person for reference -

    @Then("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objNaturalPerson.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails, scenarioContext);
    }

//Function to create a New Person
    public Response createNewPerson(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();

        String uuid = UUID.randomUUID().toString().substring(0, 7);
        personRequest.setStrUuid(uuid);

        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));

        // Handle multiple nationalities (comma-separated)
        String strNationalities = mapPersonDetails.get("nationalities");
        List<String> lstNationality = new ArrayList<>();
        if (strNationalities != null && !strNationalities.trim().isEmpty()) {
            lstNationality = Arrays.stream(strNationalities.split(","))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .collect(Collectors.toList());
        }
        personRequest.setLstNationalities(lstNationality);

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

//        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
//        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);

        //Store in ScenarioContext
        scenarioContext.setContext("objectId", strObjectId);
        scenarioContext.setContext("orderId", strOrderId);
        scenarioContext.setContext("uuid", uuid);

        return response;
    }
