package ICOS;

import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.devHelperLibrary;

import static io.restassured.RestAssured.with;

public class BaseApiClient {
    protected TestConfig testDataConfig = TestConfig.getTestDataConfig();
    protected devHelperLibrary objDevHelperLibrary = new devHelperLibrary();
    protected CucumberLogger objCucumberLogger = new CucumberLogger();

    protected static RequestSpecification rspec;
    protected String TYK_KEY = TestConfig.getTykApiKey();
    protected String strAuthentication;

    public BaseApiClient() throws Exception {
        rspec = objDevHelperLibrary.setup();
    }

    protected String buildAuthHeader(String bearerToken, String jwtToken) {
        return objDevHelperLibrary.buildAuthHeader(bearerToken, jwtToken);
    }

    protected String buildUrl(String env, String endpointKey) {
        return objDevHelperLibrary.getTYKURL(env, endpointKey);
    }

    protected RequestSpecification prepareRequest(String bearerToken, String jwtToken) {
        strAuthentication = buildAuthHeader(bearerToken, jwtToken);
        return with().spec(rspec)
                .header("Authorization", bearerToken + " " + jwtToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");
    }

    protected Response doPost(String url, String body, RequestSpecification requestSpec) {
        return requestSpec.body(body).post(url);
    }

    protected Response doGet(String url, RequestSpecification requestSpec) {
        return requestSpec.get(url);
    }

    protected Response doPatch(String url, String body, RequestSpecification requestSpec) {
        return requestSpec.body(body).patch(url);
    }
}
