Feature: Get Natural Persons API

  Scenario Outline: Verify the Get Natural Persons API
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And Send request to generate New Person with below details
      | firstName       | <firstName>     |
      | lastName        | <lastName>      |
      | subType         | <subType>       |
      | domicileCountry | <domiCountry>   |
      | gender          | <gender>        |
      | nationalities   | <nationalities> |
    And I verify the Status Code for Natural Persons "<statusCode>"
    And I verify the "objectId" exists
    And I verify the "orderId" exists

    Examples:
      | firstName | lastName | subType        | domiCountry | gender | nationalities | statusCode |                           |
      | Firstname | Lastname | pers_form_ass  | CH          | male   | CH            | 200        |                       |

We need to extract objectId from the above steps - 
how can we do it ?

ContactNotesSteps.java - 

    @And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails);
        scenarioContext.setContext("NaturalPersonResponse", response);
    }

    @And("I verify the {string} exists")
    public void iVerifyTheKeyExists(String key) throws Exception {
        String strActualKeyValue = JsonHelper.extractStringField(response, key);
        ExtentCucumberAdapter.addTestStepLog("Actual value of "+key+" is: " + strActualKeyValue);

        Assert.assertNotNull(strActualKeyValue, key+" should not be null");
        Assert.assertFalse(strActualKeyValue.isEmpty(), key+" should not be empty");

        scenarioContext.setContext(key, strActualKeyValue); // store objectId, orderId etc.
    }

ContactNotes.java - 

//Function to create a New Person
    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, Map<String, String> mapPersonDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));

        // Handle multiple nationalities (comma-separated)
        String strNationalities = mapPersonDetails.get("nationalities");
        List<String> lstNationality = new ArrayList<>();
        if (strNationalities != null && !strNationalities.trim().isEmpty()) {
            lstNationality = Arrays.stream(strNationalities.split(","))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .collect(Collectors.toList());
        }
        personRequest.setLstNationalities(lstNationality);

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        //objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);
        return response;
    }

