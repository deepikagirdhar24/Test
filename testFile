package utils;

public class ErrorResponseVerifier {

    public void verifyDescription(Response objResponse, String strExpectedDescription) throws Exception {
        String strActualDescription = JsonHelper.extractStringField(objResponse, "description");
        ExtentCucumberAdapter.addTestStepLog("Actual description: " + strActualDescription);
        Assert.assertEquals(strActualDescription, strExpectedDescription, "Mismatch in description");
    }

    public void verifyValidationErrors(Response objResponse, String strExpectedErrorsCSV) throws Exception {
        List<String> listActualErrors = JsonHelper.extractListOfStringFieldsFromArray(objResponse, "validationErrors", "error");
        ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + listActualErrors);

        for (String strExpectedError : strExpectedErrorsCSV.split("\\s*,\\s*")) {
            Assert.assertTrue(listActualErrors.contains(strExpectedError), "Missing expected error: " + strExpectedError);
        }
    }

    public void verifyTopLevelAWSFields(Response objResponse, Map<String, String> mapExpectedFields) throws Exception {
        Assert.assertEquals(JsonHelper.extractStringField(objResponse, "type"), mapExpectedFields.get("type"), "Mismatch in type");
        Assert.assertEquals(JsonHelper.extractStringField(objResponse, "title"), mapExpectedFields.get("title"), "Mismatch in title");
        Assert.assertEquals(JsonHelper.extractStringField(objResponse, "detail"), mapExpectedFields.get("detail"), "Mismatch in detail");
    }

    public void verifyErrorDetails(Response objResponse, Map<String, String> mapExpectedFields) {
        String strField = JsonHelper.extractStringFieldFromArray(objResponse, "errorDetails", 0, "field");
        String strTitle = JsonHelper.extractStringFieldFromArray(objResponse, "errorDetails", 0, "title");
        String strDetail = JsonHelper.extractStringFieldFromArray(objResponse, "errorDetails", 0, "detail");

        ExtentCucumberAdapter.addTestStepLog("errorDetails[0]: field=" + strField + ", title=" + strTitle + ", detail=" + strDetail);

        Assert.assertEquals(strTitle, mapExpectedFields.get("errorDetails.title"), "Mismatch in errorDetails.title");
        Assert.assertEquals(strDetail, mapExpectedFields.get("errorDetails.detail"), "Mismatch in errorDetails.detail");
        Assert.assertNotNull(strField, "errorDetails[0].field should not be null");
        Assert.assertFalse(strField.trim().isEmpty(), "errorDetails[0].field should not be empty");
    }
}

ErrorResponseVerifier objErrorVerifier = new ErrorResponseVerifier();

@And("I verify the Work Request API 400 error response with below details")
public void iVerifyWorkRequest400ErrorResponse(DataTable dataTable) throws Exception {
    Map<String, String> mapExpectedErrorDetails = dataTable.asMap(String.class, String.class);
    objErrorVerifier.verifyDescription(response, mapExpectedErrorDetails.get("description"));
    objErrorVerifier.verifyValidationErrors(response, mapExpectedErrorDetails.get("error message"));
}

@And("I verify the Work Request AWS-style 400 error response with below details")
public void iVerifyWorkRequestAWS400ErrorResponse(DataTable dataTable) throws Exception {
    Map<String, String> mapExpectedAWSErrorFields = dataTable.asMap(String.class, String.class);
    objErrorVerifier.verifyTopLevelAWSFields(response, mapExpectedAWSErrorFields);
    objErrorVerifier.verifyErrorDetails(response, mapExpectedAWSErrorFields);
}
