public String resolveDate(String context, String fieldName, String dateInput) {
    if (dateInput == null || dateInput.trim().isEmpty()) {
        return ""; // Treat null/empty input as empty string
    }

    String input = dateInput.trim().toUpperCase();

    switch (input) {
        case "NA":
            return null;
        case "EMPTY":
            return "";
        case "DEFAULT":
            return getDefaultDateForField(fieldName);
        case "TODAY":
            return LocalDate.now().toString();
        case "PAST":
            return resolvePastDate(context);
        case "FUTURE":
            return resolveFutureDate(context);
        default:
            return input; // Assume valid yyyy-MM-dd format
    }
}

private String resolvePastDate(String context) {
    LocalDate today = LocalDate.now();
    if ("WorkRequest".equalsIgnoreCase(context)) {
        return today.minusDays(7).toString();
    } else {
        return today.minusDays(1).toString();
    }
}

private String resolveFutureDate(String context) {
    LocalDate today = LocalDate.now();
    if ("WorkRequest".equalsIgnoreCase(context)) {
        return today.plusDays(7).toString();
    } else {
        return today.plusDays(1).toString();
    }
}

private String getDefaultDateForField(String fieldName) {
    LocalDate today = LocalDate.now();

    switch (fieldName.toLowerCase()) {
        case "birthdate":
            return today.minusYears(40).toString();
        case "issuedate":
            return today.minusDays(1).toString();
        case "validuntil":
            return today.plusDays(1).toString();
        case "uktaxresidencefromdate":
            return today.minusYears(10).toString();
        default:
            throw new IllegalArgumentException("Unknown date field: " + fieldName);
    }
}

wr.setStrDueDate(payloadHelper.resolveDate("WorkRequest", "dueDate", map.get("dueDate")));
