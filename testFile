package utilities;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class DataHelper {

    private static final Random random = new Random();

    public static String normalize(String value) {
        if (value == null) return "";
        switch (value.trim().toUpperCase()) {
            case "NA": return null;
            case "EMPTY": return "";
            default: return value;
        }
    }

    public static String resolveDueDate(String dueDateInput) {
        if (dueDateInput == null || dueDateInput.trim().isEmpty()) return "";
        switch (dueDateInput.trim().toUpperCase()) {
            case "NA": return null;
            case "EMPTY": return "";
            case "FUTURE": return LocalDate.now().plusDays(7).toString();
            case "PAST": return LocalDate.now().minusDays(7).toString();
            case "TODAY": return LocalDate.now().toString();
            default: return dueDateInput;
        }
    }

    public static String resolveDynamicText(String type) {
        if (type == null || type.isEmpty()) return "";
        if (type.equalsIgnoreCase("EMPTY")) return "";

        if (type.equalsIgnoreCase("RANDOM_LT_250")) {
            return randomString(random.nextInt(249) + 1);
        }

        if (type.equalsIgnoreCase("RANDOM_GT_250")) {
            return randomString(random.nextInt(500) + 251);
        }

        if (type.toUpperCase().startsWith("RANDOM_")) {
            try {
                int length = Integer.parseInt(type.substring(7));
                return randomString(length);
            } catch (NumberFormatException e) {
                return type;
            }
        }

        return type;
    }

    public static List<String> parseNationalities(String commaSeparated) {
        if (commaSeparated == null || commaSeparated.trim().isEmpty()) return Collections.emptyList();
        return Arrays.stream(commaSeparated.split(","))
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());
    }

    public static List<POJONewDocumentRequest.QuestionAnswer> parseQuestionAnswers(String qaPairs) {
        List<POJONewDocumentRequest.QuestionAnswer> qaList = new ArrayList<>();
        if (qaPairs != null && !qaPairs.trim().isEmpty()) {
            String[] pairs = qaPairs.split(";");
            for (String pair : pairs) {
                String[] qa = pair.split("=", 2);
                if (qa.length == 2) {
                    POJONewDocumentRequest.QuestionAnswer qaObj = new POJONewDocumentRequest.QuestionAnswer();
                    qaObj.setStrQuestion(resolveDynamicText(qa[0].trim()));
                    qaObj.setStrAnswer(resolveDynamicText(qa[1].trim()));
                    qaList.add(qaObj);
                }
            }
        }
        return qaList;
    }

    private static String randomString(int length) {
        int leftLimit = 97; // 'a'
        int rightLimit = 122; // 'z'
        return random.ints(leftLimit, rightLimit + 1)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();
    }
}
