When I am running thsi debit card create with some hardocdes values of Money Account Object ID and Address Object ID, it is running successfully - 

Feature: Verify Debit Card API

  Scenario Outline: Verify the Post Debit Card API with valid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
Then Send Request to create Debit Card with below details
      | type        | <type>        |
      | maccId      | <maccId>      |
      | ownerId     | <ownerId>     |
      | label       | <label>       |
      | dailyLimit  | <dailyLimit>  |
      | addressId   | <addressId>   |
    And I verify the Status Code for Debit Card "200"
    And I verify the "objectId" exists in Debit Card response
    And I verify the "orderId" exists in Debit Card response

    Examples:
      | type    | maccId                   | ownerId    | label      | dailyLimit | addressId              | Comments                               |
      | DEBIT   | 66022644.2146  | 665041400  | LABEL 123  | 555        | 665871902      | 001 - StraightThrough                  |

Output - 
INFO: Value is: Request for Debit Card is: {"uuid":"1a29796","type":"DEBIT","maccId":"66022644.2146","ownerId":"665041400","label":"LABEL 123","dailyLimit":555,"addressId":"665871902"}
Sept 01, 2025 8:43:48 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Debit Card is: {"objectId":"9900029556547199","orderId":"2955654719"}
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 15.049 s - in testRunner.Runner

But when I generate values through the feature files and then put it in the Debit card create line in feature file, it ends with 500 error, why so ?

  Scenario Outline: Verify the Post Debit Card API with valid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to create Address with below details
      | firstName       | Firstname             |
      | middleName      | Middlename            |
      | lastName        | Lastname              |
      | salutation      | mr                    |
      | salutationLetter| mr                    |
      | attnOf          |                       |
      | crof            |                       |
      | residency       | 123                   |
      | streetNr        | 123                   |
      | street          | teststreet + RANDOM_6 |
      | streetAdd       | Addition street       |
      | poBox           | P.O.Box 123           |
      | city            | Zurich                |
      | state           | RANDOM_49             |
      | zip             | 8001                  |
      | country         | CH                    |
    Then Send Request to create Container with below details
      | type   | banking   |
      | bpId   | 66022644  |
    Then Send Request to create Money Account with below details
      | ownerId            | CONTAINER_OBJECT_ID     |
      | type               | privateCurrentAccount   |
      | currency           | GBP                     |
      | rubric             | NA                      |
      | addressIds         | ADDRESS_OBJECT_ID       |
      | mailingOffsetDay   | NA                      |
      | mailingOffsetMonth | NA                      |
      | minimalNoticeDays  | NA                      |
      | isMailingPaper     | false                   |
    Then Send Request to create Debit Card with below details
      | type        | <type>        |
      | maccId      | <maccId>      |
      | ownerId     | <ownerId>     |
      | label       | <label>       |
      | dailyLimit  | <dailyLimit>  |
      | addressId   | <addressId>   |
    And I verify the Status Code for Debit Card "200"
    And I verify the "objectId" exists in Debit Card response
    And I verify the "orderId" exists in Debit Card response

    Examples:
      | type    | maccId                   | ownerId    | label      | dailyLimit | addressId              | Comments                               |
      | DEBIT   | MONEY_ACCOUNT_OBJECT_ID  | 665041400  | LABEL 123  | 555        | ADDRESS_OBJECT_ID      | 001 - StraightThrough                  |

Output - 

INFO: Value is: Request for Debit Card is: {"uuid":"8462bf1","type":"DEBIT","maccId":"66022644.2147","ownerId":"665041400","label":"LABEL 123","dailyLimit":555,"addressId":"665871903"}
Sept 01, 2025 8:55:06 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Debit Card is: {"orderId":"2955654970","error":"MAILING ADDRESS\nEither Name or Firm is mandatory."}
  Then Send Request to create Debit Card with below details                              # stepDefinations.DebitCardSteps.sendRequestToCreateDebitCardWithDetails(io.cucumber.datatable.DataTable)
    | type       | DEBIT                   |
    | maccId     | MONEY_ACCOUNT_OBJECT_ID |
    | ownerId    | 665041400               |
    | label      | LABEL 123               |
    | dailyLimit | 555                     |
    | addressId  | ADDRESS_OBJECT_ID       |
  And I verify the Status Code for Debit Card "200"                                      # stepDefinations.DebitCardSteps.iVerifyTheStatusCodeForDebitCard(java.lang.String)
      java.lang.AssertionError: expected [500] but found [200]
	at org.testng.Assert.fail(Assert.java:111)
	at org.testng.Assert.failNotEquals(Assert.java:1578)
	at org.testng.Assert.assertEqualsImpl(Assert.java:150)
	at org.testng.Assert.assertEquals(Assert.java:132)
	at org.testng.Assert.assertEquals(Assert.java:1419)
	at org.testng.Assert.assertEquals(Assert.java:1383)
	at org.testng.Assert.assertEquals(Assert.java:1429)
	at stepDefinations.DebitCardSteps.iVerifyTheStatusCodeForDebitCard(DebitCardSteps.java:84)
	at âœ½.I verify the Status Code for Debit Card "200"(file:///C:/Users/girdd/IdeaProjects/icosapitests/src/test/resources/Features/abc.feature:43)
  And I verify the "objectId" exists in Debit Card response                              # stepDefinations.DebitCardSteps.iVerifyTheKeyExistsInDebitCardResponse(java.lang.String)
  And I verify the "orderId" exists in Debit Card response                               # stepDefinations.DebitCardSteps.iVerifyTheKeyExistsInDebitCardResponse(java.lang.String)
Sept 01, 2025 8:55:11 AM tech.grasshopper.pdf.PDFCucumberReport collectReportConfiguration
INFO: PDF report configuration YAML file not found. Using default settings.
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 45.142 s <<< FAILURE! - in testRunner.Runner
[ERROR] Verify Debit Card API.Verify the Post Debit Card API with valid data - 001 - StraightThrough  Time elapsed: 32.674 s  <<< FAILURE!
java.lang.AssertionError: expected [500] but found [200]
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   expected [500] but found [200]
[INFO] 
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0




Below is the code used - 

    @Then("Send Request to create Debit Card with below details")
    public void sendRequestToCreateDebitCardWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapDebitCardDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objDebitCard.createDebitCard(strEnvType, "Bearer", jwtToken, mapDebitCardDetails, scenarioContext);
    }

// Create Debit Card
    public Response createDebitCard(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.DEBITCARD");

        POJODebitCardRequest pojoDebitCardRequest = payloads.buildDebitCardPayload(mapDebitCardDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoDebitCardRequest);
        objCucumberLogger.PrintStatus("Request for Debit Card is: " + strRequestBody);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Debit Card");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Debit Card is: " + strResponseBody);

        String strDebitCardObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strDebitCardOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("debitCardObjectId", strDebitCardObjectId);
        scenarioContext.setContext("debitCardOrderId", strDebitCardOrderId);

        return objResponse;
    }

public POJODebitCardRequest buildDebitCardPayload(Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) {
        POJODebitCardRequest debitCard = new POJODebitCardRequest();

        String strMoneyAccountObjectId = scenarioContext.getContext("moneyAccountObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");

        debitCard.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        debitCard.setStrType(payloadHelper.normalize(mapDebitCardDetails.get("type")));

        String resolvedMaccId = payloadHelper.resolveId(mapDebitCardDetails.get("maccId"), strMoneyAccountObjectId);
        debitCard.setStrMaccId(resolvedMaccId);

        debitCard.setStrOwnerId(payloadHelper.normalize(mapDebitCardDetails.get("ownerId")));

        debitCard.setStrLabel(payloadHelper.normalize(mapDebitCardDetails.get("label")));
        payloadHelper.applyBigDecimalField(mapDebitCardDetails.get("dailyLimit"), "dailyLimit", debitCard);

        String resolvedAddressId = payloadHelper.resolveId(mapDebitCardDetails.get("addressId"), strAddressObjectId);
        debitCard.setStrAddressId(resolvedAddressId);

        return debitCard;
    }

public String resolveId(String input, String resolvedValue) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }

        switch (input.trim().toUpperCase()) {
            case "EMPTY":
                return "";
            case "NA":
                return null;
            case "NATURAL_PERSON_OBJECT_ID":
            case "CONTAINER_OBJECT_ID":
            case "ADDRESS_OBJECT_ID":
            case "ADDRESS_OBJECT_ID_ADHOC":
            case "MONEY_ACCOUNT_OBJECT_ID":
            case "DOCUMENT_OBJECT_ID":
            case "LEGAL_PERSON_OBJECT_ID":
            case "NATURAL_PERSON_OBJECT_ID_1":
                return resolvedValue;
            default:
                return input;
        }
    }

    public List<String> resolveIdList(String input, String fallbackSingleAddressId, List<String> addressObjectIds) {
        if (input == null || input.trim().isEmpty()) {
            return Collections.emptyList();
        }

        if ("ADDRESS_OBJECT_ID_LIST".equalsIgnoreCase(input.trim())) {
            return addressObjectIds != null ? addressObjectIds : Collections.emptyList();
        }

        // Resolve individual tokens
        return Arrays.stream(input.split(","))
                .map(id -> resolveId(id.trim(), fallbackSingleAddressId))
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }
