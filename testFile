And I verify the following questions and answers in Document response
  | question     | answer     |
  | Question 1   | Answer 1   |
  | Question 2   | Answer 2   |
  | Question 3   | Answer 3   |
  | Question 4   | Answer 4   |
  | Question 5   | Answer 5   |

@And("I verify the following questions and answers in Document response")
public void iVerifyAllQuestionAnswerPairs(DataTable dataTable) {
    List<Map<String, String>> expectedQAList = dataTable.asMaps(String.class, String.class);
    objDocument.verifyAllQuestionAnswerPairs(expectedQAList, response);
}

public void verifyAllQuestionAnswerPairs(List<Map<String, String>> expectedQAList, Response response) {
    List<Map<String, String>> actualQAList = response.jsonPath().getList("questions");

    Assert.assertEquals(actualQAList.size(), expectedQAList.size(),
        "Mismatch in number of question/answer pairs");

    for (int i = 0; i < expectedQAList.size(); i++) {
        Map<String, String> expected = expectedQAList.get(i);
        Map<String, String> actual = actualQAList.get(i);

        String expectedQuestion = expected.get("question");
        String expectedAnswer = expected.get("answer");
        String actualQuestion = actual.get("question");
        String actualAnswer = actual.get("answer");

        ExtentCucumberAdapter.addTestStepLog("Validating Q/A Pair " + (i + 1));
        ExtentCucumberAdapter.addTestStepLog("Expected → Q: " + expectedQuestion + ", A: " + expectedAnswer);
        ExtentCucumberAdapter.addTestStepLog("Actual   → Q: " + actualQuestion + ", A: " + actualAnswer);

        Assert.assertEquals(actualQuestion, expectedQuestion, "Mismatch in question at index " + (i + 1));
        Assert.assertEquals(actualAnswer, expectedAnswer, "Mismatch in answer at index " + (i + 1));
    }
}
