public POJOUpdNaturalPersonRequest buildUpdNaturalPersonPayload(Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) {
        POJOUpdNaturalPersonRequest updNaturalPerson = new POJOUpdNaturalPersonRequest();

        String strDocumentObjectId = scenarioContext.getContext("documentObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");

        updNaturalPerson.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
//        updNaturalPerson.setStrId(payloadHelper.normalize(mapPersonDetails.get("id")));
        updNaturalPerson.setStrSubType(payloadHelper.normalize(mapPersonDetails.get("subType")));
        updNaturalPerson.setStrDomiCountry(payloadHelper.normalize(mapPersonDetails.get("domiCountry")));
        updNaturalPerson.setStrFirstName(payloadHelper.normalize(mapPersonDetails.get("firstName")));
        updNaturalPerson.setStrMiddleName(payloadHelper.normalize(mapPersonDetails.get("middleName")));
        updNaturalPerson.setStrLastName(payloadHelper.normalize(mapPersonDetails.get("lastName")));
        updNaturalPerson.setStrBirthDate(payloadHelper.resolveDate("UpdateNaturalPerson", "birthDate", mapPersonDetails.get("birthDate")));
        updNaturalPerson.setStrGender(payloadHelper.normalize(mapPersonDetails.get("gender")));
        updNaturalPerson.setLstNationalities(payloadHelper.parseNationalities(mapPersonDetails.get("nationalities")));
        updNaturalPerson.setStrTitle(payloadHelper.normalize(mapPersonDetails.get("title")));
        updNaturalPerson.setStrBirthPlace(payloadHelper.normalize(mapPersonDetails.get("birthPlace")));
        updNaturalPerson.setStrBirthCountry(payloadHelper.normalize(mapPersonDetails.get("birthCountry")));
        updNaturalPerson.setLstElectronicAddresses(buildElectronicAddresses(mapPersonDetails.get("electronicAddresses")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("isEmployee"), "isEmployee", updNaturalPerson);
        updNaturalPerson.setLstTaxResidences(buildTaxResidences(mapPersonDetails.get("taxResidences")));
        updNaturalPerson.setLstDocumentationIdentity(buildDocumentationIdentity(
                mapPersonDetails.get("documentationIdentity"), "UpdateNaturalPerson"
        ));
        updNaturalPerson.setStrPepAssociationCountry(payloadHelper.normalize(mapPersonDetails.get("pepAssociationCountry")));
        updNaturalPerson.setStrPepClassificationReason(payloadHelper.normalize(mapPersonDetails.get("pepClassificationReason")));
        updNaturalPerson.setStrPepCategory(payloadHelper.normalize(mapPersonDetails.get("pepCategory")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("isMarketingOptOut"), "isMarketingOptOut", updNaturalPerson);
        updNaturalPerson.setStrFatcaStatus(payloadHelper.normalize(mapPersonDetails.get("fatcaStatus")));
        updNaturalPerson.setStrCrsType(payloadHelper.normalize(mapPersonDetails.get("crsType")));
        updNaturalPerson.setStrUkTaxResidenceFromDate(payloadHelper.resolveDate("UpdateNaturalPerson", "ukTaxResidenceFromDate", mapPersonDetails.get("ukTaxResidenceFromDate")));
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxAvoidanceSchemes"), "hasTaxAvoidanceSchemes", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("isHoldingBearerShares"), "isHoldingBearerShares", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasInvestableAssets10M"), "hasInvestableAssets10M", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasHistoricTaxIssues"), "hasHistoricTaxIssues", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxChgDomiStatus"), "hasTaxChgDomiStatus", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxChgUkDomiStatus"), "hasTaxChgUkDomiStatus", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxPrevClaimRemitanceBasis"), "hasTaxPrevClaimRemitanceBasis", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTaxIntendClaimRemitanceBasis"), "hasTaxIntendClaimRemitanceBasis", updNaturalPerson);
        updNaturalPerson.setLstAccountants(buildAccountants(mapPersonDetails.get("accountants"), scenarioContext));
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasTravelProtection"), "hasTravelProtection", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasCouttsOnline"), "hasCouttsOnline", updNaturalPerson);
        payloadHelper.applyBooleanField(mapPersonDetails.get("hasCouttsId"), "hasCouttsId", updNaturalPerson);
        updNaturalPerson.setLstAssociations(buildAssociations(mapPersonDetails.get("associations"), scenarioContext));

        String resolvedStrQuestionId = payloadHelper.resolveId(mapPersonDetails.get("idQuestionId"), strDocumentObjectId);
        updNaturalPerson.setStrIdQuestionId(resolvedStrQuestionId);

        String resolvedCorrespondanceAddressId = payloadHelper.resolveId(mapPersonDetails.get("correspondanceAddressId"), strAddressObjectId);
        updNaturalPerson.setStrCorrespondanceAddressId(resolvedCorrespondanceAddressId);

        return updNaturalPerson;
    }


    public List<POJOElectronicAddress> buildElectronicAddresses(String input) {
        if (input == null || input.trim().isEmpty()) return null;

        List<POJOElectronicAddress> listElectronicAddresses = new ArrayList<>();
        String[] entries = input.split("\\s*,\\s*");
        for (String entry : entries) {
            String[] parts = entry.split(";");
            POJOElectronicAddress address = new POJOElectronicAddress();
            address.setStrMedium(payloadHelper.normalize(parts[0]));
            address.setStrKind(payloadHelper.normalize(parts[1]));
            address.setStrValue(payloadHelper.normalize(parts[2]));
            payloadHelper.applyBooleanField(parts[3], "isPreferred", address);
            listElectronicAddresses.add(address);
        }
        return listElectronicAddresses;
    }

    public List<POJOTaxResidence> buildTaxResidences(String input) {
        if (input == null || input.trim().isEmpty()) return null;

        List<POJOTaxResidence> listTaxResidences = new ArrayList<>();
        String[] entries = input.split("\\s*,\\s*");
        for (String entry : entries) {
            String[] parts = entry.split(";");
            POJOTaxResidence tax = new POJOTaxResidence();

            tax.setStrCountry(payloadHelper.normalize(parts[0]));
            tax.setStrTaxNumber(payloadHelper.resolveDynamicText(parts[1]));
            tax.setStrIdentityType(payloadHelper.normalize(parts[2]));

            listTaxResidences.add(tax);
        }
        return listTaxResidences;
    }

There is a test case here where ElectronicAddresses is NA< but I have not applied payloadHelper.normalize here because normalize function takes string, but this buildelectroniceAddresses returns list - 

    public String normalize(String value) {
        if (value == null) return "";
        switch (value.trim().toUpperCase()) {
            case "NA": return null;
            case "EMPTY": return "";
            default: return value;
        }
    }

How to resolve this ?
