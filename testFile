1. Update createContactNotes to accept ScenarioContext
Update your class constructor and add a field:

java
Copy
Edit
public class createContactNotes {
    ...
    private ScenarioContext scenarioContext;

    public createContactNotes(ScenarioContext scenarioContext) throws Exception {
        this.scenarioContext = scenarioContext;
        objEncryptionUtil = new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
        objdevHelperLibrary = new devHelperLibrary();
        rspec = objdevHelperLibrary.setup();
    }
    ...
}
ðŸ”§ 2. Store orderId in ScenarioContext after extracting it
In createNewPerson() method, modify:

java
Copy
Edit
String orderId = response.jsonPath().getString("orderId");
To:

java
Copy
Edit
orderId = response.jsonPath().getString("orderId");
objectId = response.jsonPath().getString("objectId");
scenarioContext.setToken("orderId", orderId);
scenarioContext.setToken("objectId", objectId);
âœ… This stores both values in ScenarioContext.

ðŸ”§ 3. Fix object initialization in CreateContactSteps
In CreateContactSteps, replace this line:

java
Copy
Edit
objpostContactNotes = new createContactNotes();
With this:

java
Copy
Edit
objpostContactNotes = new createContactNotes(this.scenarioContext);
Make sure this is inside the constructor that receives ScenarioContext (which you're already using):

java
Copy
Edit
public CreateContactSteps(ScenarioContext scenarioContext) throws Exception {
    ...
    this.scenarioContext = scenarioContext;
    ...
    objpostContactNotes = new createContactNotes(this.scenarioContext);
}
ðŸ”§ 4. Use the stored orderId for assertion
In your step method:

java
Copy
Edit
@And("I verify the OrderId")
public void iVerifyTheOrderId() throws JsonProcessingException {
    String actualOrderId = objpostContactNotes.getOrderId(response);  // This gets the response value again
    String expectedOrderId = scenarioContext.getToken("orderId");     // This gets the stored one from earlier

    ExtentCucumberAdapter.addTestStepLog("Actual Order ID from response: " + actualOrderId);
    ExtentCucumberAdapter.addTestStepLog("Expected Order ID from ScenarioContext: " + expectedOrderId);

    Assert.assertEquals(actualOrderId, expectedOrderId, "Order ID does not match");
}
âœ… Summary
Pass ScenarioContext to createContactNotes

Store the orderId in ScenarioContext during createNewPerson

Use ScenarioContext in step definition to retrieve and assert

This makes your test fully data-driven and decouples the steps from any hardcoded values. Let me know if you also want to assert objectId, or log both in one place.
