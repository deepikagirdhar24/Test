package ICOS;

import ICOS.pojo.ContactNoteRequest;
import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;

import java.util.Collections;
import java.util.HashMap;
import java.util.UUID;

import static io.restassured.RestAssured.with;

public class ContactNotes {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String responseBody;
    String TYK_KEY = System.getenv("X-TYK-API-KEY");
    String strObjectId;
    String strOrderId;
    String strJsonBody;

    public ContactNotes() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }

    // New method to get Contact Notes
    public Response getGetContactNotes(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Actual value of Authentication is : " +strAuthentication);
        //String strTYKURLKey="TYK.ENV."+strEnvType;
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CONTACTNOTES");
        objCucumberLogger.PrintStatus("URL is"+strTYKURL);
        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .get(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);
        return response;
    }

    // New method to get Subject from the JSON
    public String getSubject(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("subject").asText();
    }

    // New method to get Notes from the JSON
    public String getNotes(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("notes").asText();
    }

    // New method to get hasFollowUp from the JSON
    public Boolean hasFollowup(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("hasFollowup").asBoolean();
    }

    public boolean getPersonItem(Response response, String personItem) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode personIdsNode = rootNode.path("personIds");
        if (personIdsNode.isArray()) {
            for (JsonNode itemNode : personIdsNode) {
                String currentId = itemNode.asText();
                objCucumberLogger.PrintStatus("Checking item: " + currentId); // Debugging line
                if (personItem.equals(currentId)) {
                    objCucumberLogger.PrintStatus("Match found: " + currentId); // Debugging line
                    ExtentCucumberAdapter.addTestStepLog("Actual value of Person Item is : " +currentId);
                    return true;
                }
            }
        }
        return false;
    }

    //Function to create a New Person
    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, String strFirstName) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        //objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CREATENEWPERSON");
        //objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0,7));
        personRequest.setStrSubType("pers_form_ass");
        personRequest.setStrDomiCountry("CH");
        personRequest.setStrFirstName(strFirstName);
        personRequest.setStrLastName("Lastname");
        personRequest.setStrGender("male");
        personRequest.setLstNationalities(Collections.singletonList("CH"));

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        //objCucumberLogger.PrintStatus(jsonBody);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        //objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        objCucumberLogger.PrintStatus("Response is"+responseBody);
        //objCucumberLogger.PrintStatus("Extracted Object Id is : "+ strObjectId);
        //objCucumberLogger.PrintStatus("Extracted Order Id is : "+ strOrderId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);
        return response;
    }

    //Function to create a Contact Note
    public Response createContactNote(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        //objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CONTACTNOTES");
        //objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        ContactNoteRequest noteRequest = new ContactNoteRequest();
        noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));
        noteRequest.setStrSubject("Testsubject");
        noteRequest.setStrNotes("Testnote");
        noteRequest.setBoolHasFollowup(false);

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        //objCucumberLogger.PrintStatus(strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        //objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);
        return response;
    }

    //Function to get field from Response
    public String getFieldFromResponse(Response response, String key) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path(key).asText();
    }

}

My senior has added this comment - can you explain and give me full correct optimized code - 

I have refactored this code, please follow this for future:
// Generic function to check if a value exists in a JSON array public boolean valueExistsInJsonArray(Response response, String jsonPath, String targetValue) throws JsonProcessingException { JsonNode rootNode = objectMapper.readTree(response.asString()); JsonNode arrayNode = rootNode.path(jsonPath);
if (arrayNode.isArray()) {
    return iterateAndCheckArray(arrayNode, targetValue);
}
return false;
}
// The Loop Function which should be called from step definition public boolean iterateAndCheckArray(JsonNode arrayNode, String targetValue) { for (JsonNode itemNode : arrayNode) { String currentValue = itemNode.asText(); if (targetValue.equals(currentValue)) { logMatchFound(currentValue); return true; } } return false; }
// Here you can create a separate function to add some time in reports. This can be added in Base Step
private void logMatchFound(String value) { objCucumberLogger.PrintStatus("Match found: " + value); ExtentCucumberAdapter.addTestStepLog("Actual value found: " + value); }
// Example usage for person IDs public boolean personIdExists(Response response, String personId) throws JsonProcessingException { return valueExistsInJsonArray(response, "personIds", personId); }
// Example usage for other entity types public boolean orderIdExists(Response response, String orderId) throws JsonProcessingException { return valueExistsInJsonArray(response, "orderIds", orderId); }
In my opinion i found these issues here :
1.Function only works with "personIds" and cannot be reused for other JSON paths 2. "personIds" is hardcoded, limiting reusability 4. Naming Inconsistency- Named "getPersonItem" but actually performs validation 5. The iteration logic should have been written better for reusuability
