public List<POJOElectronicAddress> buildElectronicAddresses(String input) {
    if (input == null || input.trim().isEmpty()) return Collections.emptyList();

    List<POJOElectronicAddress> list = new ArrayList<>();
    for (String entry : input.split(";")) {
        String[] parts = entry.split(",");
        POJOElectronicAddress e = new POJOElectronicAddress();
        e.setStrType(payloadHelper.normalize(parts[0]));
        e.setStrValue(payloadHelper.normalize(parts[1]));
        list.add(e);
    }
    return list;
}

public List<POJOTaxResidence> buildTaxResidences(String input) {
    if (input == null || input.trim().isEmpty()) return Collections.emptyList();

    List<POJOTaxResidence> list = new ArrayList<>();
    for (String entry : input.split(";")) {
        String[] parts = entry.split(",");
        POJOTaxResidence tr = new POJOTaxResidence();
        tr.setStrCountry(payloadHelper.normalize(parts[0]));
        tr.setStrTin(payloadHelper.normalize(parts[1]));
        list.add(tr);
    }
    return list;
}

public List<POJODocumentationIdentity> buildDocumentationIdentity(String input, String context) {
    if (input == null || input.trim().isEmpty()) return Collections.emptyList();

    List<POJODocumentationIdentity> list = new ArrayList<>();
    for (String entry : input.split(";")) {
        String[] parts = entry.split(",");
        POJODocumentationIdentity doc = new POJODocumentationIdentity();
        doc.setStrType(payloadHelper.normalize(parts[0]));
        doc.setStrNumber(payloadHelper.normalize(parts[1]));
        doc.setStrIssueDate(payloadHelper.resolveDate(context, "issueDate", parts[2]));
        doc.setStrExpiryDate(payloadHelper.resolveDate(context, "expiryDate", parts[3]));
        list.add(doc);
    }
    return list;
}


public List<POJOAccountant> buildAccountants(String input) {
    if (input == null || input.trim().isEmpty()) return Collections.emptyList();

    List<POJOAccountant> list = new ArrayList<>();
    for (String entry : input.split(";")) {
        String[] parts = entry.split(",");
        POJOAccountant acc = new POJOAccountant();
        acc.setStrName(payloadHelper.normalize(parts[0]));
        acc.setStrFirm(payloadHelper.normalize(parts[1]));
        acc.setStrEmail(payloadHelper.normalize(parts[2]));
        list.add(acc);
    }
    return list;
}


public List<POJOAssociation> buildAssociations(String input) {
    if (input == null || input.trim().isEmpty()) return Collections.emptyList();

    List<POJOAssociation> list = new ArrayList<>();
    for (String entry : input.split(";")) {
        String[] parts = entry.split(",");
        POJOAssociation assoc = new POJOAssociation();
        assoc.setStrType(payloadHelper.normalize(parts[0]));
        assoc.setStrId(payloadHelper.normalize(parts[1]));
        assoc.setStrRole(payloadHelper.normalize(parts[2]));
        list.add(assoc);
    }
    return list;
}

