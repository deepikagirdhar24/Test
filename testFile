// New method to get Subject from the JSON
    public String getSubject(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("subject").asText();
    }

    // New method to get Notes from the JSON
    public String getNotes(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("notes").asText();
    }

    // New method to get hasFollowUp from the JSON
    public Boolean hasFollowup(Response response) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        return rootNode.path("hasFollowup").asBoolean();
    }

    public boolean getPersonItem(Response response, String personItem) throws JsonProcessingException {
        JsonNode rootNode = objectMapper.readTree(response.asString());
        JsonNode personIdsNode = rootNode.path("personIds");
        if (personIdsNode.isArray()) {
            for (JsonNode itemNode : personIdsNode) {
                String currentId = itemNode.asText();
                objCucumberLogger.PrintStatus("Checking item: " + currentId); // Debugging line
                if (personItem.equals(currentId)) {
                    objCucumberLogger.PrintStatus("Match found: " + currentId); // Debugging line
                    ExtentCucumberAdapter.addTestStepLog("Actual value of Person Item is : " +currentId);
                    return true;
                }
            }
        }
        return false;
    }

My Senior has reviewed this and added below comments for me to implement.Please add this my above code - 

I have refactored this code, please follow this for future:
// Generic function to check if a value exists in a JSON array public boolean valueExistsInJsonArray(Response response, String jsonPath, String targetValue) throws JsonProcessingException { JsonNode rootNode = objectMapper.readTree(response.asString()); JsonNode arrayNode = rootNode.path(jsonPath);
if (arrayNode.isArray()) {
    return iterateAndCheckArray(arrayNode, targetValue);
}
return false;
}
// The Loop Function which should be called from step definition public boolean iterateAndCheckArray(JsonNode arrayNode, String targetValue) { for (JsonNode itemNode : arrayNode) { String currentValue = itemNode.asText(); if (targetValue.equals(currentValue)) { logMatchFound(currentValue); return true; } } return false; }
// Here you can create a separate function to add some time in reports. This can be added in Base Step
private void logMatchFound(String value) { objCucumberLogger.PrintStatus("Match found: " + value); ExtentCucumberAdapter.addTestStepLog("Actual value found: " + value); }
// Example usage for person IDs public boolean personIdExists(Response response, String personId) throws JsonProcessingException { return valueExistsInJsonArray(response, "personIds", personId); }
// Example usage for other entity types public boolean orderIdExists(Response response, String orderId) throws JsonProcessingException { return valueExistsInJsonArray(response, "orderIds", orderId); }
In my opinion i found these issues here :
1.Function only works with "personIds" and cannot be reused for other JSON paths 2. "personIds" is hardcoded, limiting reusability 4. Naming Inconsistency- Named "getPersonItem" but actually performs validation 5. The iteration logic should have been written better for reusuability
