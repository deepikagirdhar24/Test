@And("I verify the Legal Person API 400 error response with below details")
public void iVerifyLegalPerson400ErrorResponse(DataTable dataTable) throws Exception {
    Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

    String expectedDescription = expectedData.get("description");
    String expectedErrorMessages = expectedData.get("error message");

    String actualDescription = JsonHelper.extractStringField(response, "description");
    ExtentCucumberAdapter.addTestStepLog("Actual description: " + actualDescription);
    Assert.assertEquals(actualDescription, expectedDescription, "Mismatch in description");

    // Handle multiple error messages
    String[] expectedErrors = expectedErrorMessages.split("\\s*,\\s*");
    List<String> actualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "validationErrors", "error");

    ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + actualErrors);

    for (String expectedError : expectedErrors) {
        Assert.assertTrue(actualErrors.contains(expectedError),
                "Expected error message not found: " + expectedError);
    }
}

  And I verify the Legal Person API 400 error response with below details
    | description   | Validation Errors                       |
    | error message | Name is required, Address is required  |

@And("I verify the Legal Person API 500 error response with message {string}")
public void iVerifyLegalPerson500ErrorResponse(String expectedError) throws Exception {
    String actualError = JsonHelper.extractStringField(response, "error");
    ExtentCucumberAdapter.addTestStepLog("Actual error: " + actualError);
    Assert.assertEquals(actualError, expectedError, "Mismatch in error message");
}

@And("I verify the Legal Person AWS-style 400 error response with below details")
public void iVerifyLegalPersonAWSStyle400ErrorResponse(DataTable dataTable) throws Exception {
    Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

    // Extract expected main fields
    String expectedType = expectedData.get("type");
    String expectedTitle = expectedData.get("title");
    String expectedDetail = expectedData.get("detail");
    String expectedErrorMessages = expectedData.get("error message"); // comma-separated

    // Validate basic fields
    String actualType = JsonHelper.extractStringField(response, "type");
    String actualTitle = JsonHelper.extractStringField(response, "title");
    String actualDetail = JsonHelper.extractStringField(response, "detail");

    ExtentCucumberAdapter.addTestStepLog("Actual type: " + actualType);
    ExtentCucumberAdapter.addTestStepLog("Actual title: " + actualTitle);
    ExtentCucumberAdapter.addTestStepLog("Actual detail: " + actualDetail);

    Assert.assertEquals(actualType, expectedType, "Mismatch in 'type'");
    Assert.assertEquals(actualTitle, expectedTitle, "Mismatch in 'title'");
    Assert.assertEquals(actualDetail, expectedDetail, "Mismatch in 'detail'");

    // Validate errorDetails[].error
    String[] expectedErrors = expectedErrorMessages.split("\\s*,\\s*");
    List<String> actualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "errorDetails", "error");

    ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + actualErrors);

    for (String expectedError : expectedErrors) {
        Assert.assertTrue(actualErrors.contains(expectedError),
                "Expected error message not found: " + expectedError);
    }
}

  And I verify the Legal Person AWS-style 400 error response with below details
    | type          | https://example.com/probs/validation |
    | title         | Validation Error                     |
    | detail        | One or more validation errors        |
    | error message | Invalid BP ID, Invalid SubType Key   |
