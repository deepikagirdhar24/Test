This is my payload - 

{
    "id": "665080169",
    "firstName": "firstname",
    "middleName": null,
    "lastName": "lastname",
    "birthDate": "1900-01-01",
    "nationalities": [
        "GB"
    ],
    "subType": {
        "key": "pers_form_ass",
        "value": "Associated (not documented) (02)"
    },
    "gender": {
        "key": "male",
        "value": "male"
    },
    "birthPlace": null,
    "birthCountry": null,
    "domiCountry": "GB",
    "residenceAddress": {
        "id": "665765708",
        "firstName": "firstname",
        "middleName": null,
        "lastName": "lastname",
        "firm": null,
        "residency": null,
        "streetNr": null,
        "street": null,
        "streetAdd": null,
        "poBox": null,
        "city": null,
        "state": null,
        "zip": null,
        "country": "GB"
    },
    "isEmployee": false,
    "employmentKind": {
        "key": "employee",
        "value": "Employed"
    },
    "ukTaxResidenceFromDate": "",
    "taxChgDomiStatusDate": null,
    "hasTravelProtection": false,
    "hasCouttsOnline": false,
    "pepCategory": {
        "key": null,
        "value": null
    },
    "dueDillegence": {
        "key": null,
        "value": null
    },
    "coreDv": {
        "key": null,
        "value": null
    },
    "income": null
}

I want to get Natural Person, I have created feature file. I need to validate/assert
firstname - same as firstname sent in payload in createNewPerson
lastName = lastname
nationalities contains GB
subType key as pers_form_Ass
gender key as male
domiCOuntry as GB

Feature: Get Natural Persons API

  Scenario Outline: Verify the Get Natural Persons API
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And Send request to generate New Person with below details
      | firstName       | <firstName>     |
      | lastName        | <lastName>      |
      | subType         | <subType>       |
      | domicileCountry | <domiCountry>   |
      | gender          | <gender>        |
      | nationalities   | <nationalities> |
    And I verify the Status Code for Natural Persons "<statusCode>"
    And Send Request to get Natural Person
    And I verify the firstName is "<firstName>"
    And I verify the lastName is "<lastName>"
    And I verify the subType is "<subType>"
    And I verify the "domiCountry" is "<domiCountry>"
    And I verify the "nationalities" is "<nationalities>"

    Examples:
      | firstName | lastName | subType        | domiCountry | gender | nationalities | statusCode |                           |
      | Firstname | Lastname | pers_form_ass  | GB          | male   | GB            | 200        |                       |

NaturalPersonSteps.java - 

    @And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objNaturalPerson.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails, scenarioContext);
    }

    @And("Send Request to get Natural Person")
    public void sendRequestToGetNaturalPerson() throws JsonProcessingException {
        String jwtToken = scenarioContext.getContext("JWTToken");
        response =objNaturalPerson.getNaturalPerson(strEnvType,"Bearer",jwtToken, scenarioContext);
        scenarioContext.setContext("NaturalPersonResponse", response);
    }

NaturalPerson.java - 

//Function to create a New Person
    public Response createNewPerson(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();

        String uuid = UUID.randomUUID().toString().substring(0, 7);
        personRequest.setStrUuid(uuid);
//        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));

        String firstName = mapPersonDetails.get("firstName");
        personRequest.setStrFirstName(firstName);
//        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));

        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));

        // Handle multiple nationalities (comma-separated)
        String strNationalities = mapPersonDetails.get("nationalities");
        List<String> lstNationality = new ArrayList<>();
        if (strNationalities != null && !strNationalities.trim().isEmpty()) {
            lstNationality = Arrays.stream(strNationalities.split(","))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .collect(Collectors.toList());
        }
        personRequest.setLstNationalities(lstNationality);

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);

        //Store in ScenarioContext
        scenarioContext.setContext("objectId", strObjectId);
        scenarioContext.setContext("orderId", strOrderId);
        scenarioContext.setContext("uuid", uuid);
        scenarioContext.setContext("firstName", firstName);

        return response;
    }

// New method to get Natural Person
    public Response getNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken, ScenarioContext scenarioContext) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);

        String objectId = scenarioContext.getContext("objectId"); // Path param
        String uuid = scenarioContext.getContext("uuid"); //Query param
        String minimal = "yes";   // Query param

        // Base URL without path or query params
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending GET request for Natural Person");
        ExtentCucumberAdapter.addTestStepLog("Base URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Path Param - objectId: " + objectId);
        ExtentCucumberAdapter.addTestStepLog("Query Params - uuid: " + uuid + ", minimal: " + minimal);

        response = with().spec(rspec)
                .header("Authorization", strBearerToken + " " + strJWTToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json")
                .pathParam("id", objectId)
                .queryParam("uuid", uuid)
                .queryParam("minimal", minimal)
                .get(strTYKURL + "/{id}");
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        return response;
    }

what are the modfications needed above and all give me SDs for asserting the 5 fields.
