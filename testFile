this is my moneyAccount.feature fle - 

Scenario Outline: Verify the Post Money Account API with valid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send Request to create Container with below details
      | type   | banking   |
      | bpId   | 66001416  |
    Then Send request to create Address with below details
      | firstName       | Firstname             |
      | middleName      | Middlename            |
      | lastName        | Lastname              |
      | salutation      | mr                    |
      | salutationLetter| mr                    |
      | attnOf          |                       |
      | crof            |                       |
      | residency       | 123                   |
      | streetNr        | 123                   |
      | street          | teststreet + RANDOM_6 |
      | streetAdd       | Addition street       |
      | poBox           | P.O.Box 123           |
      | city            | Zurich                |
      | state           | RANDOM_49             |
      | zip             | 8001                  |
      | country         | CH                    |
    Then Send Request to create Money Account with below details
      | ownerId            | <ownerId>             |
      | type               | <type>                |
      | currency           | <currency>            |
      | rubric             | <rubric>              |
      | addressIds         | <addressIds>          |
      | mailingOffsetDay   | <mailingOffsetDay>    |
      | mailingOffsetMonth | <mailingOffsetMonth>  |
      | minimalNoticeDays  | <minimalNoticeDays>   |
      | isMailingPaper     | <isMailingPaper>      |
    And I verify the Status Code for Money Account "200"
    And I verify the "objectId" exists in Money Account response
    And I verify the "orderId" exists in Money Account response

    Examples:
      | ownerId              | type                  | currency | rubric        | addressIds         | mailingOffsetDay | mailingOffsetMonth | minimalNoticeDays | isMailingPaper | Comments                                                                             |
      | CONTAINER_OBJECT_ID  | privateCurrentAccount | GBP      | NA            | ADDRESS_OBJECT_ID  | NA               | NA                 | NA                | false          | 001 - privateCurrentAccount with ContainerId, GBP, isMailingPaper=false, No Address  |
      | CONTAINER_OBJECT_ID  | privateCurrentAccount | CHF      | NA            | ADDRESS_OBJECT_ID  | NA               | NA                 | NA                | false          | 006 - privateCurrentAccount, Currency=CHF                                            |
      | CONTAINER_OBJECT_ID  | privateCurrentAccount | GBP      | Test Rubric   | ADDRESS_OBJECT_ID  | NA               | NA                 | NA                | false          | 010 - privateCurrentAccount, Rubric=Valid                                            |
      | CONTAINER_OBJECT_ID  | privateCurrentAccount | GBP      | NA            |                    | NA               | NA                 | NA                | false          | 011 - privateCurrentAccount, Empty AddressId                                         |
      | CONTAINER_OBJECT_ID  | privateCurrentAccount | GBP      | NA            | NA                 | NA               | NA                 | NA                | false          | 012 - privateCurrentAccount, No AddressId                                            |

I have a scenario where I need to pass 2 address IDs by commas, so do I need to write this step 2 times -     Then Send request to create Address with below details so as to generate 2 address ID ? or how should I do it ?

    @Then("Send request to create Address with below details")
    public void sendRequestToCreateAddressWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapAddressDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objAddress.createAddress(strEnvType, "Bearer", jwtToken, mapAddressDetails, scenarioContext);
    }

// Create Address
    public Response createAddress(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapAddressDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.ADDRESS");
        POJOAddressRequest pojoAddressRequest = payloads.buildAddressPayload(mapAddressDetails, true);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoAddressRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Address");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        String strAddressObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strAddressOrderId = jsonHelper.extractStringField(objResponse, "orderId");
        String strAddressUuid = pojoAddressRequest.getStrUuid();

        scenarioContext.setContext("addressObjectId", strAddressObjectId);
        scenarioContext.setContext("addressOrderId", strAddressOrderId);
        scenarioContext.setContext("addressUuid", strAddressUuid);

        return objResponse;
    }

public POJOAddressRequest buildAddressPayload(Map<String, String> mapAddressDetails, boolean includeUuid) {
        POJOAddressRequest address = new POJOAddressRequest();

        if (includeUuid) {
            address.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        }

        address.setStrSalutation(payloadHelper.normalize(mapAddressDetails.get("salutation")));
        address.setStrSalutationLetter(payloadHelper.normalize(mapAddressDetails.get("salutationLetter")));
        address.setStrAttnOf(payloadHelper.normalize(mapAddressDetails.get("attnOf")));
        address.setStrCrof(payloadHelper.normalize(mapAddressDetails.get("crof")));
        address.setStrResidency(payloadHelper.normalize(mapAddressDetails.get("residency")));
        address.setStrStreetNr(payloadHelper.normalize(mapAddressDetails.get("streetNr")));

        // Street = fixed prefix + RANDOM_6
        String streetSuffix = payloadHelper.resolveDynamicText(mapAddressDetails.get("street"));
        address.setStrStreet("teststreet" + streetSuffix);

        address.setStrStreetAdd(payloadHelper.normalize(mapAddressDetails.get("streetAdd")));
        address.setStrPoBox(payloadHelper.normalize(mapAddressDetails.get("poBox")));
        address.setStrCity(payloadHelper.normalize(mapAddressDetails.get("city")));

        // state = RANDOM_49 or any other dynamic rule
        address.setStrState(payloadHelper.resolveDynamicText(mapAddressDetails.get("state")));

        address.setStrZip(payloadHelper.normalize(mapAddressDetails.get("zip")));
        address.setStrCountry(payloadHelper.normalize(mapAddressDetails.get("country")));

        return address;
    }

    @Then("Send Request to create Money Account with below details")
    public void sendRequestToCreateMoneyAccountWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapMoneyAccountDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objMoneyAccount.createMoneyAccount(strEnvType, "Bearer", jwtToken, mapMoneyAccountDetails, scenarioContext);
    }

// Create Container
    public Response createMoneyAccount(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.MONEYACCOUNT");

        POJOMoneyAccountRequest pojoMoneyAccountRequest = payloads.buildMoneyAccountPayload(mapMoneyAccountDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoMoneyAccountRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Money Account");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response is: " + strResponseBody);

        String strMoneyAccountObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strMoneyAccountOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("moneyAccountObjectId", strMoneyAccountObjectId);
        scenarioContext.setContext("moneyAccountOrderId", strMoneyAccountOrderId);

        return objResponse;
    }

public POJOMoneyAccountRequest buildMoneyAccountPayload(Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) {
        POJOMoneyAccountRequest moneyAccount = new POJOMoneyAccountRequest();

        String strContainerObjectId = scenarioContext.getContext("containerObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");

        moneyAccount.setStrUuid(UUID.randomUUID().toString().substring(0, 8));

        String ownerId = payloadHelper.resolveId(mapMoneyAccountDetails.get("ownerId"), strContainerObjectId);
        moneyAccount.setStrOwnerId((ownerId));

        moneyAccount.setStrType(payloadHelper.normalize(mapMoneyAccountDetails.get("type")));
        moneyAccount.setStrCurrency(payloadHelper.normalize(mapMoneyAccountDetails.get("currency")));
        moneyAccount.setStrRubric(payloadHelper.normalize(mapMoneyAccountDetails.get("rubric")));

        // Resolve addressIds
        String addressList = payloadHelper.normalize(mapMoneyAccountDetails.get("addressIds"));
        if (addressList != null) {
            List<String> resolvedAddressIds = Arrays.stream(addressList.split(","))
                    .map(id -> payloadHelper.resolveId(id.trim(), strAddressObjectId))
                    .collect(Collectors.toList());
            moneyAccount.setLstAddressIds(resolvedAddressIds);
        }

        String offsetDay = payloadHelper.normalize(mapMoneyAccountDetails.get("mailingOffsetDay"));
        if (offsetDay != null && !offsetDay.isEmpty()) {
            moneyAccount.setDblMailingOffsetDay(Double.parseDouble(offsetDay));
        }

        String offsetMonth = payloadHelper.normalize(mapMoneyAccountDetails.get("mailingOffsetMonth"));
        if (offsetMonth != null && !offsetMonth.isEmpty()) {
            moneyAccount.setDblMailingOffsetMonth(Double.parseDouble(offsetMonth));
        }

        String minimalNoticeDays = payloadHelper.normalize(mapMoneyAccountDetails.get("minimalNoticeDays"));
        if (minimalNoticeDays != null && !minimalNoticeDays.isEmpty()) {
            moneyAccount.setDblMinimalNoticeDays(Double.parseDouble(minimalNoticeDays));
        }

        String isMailingPaper = payloadHelper.normalize(mapMoneyAccountDetails.get("isMailingPaper"));
        if (isMailingPaper != null && !isMailingPaper.isEmpty()) {
            moneyAccount.setBlnIsMailingPaper(Boolean.parseBoolean(isMailingPaper));
        }

        return moneyAccount;
    }
