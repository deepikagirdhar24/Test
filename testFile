@And("I verify the Legal Person API 400 error response with below details")
public void iVerifyLegalPerson400ErrorResponse(DataTable dataTable) throws Exception {
    Map<String, String> expectedData = dataTable.asMap(String.class, String.class);

    String expectedDescription = expectedData.get("description");
    String expectedErrorMessages = expectedData.get("error message");

    String actualDescription = JsonHelper.extractStringField(response, "description");
    ExtentCucumberAdapter.addTestStepLog("Actual description: " + actualDescription);
    Assert.assertEquals(actualDescription, expectedDescription, "Mismatch in description");

    // Handle multiple error messages
    String[] expectedErrors = expectedErrorMessages.split("\\s*,\\s*");
    List<String> actualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "validationErrors", "error");

    ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + actualErrors);

    for (String expectedError : expectedErrors) {
        Assert.assertTrue(actualErrors.contains(expectedError),
                "Expected error message not found: " + expectedError);
    }
}

@And("I verify the Legal Person API 500 error response with message {string}")
public void iVerifyLegalPerson500ErrorResponse(String expectedError) throws Exception {
    String actualError = JsonHelper.extractStringField(response, "error");
    ExtentCucumberAdapter.addTestStepLog("Actual error: " + actualError);
    Assert.assertEquals(actualError, expectedError, "Mismatch in error message");
}
