I need new SD for     And Send request to generate multiple Persons with below details
      | firstName     | lastName | subType        | domicileCountry | gender | nationality |
      | <firstName1>  | Lastname | pers_form_ass  | CH              | male   | CH          |
      | <firstName2>  | Lastname | pers_form_ass  | CH              | male   | CH          |

Feature: Create Contact Notes API with multiple PersonIds

  Scenario Outline: Verify the Post Contact Notes API with multiple PersonIds
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    And Send request to generate multiple Persons with below details
      | firstName     | lastName | subType        | domicileCountry | gender | nationality |
      | <firstName1>  | Lastname | pers_form_ass  | CH              | male   | CH          |
      | <firstName2>  | Lastname | pers_form_ass  | CH              | male   | CH          |
    Then Send POST ContactNote Request with below details
      | subject     | <subject>     |
      | notes       | <notes>       |
      | hasFollowup | <hasFollowup> |
    And I verify the Status Code for Contact Notes "<statusCode>"
    And I verify the OrderId

    Examples:
      | firstName1  | firstName2  | subject     | notes     | hasFollowup | statusCode |
      | FirstName_1 | FirstName_2 | Testsubject | Testnote  | false       | 200        |

Bleow is the already existing code for your reference - 

COntactNOtesSteps - 

 @And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails);
    }

    @Then("Send POST ContactNote Request with below details")
    public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails);
    }

ContactNotes - 

//Function to create a New Person
    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, Map<String, String> mapPersonDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));
        personRequest.setLstNationalities(Collections.singletonList(mapPersonDetails.get("nationality")));

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);
        return response;
    }

    //Function to create a Contact Note
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapNoteDetails) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CONTACTNOTES");

        ContactNoteRequest noteRequest = new ContactNoteRequest();

        //Set PersonIds: Use provided personIds if available, else use strObjectId
        if (mapNoteDetails.containsKey("personIds") && mapNoteDetails.get("personIds") != null && !mapNoteDetails.get("personIds").isEmpty()) {
            noteRequest.setLstPersonIds(Collections.singletonList(mapNoteDetails.get("personIds")));
        } else {
            noteRequest.setLstPersonIds(Collections.singletonList(strObjectId));
        }

        // Set subject: generate based on the subject type
        noteRequest.setStrSubject(
                mapNoteDetails.get("subject") != null ?
                        TestDataGenerator.generateRandomSubject(mapNoteDetails.get("subject")) : "" // use the subject type from feature file
        );

        noteRequest.setStrNotes(
                mapNoteDetails.get("notes") != null ? mapNoteDetails.get("notes") : ""
        );

        noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);
        objCucumberLogger.PrintStatus("Response Code: " + response.getStatusCode());
        return response;
    }
