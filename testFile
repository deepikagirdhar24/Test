package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;
import java.util.List;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJOMoneyAccountRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("ownerId")
    private String strOwnerId;

    @JsonProperty("type")
    private String strType;

    @JsonProperty("currency")
    private String strCurrency;

    @JsonProperty("rubric")
    private String strRubric;

    @JsonProperty("addressIds")
    private List<String> lstAddressIds;

    @JsonProperty("mailingOffsetDay")
    private BigDecimal mailingOffsetDay;

    @JsonProperty("mailingOffsetMonth")
    private BigDecimal mailingOffsetMonth;

    @JsonProperty("minimalNoticeDays")
    private BigDecimal minimalNoticeDays;

    @JsonProperty("isMailingPaper")
    private Boolean blnIsMailingPaper;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrOwnerId() {
        return strOwnerId;
    }

    public void setStrOwnerId(String strOwnerId) {
        this.strOwnerId = strOwnerId;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public String getStrCurrency() {
        return strCurrency;
    }

    public void setStrCurrency(String strCurrency) {
        this.strCurrency = strCurrency;
    }

    public String getStrRubric() {
        return strRubric;
    }

    public void setStrRubric(String strRubric) {
        this.strRubric = strRubric;
    }

    public List<String> getLstAddressIds() {
        return lstAddressIds;
    }

    public void setLstAddressIds(List<String> lstAddressIds) {
        this.lstAddressIds = lstAddressIds;
    }

    public BigDecimal getMailingOffsetDay() {
        return mailingOffsetDay;
    }

    public void setMailingOffsetDay(BigDecimal mailingOffsetDay) {
        this.mailingOffsetDay = mailingOffsetDay;
    }

    public BigDecimal getMailingOffsetMonth() {
        return mailingOffsetMonth;
    }

    public void setMailingOffsetMonth(BigDecimal mailingOffsetMonth) {
        this.mailingOffsetMonth = mailingOffsetMonth;
    }

    public BigDecimal getMinimalNoticeDays() {
        return minimalNoticeDays;
    }

    public void setMinimalNoticeDays(BigDecimal minimalNoticeDays) {
        this.minimalNoticeDays = minimalNoticeDays;
    }

    public Boolean getBlnIsMailingPaper() {
        return blnIsMailingPaper;
    }

    public void setBlnIsMailingPaper(Boolean blnIsMailingPaper) {
        this.blnIsMailingPaper = blnIsMailingPaper;
    }
}


public void applyBigDecimalField(String rawValue, String fieldName, POJOMoneyAccountRequest account) {
    String normalized = normalize(rawValue);
    if (normalized != null && !normalized.isEmpty()) {
        try {
            BigDecimal parsed = new BigDecimal(normalized);
            switch (fieldName) {
                case "mailingOffsetDay":
                    account.setMailingOffsetDay(parsed);
                    break;
                case "mailingOffsetMonth":
                    account.setMailingOffsetMonth(parsed);
                    break;
                case "minimalNoticeDays":
                    account.setMinimalNoticeDays(parsed);
                    break;
                default:
                    System.err.println("Unknown field: " + fieldName);
            }
        } catch (NumberFormatException e) {
            System.err.println("Invalid numeric value for " + fieldName + ": " + normalized);
        }
    }
}


payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetDay"), "mailingOffsetDay", moneyAccount);
payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetMonth"), "mailingOffsetMonth", moneyAccount);
payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("minimalNoticeDays"), "minimalNoticeDays", moneyAccount);
