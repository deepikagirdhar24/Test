Need to implement a test case with Subject as EMpty 

Feature: Create Contact Notes API with invalid PersonId OR Subject Greater than 250 characters

  Scenario Outline: Verify the Post Contact Notes API with invalid PersonId OR Subject Empty
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send POST ContactNote Request with below details
      | personIds    | <personIds>   |
      | subject      | <subject>     |
      | notes        | <notes>       |
      | hasFollowup  | <hasFollowup> |
    And I verify the Status Code for Contact Notes "<statusCode>"
    And I verify the validation error response with below details
      | description   | <description> |
      | error message | <error>       |

    Examples:
      | personIds   | subject            | notes    | hasFollowup | statusCode | description       | error                      |
      | FirstName_1 | EMPTY_SUBJECT      | Testnote  | false      | 500        |

Response is status code 500 with below message - 

{
    "error": "Mandatory field: Subject\nPlease enter a subject"
}

already implemented function in steps - 

 @And("I verify the validation error response with below details")
    public void iVerifyTheValidationErrorResponse(DataTable dataTable) throws Exception {
        Map<String, String> mapResponsedata = dataTable.asMap(String.class, String.class);
        String strExpDescription = mapResponsedata.get("description");
        String strExpErrorMessage = mapResponsedata.get("error message");

        String strActualDescription = JsonHelper.extractStringField(response, "description");
        ExtentCucumberAdapter.addTestStepLog("Actual description: " + strActualDescription);
        Assert.assertEquals(strActualDescription, strExpDescription, "Mismatch in description");

        String strActualErrorMessage = JsonHelper.extractStringFieldFromArray(response, "validationErrors", 0, "error");
        ExtentCucumberAdapter.addTestStepLog("Actual error message: " + strActualErrorMessage);
        Assert.assertEquals(strActualErrorMessage, strExpErrorMessage, "Mismatch in error message");
    }

ALso there is TestDataGenerator as below - 

package utilities;

import java.util.Random;

public class TestDataGenerator {

    public static String generateRandomSubject(String type) {
        Random random = new Random();

        // Case 1: RANDOM_LESS_250 - generate random length less than 250 characters
        if ("RANDOM_LESS_250".equalsIgnoreCase(type)) {
            int length = random.nextInt(249) + 1; // length between 1 and 249
            return randomString(length);
        }

        // Case 2: RANDOM_EXACT_250 - generate exactly 250 characters
        if ("RANDOM_EXACT_250".equalsIgnoreCase(type)) {
            return randomString(250); // exactly 250 characters
        }

        // Case 3: RANDOM_GREATER_250 - generate random length greater than 250 characters
        if ("RANDOM_GREATER_250".equalsIgnoreCase(type)) {
            int length = random.nextInt(Integer.MAX_VALUE - 250) + 251; // length greater than 250
            return randomString(length);
        }

        // Case 4: EMPTY_SUBJECT - return empty subject
        if ("EMPTY_SUBJECT".equalsIgnoreCase(type)) {
            return ""; // Empty subject
        }

        // Default case: Return the string as-is (Literal subject text)
        return type;
    }

    private static String randomString(int length) {
        int leftLimit = 97; // 'a'
        int rightLimit = 122; // 'z'
        Random random = new Random();

        return random.ints(leftLimit, rightLimit + 1)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();
    }

}


