For 500 error we handled * in Debit card error message - 

  Scenario Outline: Verify the Post Debit Card API with invalid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send Request to create Debit Card with below details
      | type        | <type>        |
      | maccId      | <maccId>      |
      | ownerId     | <ownerId>     |
      | label       | <label>       |
      | dailyLimit  | <dailyLimit>  |
      | addressId   | <addressId>   |
    And I verify the Status Code for Debit Card "500"
    And I verify the Debit Card API 500 error response with message "<error>"
    And I verify the "orderId" exists in Debit Card response

    Examples:
      | type    | maccId                   | ownerId    | label                                     | dailyLimit | addressId              | error                                                       | Comments                                     |
      | DEBIT   | xxx                      | 665041400  | LABEL                                     | 555        | ADDRESS_OBJECT_ID      | Key 'Client Account Number' is mandatory on 'Money account* | 007 - MACC ID = Invalid Text                 |

@And("I verify the Debit Card API 500 error response with message {string}")
    public void iVerify500ErrorResponse(String expectedError) throws Exception {
        String actualError = jsonHelper.extractStringField(response, "error");
        ExtentCucumberAdapter.addTestStepLog("Actual: " + actualError + " | Expected: " + expectedError);

        String expected = StringUtils.strip(expectedError, "*").trim();

        boolean matches = expectedError.startsWith("*") && expectedError.endsWith("*") ? actualError.contains(expected)
                : expectedError.startsWith("*") ? actualError.endsWith(expected)
                : expectedError.endsWith("*") ? actualError.startsWith(expected)
                : actualError.equals(expected);

        Assert.assertTrue(matches, "Expected pattern mismatch. Actual: " + actualError);
    }

Similar to above, I want to handle * in 400 AWS error response as well - 

    And I verify the Update Natural Person AWS-style 400 error response with below details
      | type                | /aws/validation_error           |
      | title               | Validation Error                |
      | detail              | The field * cannot be parsed. Please check the data type is correct |

currently my function is this below. Please handle * in this. * will be either birthDate or ukTaxResidenceFromDate

    @And("I verify the Update Natural Person AWS-style 400 error response with below details")
    public void iVerifyAWS400ErrorResponse(DataTable dataTable) throws Exception {
        Map<String, String> mapExpectedAWSErrorFields = dataTable.asMap(String.class, String.class);
        objErrorVerifier.verifyTopLevelAWSFields(response, mapExpectedAWSErrorFields);
    }

