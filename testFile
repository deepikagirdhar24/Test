Feature: Get Contact Notes API

  Scenario Outline: Verify the Get Contact Notes API
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send Request to get Contact Note Information
    And I verify the Status Code for Contact Notes "<StatusCode>"
    And I verify the personIds array contains "<Item>"
    And I verify the subject is "<Subject>"
    And I verify the notes is "<Notes>"
    And I verify the boolean hasFollowup is "<HasFollowup>"

    Examples:
      | StatusCode | Item      | Subject | Notes | HasFollowup |
      |  200       | 665321701 | Subject | Notes | true        |

In COomon steps - the functions are - 

package stepDefinations;

import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.restassured.response.Response;
import org.testng.Assert;
import utilities.JsonHelper;
import utilities.ScenarioContext;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;

import java.util.List;
import java.util.Map;

public class CommonSteps {

    ScenarioContext scenarioContext;

    public CommonSteps(ScenarioContext scenarioContext) {
        this.scenarioContext = scenarioContext;
    }

    private Response getResponseFromContext(String responseKey) {
        Object obj = scenarioContext.getContext(responseKey);
        if (obj instanceof Response) {
            return (Response) obj;
        } else {
            throw new IllegalArgumentException("No valid Response object found in ScenarioContext for key: " + responseKey);
        }
    }

    @And("I verify the Status Code is {string} for response {string}")
    public void iVerifyStatusCode(String expectedStatusCode, String responseKey) {
        Response response = getResponseFromContext(responseKey);
        int actualStatusCode = response.statusCode();

        ExtentCucumberAdapter.addTestStepLog("Actual value of Status code is : " + actualStatusCode);
        Assert.assertEquals(actualStatusCode, Integer.parseInt(expectedStatusCode));
    }

    @And("I verify the {string} exists in response {string}")
    public void iVerifyKeyExists(String key, String responseKey) throws Exception {
        Response response = getResponseFromContext(responseKey);

        String actualValue = JsonHelper.extractStringField(response, key);
        ExtentCucumberAdapter.addTestStepLog("Actual value of " + key + " is: " + actualValue);

        Assert.assertNotNull(actualValue, key + " should not be null");
        Assert.assertFalse(actualValue.isEmpty(), key + " should not be empty");
    }

    @And("I verify the {string} is {string}")
    public void iVerifyTheKeyValue(String key, String expectedValue, String responseKey) throws Exception {
        Response response = getResponseFromContext(responseKey);

        String actualValue = JsonHelper.extractStringField(response, key);
        ExtentCucumberAdapter.addTestStepLog("Expected " + key + ": " + expectedValue + ", Actual: " + actualValue);
        Assert.assertEquals(expectedValue, actualValue);
    }

    @And("I verify the boolean {string} is {string}")
    public void iVerifyBooleanValue(String key, String expectedValue, String responseKey) throws Exception {
        Response response = getResponseFromContext(responseKey);

        boolean actualValue = JsonHelper.extractBooleanField(response, key);
        boolean expectedBool = Boolean.parseBoolean(expectedValue);
        ExtentCucumberAdapter.addTestStepLog("Expected " + key + ": " + expectedBool + ", Actual: " + actualValue);
        Assert.assertEquals(expectedBool, actualValue);
    }

    @And("I verify the {string} array contains {string}")
    public void iVerifyArrayContainsValue(String arrayKey, String expectedValue, String responseKey) throws Exception {
        Response response = getResponseFromContext(responseKey);

        boolean exists = JsonHelper.valueExistsInJsonArray(response, arrayKey, expectedValue);
        ExtentCucumberAdapter.addTestStepLog("Checking if " + expectedValue + " exists in array " + arrayKey + ": " + exists);
        Assert.assertTrue(exists, "Expected value not found in array: " + expectedValue);
    }

    @And("I verify that {string} is null for response {string}")
    public void iVerifyThatKeyValueIsNull(String key, String responseKey) throws Exception {
        Response response = getResponseFromContext(responseKey);
        Object strActualKeyValue = JsonHelper.extractRawField(response, key);
        ExtentCucumberAdapter.addTestStepLog("Actual value of "+key+" is: " + strActualKeyValue);
        Assert.assertNull(strActualKeyValue, "Expected "+key+" to be null");
    }

    @And("I verify the error details for response {string}")
    public void iVerifyTheErrorResponseDetails(String responseKey, DataTable dataTable) throws Exception {
        Map<String, String> mapResponsedata = dataTable.asMap(String.class, String.class);
        Response response = getResponseFromContext(responseKey);

        // Check if the map is empty or description is null or empty
        if (mapResponsedata.containsKey("description") && mapResponsedata.containsKey("error message") &&
                !(mapResponsedata.get("description") == null || mapResponsedata.get("description").isEmpty())) {

            // Validation error structure (400)
            String strExpDescription = mapResponsedata.get("description");
            String strExpErrorMessages = mapResponsedata.get("error message");

            String strActualDescription = JsonHelper.extractStringField(response, "description");
            ExtentCucumberAdapter.addTestStepLog("Actual description: " + strActualDescription);
            Assert.assertEquals(strActualDescription, strExpDescription, "Mismatch in description");

            // Handle multiple error messages
            String[] strArrExpErrors = strExpErrorMessages.split("\\s*,\\s*");
            List<String> lstStrActualErrors = JsonHelper.extractListOfStringFieldsFromArray(response, "validationErrors", "error");

            ExtentCucumberAdapter.addTestStepLog("Actual error messages: " + lstStrActualErrors.toString());

            for (String strExpectedError : strArrExpErrors) {
                Assert.assertTrue(lstStrActualErrors.contains(strExpectedError),
                        "Expected error message not found: " + strExpectedError);
            }
        } else if (mapResponsedata.containsKey("error message")) {
            // Simple error response (500 or others)
            String strExpError = mapResponsedata.get("error message");
            String strActualError = JsonHelper.extractStringField(response, "error");
            ExtentCucumberAdapter.addTestStepLog("Actual error: " + strActualError);
            Assert.assertEquals(strActualError, strExpError, "Mismatch in error message");
        } else {
            throw new IllegalArgumentException("Unsupported error format in DataTable");
        }
    }

}

what all modifications to do in feature file to match these ?
