package ICOS;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import java.util.Map;

import static io.restassured.RestAssured.given;

public class BaseApiClient {
    protected static devHelperLibrary objDevHelperLibrary = new devHelperLibrary();
    protected static TestConfig testDataConfig = TestConfig.getTestDataConfig();
    protected static String TYK_KEY = TestConfig.getTykApiKey();

    public static RequestSpecification buildRequestSpec(String strBearerToken, String strJWTToken) {
        return given()
                .header("Authorization", strBearerToken + " " + strJWTToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");
    }

    public static Response sendPostRequest(String url, String bearerToken, String jwtToken, String body) {
        logRequestDetails("POST", url, body, null);
        return buildRequestSpec(bearerToken, jwtToken)
                .body(body)
                .post(url);
    }

    public static Response sendGetRequest(String url, String bearerToken, String jwtToken, Map<String, ?> pathParams, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (pathParams != null) {
            request.pathParams(pathParams);
        }
        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("GET", url, null, queryParams);
        return request.get(url);
    }

    public static Response sendPatchRequest(String url, String bearerToken, String jwtToken, String body, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("PATCH", url, body, queryParams);
        return request.body(body).patch(url);
    }

    private static void logRequestDetails(String method, String url, String body, Map<String, ?> queryParams) {
        ExtentCucumberAdapter.addTestStepLog("Sending " + method + " request to: " + url);
        if (queryParams != null && !queryParams.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Query Params: " + queryParams.toString());
        }
        if (body != null && !body.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + body);
        }
    }

    public static String getTYKURL(String strEnvType, String strEndpointKey) {
        return testDataConfig.readApplicationProperty("TYK.ENV." + strEnvType)
                + testDataConfig.readApplicationProperty(strEndpointKey);
    }

    public static String buildAuthHeader(String bearerToken, String jwtToken) {
        return bearerToken + " " + jwtToken;
    }
}
