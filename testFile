package utilities;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.RestAssured;

import java.util.Map;

public class ApiUtils {

    private static final devHelperLibrary objdevHelperLibrary = new devHelperLibrary();
    private static final RequestSpecification rspec = objdevHelperLibrary.setup();
    private static final String TYK_KEY = TestConfig.getTykApiKey();

    public static String buildAuthHeader(String bearerToken, String jwtToken) {
        return bearerToken + " " + jwtToken;
    }

    public static String getBaseUrl(String envType, String apiKeyName) {
        return objdevHelperLibrary.getTYKURL(envType, apiKeyName);
    }

    public static Response get(String baseUrl, String authHeader, Map<String, String> queryParams,
                               String pathParamKey, String pathParamValue) {

        RequestSpecification request = RestAssured.given().spec(rspec)
                .header("Authorization", authHeader)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");

        if (pathParamKey != null && pathParamValue != null) {
            request.pathParam(pathParamKey, pathParamValue);
        }

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        String fullPath = (pathParamKey != null && pathParamValue != null) ? "/{" + pathParamKey + "}" : "";

        logRequest("GET", baseUrl + fullPath, queryParams, null, authHeader);

        Response response = request.get(baseUrl + fullPath);

        logResponse(response);

        return response;
    }

    public static Response post(String baseUrl, String authHeader, Map<String, String> queryParams,
                                String jsonBody) {

        RequestSpecification request = RestAssured.given().spec(rspec)
                .header("Authorization", authHeader)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequest("POST", baseUrl, queryParams, jsonBody, authHeader);

        Response response = request.body(jsonBody).post(baseUrl);

        logResponse(response);

        return response;
    }

    public static Response patch(String baseUrl, String authHeader, Map<String, String> queryParams,
                                 String jsonBody) {

        RequestSpecification request = RestAssured.given().spec(rspec)
                .header("Authorization", authHeader)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequest("PATCH", baseUrl, queryParams, jsonBody, authHeader);

        Response response = request.body(jsonBody).patch(baseUrl);

        logResponse(response);

        return response;
    }

    private static void logRequest(String method, String fullUrl, Map<String, String> queryParams, String body, String authHeader) {
        ExtentCucumberAdapter.addTestStepLog("Request Method: " + method);
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + fullUrl);
        if (queryParams != null) {
            ExtentCucumberAdapter.addTestStepLog("Query Params: " + queryParams.toString());
        }
        ExtentCucumberAdapter.addTestStepLog("Headers: Authorization=" + authHeader + ", X-TYK-API-KEY=" + TYK_KEY + ", Content-Type=application/json");
        if (body != null) {
            ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + body);
        }
    }

    private static void logResponse(Response response) {
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + response.getBody().asString());
    }
}
