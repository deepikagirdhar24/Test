I have added this BaseApiCleint with following code - 

package ICOS;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import java.util.Map;

import static io.restassured.RestAssured.given;

public class BaseApiClient {
    protected static devHelperLibrary objDevHelperLibrary;

    static {
        try {
            objDevHelperLibrary = new devHelperLibrary();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static TestConfig testDataConfig;

    static {
        try {
            testDataConfig = TestConfig.getTestDataConfig();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static String TYK_KEY = TestConfig.getTykApiKey();

    public static RequestSpecification buildRequestSpec(String strBearerToken, String strJWTToken) {
        return given()
                .header("Authorization", strBearerToken + " " + strJWTToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json");
    }

    public static Response sendPostRequest(String url, String bearerToken, String jwtToken, String body) {
        logRequestDetails("POST", url, body, null);
        return buildRequestSpec(bearerToken, jwtToken)
                .body(body)
                .post(url);
    }

    public static Response sendGetRequest(String url, String bearerToken, String jwtToken, Map<String, ?> pathParams, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (pathParams != null) {
            request.pathParams(pathParams);
        }
        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("GET", url, null, queryParams);
        return request.get(url);
    }

    public static Response sendPatchRequest(String url, String bearerToken, String jwtToken, String body, Map<String, ?> queryParams) {
        RequestSpecification request = buildRequestSpec(bearerToken, jwtToken);

        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        logRequestDetails("PATCH", url, body, queryParams);
        return request.body(body).patch(url);
    }

    private static void logRequestDetails(String method, String url, String body, Map<String, ?> queryParams) {
        ExtentCucumberAdapter.addTestStepLog("Sending " + method + " request to: " + url);
        if (queryParams != null && !queryParams.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Query Params: " + queryParams.toString());
        }
        if (body != null && !body.isEmpty()) {
            ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + body);
        }
    }

    public static String getTYKURL(String strEnvType, String strEndpointKey) {
        return testDataConfig.readApplicationProperty("TYK.ENV." + strEnvType)
                + testDataConfig.readApplicationProperty(strEndpointKey);
    }

    public static String buildAuthHeader(String bearerToken, String jwtToken) {
        return bearerToken + " " + jwtToken;
    }
}

Also, Natural person with below code - 

package ICOS;

import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.Payloads;
import utilities.ScenarioContext;

import java.util.HashMap;
import java.util.Map;

public class NaturalPerson extends BaseApiClient {

    private ObjectMapper objectMapper;
    private CucumberLogger objCucumberLogger;
    private EncryptionUtil objEncryptionUtil;

    public NaturalPerson() throws Exception {
        objectMapper = new ObjectMapper();
        objCucumberLogger = new CucumberLogger();
        objEncryptionUtil = new EncryptionUtil();
    }

    // Create Natural Person
    public Response createNewPerson(String strEnvType, String bearerToken, String jwtToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {
        String url = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        String body = objectMapper.writeValueAsString(Payloads.buildNewPersonPayload(mapPersonDetails));

        ExtentCucumberAdapter.addTestStepLog("Creating Natural Person");

        Response response = sendPostRequest(url, bearerToken, jwtToken, body);
        String responseBody = devHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Response is: " + responseBody);

        String objectId = response.jsonPath().getString("objectId");
        String orderId = response.jsonPath().getString("orderId");
        String uuid = Payloads.buildNewPersonPayload(mapPersonDetails).getStrUuid();

        scenarioContext.setContext("objectId", objectId);
        scenarioContext.setContext("orderId", orderId);
        scenarioContext.setContext("uuid", uuid);

        return response;
    }

    // Get Natural Person
    public Response getNaturalPerson(String strEnvType, String bearerToken, String jwtToken, ScenarioContext scenarioContext) {
        String url = getTYKURL(strEnvType, "TYK.CREATENEWPERSON") + "/{id}";
        String objectId = scenarioContext.getContext("objectId");
        String uuid = scenarioContext.getContext("uuid");

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("id", objectId);

        Map<String, String> queryParams = new HashMap<>();
        queryParams.put("uuid", uuid);
        queryParams.put("minimal", "yes");

        ExtentCucumberAdapter.addTestStepLog("Sending GET request for Natural Person");

        Response response = sendGetRequest(url, bearerToken, jwtToken, pathParams, queryParams);
        String responseBody = devHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Response is: " + responseBody);

        return response;
    }

    // Update Natural Person
    public Response updateNaturalPerson(String strEnvType, String bearerToken, String jwtToken,
                                        Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {
        String url = getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
        String orderId = scenarioContext.getContext("orderId");

        String body = objectMapper.writeValueAsString(Payloads.buildNewPersonPayload(mapPersonDetails));

        Map<String, String> queryParams = new HashMap<>();
        queryParams.put("order", orderId);

        ExtentCucumberAdapter.addTestStepLog("Sending PATCH request to update Natural Person");

        Response response = sendPatchRequest(url, bearerToken, jwtToken, body, queryParams);
        String responseBody = devHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Response is: " + responseBody);

        return response;
    }
}
