@CreateDC
  Scenario Outline: Verify the Post Debit Card API with valid data - <Comments>
    Given Send Request to get Authentication Token for ICOS
    When I generate the JWT Token
    Then Send request to create Address with below details
      | firstName       | Firstname             |
      | middleName      | Middlename            |
      | lastName        | Lastname              |
      | salutation      | mr                    |
      | salutationLetter| mr                    |
      | attnOf          |                       |
      | crof            |                       |
      | residency       | 123                   |
      | streetNr        | 123                   |
      | street          | teststreet + RANDOM_6 |
      | streetAdd       | Addition street       |
      | poBox           | P.O.Box 123           |
      | city            | Zurich                |
      | state           | RANDOM_49             |
      | zip             | 8001                  |
      | country         | CH                    |
    Then Send Request to create Container with below details
      | type   | banking   |
      | bpId   | 66022644  |
    Then Send Request to create Money Account with below details
      | ownerId            | CONTAINER_OBJECT_ID     |
      | type               | privateCurrentAccount   |
      | currency           | GBP                     |
      | rubric             | NA                      |
      | addressIds         | ADDRESS_OBJECT_ID       |
      | mailingOffsetDay   | NA                      |
      | mailingOffsetMonth | NA                      |
      | minimalNoticeDays  | NA                      |
      | isMailingPaper     | false                   |
    Then Send Request to create Debit Card with below details
      | type        | <type>        |
      | maccId      | <maccId>      |
      | ownerId     | <ownerId>     |
      | label       | <label>       |
      | dailyLimit  | <dailyLimit>  |
      | addressId   | <addressId>   |
    And I verify the Status Code for Debit Card "200"
    And I verify the "objectId" exists in Debit Card response
    And I verify the "orderId" exists in Debit Card response

    Examples:
      | type    | maccId                   | ownerId                   | label      | dailyLimit | addressId              | Comments                               |
      | DEBIT   | MONEY_ACCOUNT_OBJECT_ID  | 665041400                 | LABEL 123  | 555        | ADDRESS_OBJECT_ID      | 001 - StraightThrough                  |

WHy is this not working here - 

[INFO] 
[INFO] --- maven-surefire-plugin:3.0.0-M5:test (default-test) @ wealth-icos-api ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running testRunner.Runner
@CreateDC
Scenario Outline: Verify the Post Debit Card API with valid data - 001 - StraightThrough # src/test/resources/Features/DebitCard.feature:67
Before All
Jul 22, 2025 10:46:57 AM hooks.CucumberHooks beforeScenario
INFO: Before Scenario: Test is starting!
  Given Send Request to get Authentication Token for ICOS                                # stepDefinations.GetUserSteps.sendRequestToGetAuthenticationTokenForICOS()
  When I generate the JWT Token                                                          # stepDefinations.GetUserSteps.iGenerateTheJWTToken()
Jul 22, 2025 10:47:06 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Address is: {"objectId":"665830401","orderId":"2931249480"}
Jul 22, 2025 10:47:12 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Container is: {"objectId":"66022644.1000","orderId":"2931249481"}
Jul 22, 2025 10:47:14 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Money Account is: {"objectId":"66022644.2056","orderId":"2931249492"}
Jul 22, 2025 10:47:14 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Request for Debit Card is: {"uuid":"8ec311c","type":"DEBIT","maccId":"66022644.2056","ownerId":"665041400","label":"LABEL 123","dailyLimit":555,"addressId":"665830401"}
Jul 22, 2025 10:47:15 AM utilities.CucumberLogger PrintStatus
INFO: Value is: Response for Debit Card is: {"orderId":"2931249495","error":"MAILING ADDRESS\nEither Name or Firm is mandatory."}
  Then Send request to create Address with below details                                 # stepDefinations.AddressSteps.sendRequestToCreateAddressWithDetails(io.cucumber.datatable.DataTable)
    | firstName        | Firstname             |
    | middleName       | Middlename            |
    | lastName         | Lastname              |
    | salutation       | mr                    |
    | salutationLetter | mr                    |
    | attnOf           | [empty]               |
    | crof             | [empty]               |
    | residency        | 123                   |
    | streetNr         | 123                   |
    | street           | teststreet + RANDOM_6 |
    | streetAdd        | Addition street       |
    | poBox            | P.O.Box 123           |
    | city             | Zurich                |
    | state            | RANDOM_49             |
    | zip              | 8001                  |
    | country          | CH                    |
  Then Send Request to create Container with below details                               # stepDefinations.ContainerSteps.sendRequestToCreateContainerWithDetails(io.cucumber.datatable.DataTable)
    | type | banking  |
    | bpId | 66022644 |
  Then Send Request to create Money Account with below details                           # stepDefinations.MoneyAccountSteps.sendRequestToCreateMoneyAccountWithDetails(io.cucumber.datatable.DataTable)
    | ownerId            | CONTAINER_OBJECT_ID   |
    | type               | privateCurrentAccount |
    | currency           | GBP                   |
    | rubric             | NA                    |
    | addressIds         | ADDRESS_OBJECT_ID     |
    | mailingOffsetDay   | NA                    |
    | mailingOffsetMonth | NA                    |
    | minimalNoticeDays  | NA                    |
    | isMailingPaper     | false                 |
  Then Send Request to create Debit Card with below details                              # stepDefinations.DebitCardSteps.sendRequestToCreateDebitCardWithDetails(io.cucumber.datatable.DataTable)
    | type       | DEBIT                   |
    | maccId     | MONEY_ACCOUNT_OBJECT_ID |
    | ownerId    | 665041400               |
    | label      | LABEL 123               |
    | dailyLimit | 555                     |
    | addressId  | ADDRESS_OBJECT_ID       |
  And I verify the Status Code for Debit Card "200"                                      # stepDefinations.DebitCardSteps.iVerifyTheStatusCodeForDebitCard(java.lang.String)
      java.lang.AssertionError: expected [500] but found [200]
	at org.testng.Assert.fail(Assert.java:111)
	at org.testng.Assert.failNotEquals(Assert.java:1578)
	at org.testng.Assert.assertEqualsImpl(Assert.java:150)
	at org.testng.Assert.assertEquals(Assert.java:132)
	at org.testng.Assert.assertEquals(Assert.java:1419)
	at org.testng.Assert.assertEquals(Assert.java:1383)
	at org.testng.Assert.assertEquals(Assert.java:1429)
	at stepDefinations.DebitCardSteps.iVerifyTheStatusCodeForDebitCard(DebitCardSteps.java:84)
	at âœ½.I verify the Status Code for Debit Card "200"(file:///C:/Users/girdd/IdeaProjects/icosapitests/src/test/resources/Features/DebitCard.feature:61)
  And I verify the "objectId" exists in Debit Card response                              # stepDefinations.DebitCardSteps.iVerifyTheKeyExistsInDebitCardResponse(java.lang.String)
  And I verify the "orderId" exists in Debit Card response                               # stepDefinations.DebitCardSteps.iVerifyTheKeyExistsInDebitCardResponse(java.lang.String)
Jul 22, 2025 10:47:18 AM tech.grasshopper.pdf.PDFCucumberReport collectReportConfiguration
INFO: PDF report configuration YAML file not found. Using default settings.
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 25.059 s <<< FAILURE! - in testRunner.Runner
[ERROR] Verify Debit Card API.Verify the Post Debit Card API with valid data - 001 - StraightThrough  Time elapsed: 19.776 s  <<< FAILURE!
java.lang.AssertionError: expected [500] but found [200]
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   expected [500] but found [200]
[INFO] 
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0
[INFO] 



    @Then("Send request to create Address with below details")
    public void sendRequestToCreateAddressWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapAddressDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objAddress.createAddress(strEnvType, "Bearer", jwtToken, mapAddressDetails, scenarioContext);
    }

// Create Address
    public Response createAddress(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapAddressDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.ADDRESS");
        POJOAddressRequest pojoAddressRequest = payloads.buildAddressPayload(mapAddressDetails, true);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoAddressRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Address");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Address is: " + strResponseBody);

        String strAddressObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strAddressOrderId = jsonHelper.extractStringField(objResponse, "orderId");
        String strAddressUuid = pojoAddressRequest.getStrUuid();

        scenarioContext.setContext("addressObjectId", strAddressObjectId);
        scenarioContext.setContext("addressOrderId", strAddressOrderId);
        scenarioContext.setContext("addressUuid", strAddressUuid);

        // Append to list for multiple address support
        List<String> addressObjectIds = (List<String>) scenarioContext.getContext("addressObjectIds");
        if (addressObjectIds == null) {
            addressObjectIds = new ArrayList<>();
        }
        addressObjectIds.add(strAddressObjectId);
        scenarioContext.setContext("addressObjectIds", addressObjectIds);

        return objResponse;
    }

    @Then("Send Request to create Container with below details")
    public void sendRequestToCreateContainerWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapContainerDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objContainer.createContainer(strEnvType, "Bearer", jwtToken, mapContainerDetails, scenarioContext);
    }

// Create Container
    public Response createContainer(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapContainerDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.CONTAINER");

        POJOContainerRequest pojoContainerRequest = payloads.buildContainerPayload(mapContainerDetails);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoContainerRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Container");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Container is: " + strResponseBody);

        String strContainerObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strContainerOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("containerObjectId", strContainerObjectId);
        scenarioContext.setContext("containerOrderId", strContainerOrderId);

        return objResponse;
    }

    @Then("Send Request to create Money Account with below details")
    public void sendRequestToCreateMoneyAccountWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapMoneyAccountDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objMoneyAccount.createMoneyAccount(strEnvType, "Bearer", jwtToken, mapMoneyAccountDetails, scenarioContext);
    }

 // Create Money Account
    public Response createMoneyAccount(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.MONEYACCOUNT");

        POJOMoneyAccountRequest pojoMoneyAccountRequest = payloads.buildMoneyAccountPayload(mapMoneyAccountDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoMoneyAccountRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Money Account");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Money Account is: " + strResponseBody);

        String strMoneyAccountObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strMoneyAccountOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("moneyAccountObjectId", strMoneyAccountObjectId);
        scenarioContext.setContext("moneyAccountOrderId", strMoneyAccountOrderId);

        return objResponse;
    }

    @Then("Send Request to create Debit Card with below details")
    public void sendRequestToCreateDebitCardWithDetails(DataTable dataTable) throws Exception {
        Map<String, String> mapDebitCardDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getContext("JWTToken");
        response = objDebitCard.createDebitCard(strEnvType, "Bearer", jwtToken, mapDebitCardDetails, scenarioContext);
    }

// Create Debit Card
    public Response createDebitCard(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.DEBITCARD");

        POJODebitCardRequest pojoDebitCardRequest = payloads.buildDebitCardPayload(mapDebitCardDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoDebitCardRequest);
        objCucumberLogger.PrintStatus("Request for Debit Card is: " + strRequestBody);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Debit Card");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Debit Card is: " + strResponseBody);

        String strDebitCardObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strDebitCardOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("debitCardObjectId", strDebitCardObjectId);
        scenarioContext.setContext("debitCardOrderId", strDebitCardOrderId);

        return objResponse;
    }

    public POJOAddressRequest buildAddressPayload(Map<String, String> mapAddressDetails, boolean includeUuid) {
        POJOAddressRequest address = new POJOAddressRequest();

        if (includeUuid) {
            address.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        }

        address.setStrSalutation(payloadHelper.normalize(mapAddressDetails.get("salutation")));
        address.setStrSalutationLetter(payloadHelper.normalize(mapAddressDetails.get("salutationLetter")));
        address.setStrAttnOf(payloadHelper.normalize(mapAddressDetails.get("attnOf")));
        address.setStrCrof(payloadHelper.normalize(mapAddressDetails.get("crof")));
        address.setStrResidency(payloadHelper.normalize(mapAddressDetails.get("residency")));
        address.setStrStreetNr(payloadHelper.normalize(mapAddressDetails.get("streetNr")));

        // Street = fixed prefix + RANDOM_6
        String streetSuffix = payloadHelper.resolveDynamicText(mapAddressDetails.get("street"));
        address.setStrStreet("teststreet" + streetSuffix);

        address.setStrStreetAdd(payloadHelper.normalize(mapAddressDetails.get("streetAdd")));
        address.setStrPoBox(payloadHelper.normalize(mapAddressDetails.get("poBox")));
        address.setStrCity(payloadHelper.normalize(mapAddressDetails.get("city")));

        // state = RANDOM_49 or any other dynamic rule
        address.setStrState(payloadHelper.resolveDynamicText(mapAddressDetails.get("state")));

        address.setStrZip(payloadHelper.normalize(mapAddressDetails.get("zip")));
        address.setStrCountry(payloadHelper.normalize(mapAddressDetails.get("country")));

        return address;
    }

    public POJOContainerRequest buildContainerPayload(Map<String, String> mapContainerDetails) {
        POJOContainerRequest container = new POJOContainerRequest();

        container.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        container.setStrType(payloadHelper.normalize(mapContainerDetails.get("type")));
        container.setStrBpId(payloadHelper.normalize(mapContainerDetails.get("bpId")));

        return container;
    }

    public POJOMoneyAccountRequest buildMoneyAccountPayload(Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) {
        POJOMoneyAccountRequest moneyAccount = new POJOMoneyAccountRequest();

        String strContainerObjectId = scenarioContext.getContext("containerObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");
        @SuppressWarnings("unchecked")
        List<String> addressObjectIds = (List<String>) scenarioContext.getContext("addressObjectIds");

        moneyAccount.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        String ownerId = payloadHelper.resolveId(mapMoneyAccountDetails.get("ownerId"), strContainerObjectId);
        moneyAccount.setStrOwnerId((ownerId));

        moneyAccount.setStrType(payloadHelper.normalize(mapMoneyAccountDetails.get("type")));
        moneyAccount.setStrCurrency(payloadHelper.normalize(mapMoneyAccountDetails.get("currency")));
        moneyAccount.setStrRubric(payloadHelper.normalize(mapMoneyAccountDetails.get("rubric")));

        List<String> resolvedAddressIds = payloadHelper.resolveIdList(mapMoneyAccountDetails.get("addressIds"), strAddressObjectId, addressObjectIds);
        moneyAccount.setLstAddressIds(resolvedAddressIds);

        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetDay"), "mailingOffsetDay", moneyAccount);
        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetMonth"), "mailingOffsetMonth", moneyAccount);
        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("minimalNoticeDays"), "minimalNoticeDays", moneyAccount);
        payloadHelper.applyBooleanField(mapMoneyAccountDetails.get("isMailingPaper"), "isMailingPaper", moneyAccount);

        return moneyAccount;
    }

    public POJODebitCardRequest buildDebitCardPayload(Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) {
        POJODebitCardRequest debitCard = new POJODebitCardRequest();

        String strMoneyAccountObjectId = scenarioContext.getContext("moneyAccountObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");
//        String strAddressObjectId = scenarioContext.getContext("addressObjectIdCard");

        debitCard.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        debitCard.setStrType(payloadHelper.normalize(mapDebitCardDetails.get("type")));

        String resolvedMaccId = payloadHelper.resolveId(mapDebitCardDetails.get("maccId"), strMoneyAccountObjectId);
        debitCard.setStrMaccId(resolvedMaccId);

        debitCard.setStrOwnerId(payloadHelper.normalize(mapDebitCardDetails.get("ownerId")));

        debitCard.setStrLabel(payloadHelper.normalize(mapDebitCardDetails.get("label")));
        payloadHelper.applyBigDecimalField(mapDebitCardDetails.get("dailyLimit"), "dailyLimit", debitCard);

        String resolvedAddressId = payloadHelper.resolveId(mapDebitCardDetails.get("addressId"), strAddressObjectId);
        debitCard.setStrAddressId(resolvedAddressId);

        return debitCard;
    }

package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJOAddressRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("firstName")
    private String strFirstName;

    @JsonProperty("middleName")
    private String strMiddleName;

    @JsonProperty("lastName")
    private String strLastName;

    @JsonProperty("salutation")
    private String strSalutation;

    @JsonProperty("salutationLetter")
    private String strSalutationLetter;

    @JsonProperty("attnOf")
    private String strAttnOf;

    @JsonProperty("crof")
    private String strCrof;

    @JsonProperty("residency")
    private String strResidency;

    @JsonProperty("streetNr")
    private String strStreetNr;

    @JsonProperty("street")
    private String strStreet;

    @JsonProperty("streetAdd")
    private String strStreetAdd;

    @JsonProperty("poBox")
    private String strPoBox;

    @JsonProperty("city")
    private String strCity;

    @JsonProperty("state")
    private String strState;

    @JsonProperty("zip")
    private String strZip;

    @JsonProperty("country")
    private String strCountry;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrFirstName() {
        return strFirstName;
    }

    public void setStrFirstName(String strFirstName) {
        this.strFirstName = strFirstName;
    }

    public String getStrMiddleName() {
        return strMiddleName;
    }

    public void setStrMiddleName(String strMiddleName) {
        this.strMiddleName = strMiddleName;
    }

    public String getStrLastName() {
        return strLastName;
    }

    public void setStrLastName(String strLastName) {
        this.strLastName = strLastName;
    }

    public String getStrSalutation() {
        return strSalutation;
    }

    public void setStrSalutation(String strSalutation) {
        this.strSalutation = strSalutation;
    }

    public String getStrSalutationLetter() {
        return strSalutationLetter;
    }

    public void setStrSalutationLetter(String strSalutationLetter) {
        this.strSalutationLetter = strSalutationLetter;
    }

    public String getStrAttnOf() {
        return strAttnOf;
    }

    public void setStrAttnOf(String strAttnOf) {
        this.strAttnOf = strAttnOf;
    }

    public String getStrCrof() {
        return strCrof;
    }

    public void setStrCrof(String strCrof) {
        this.strCrof = strCrof;
    }

    public String getStrResidency() {
        return strResidency;
    }

    public void setStrResidency(String strResidency) {
        this.strResidency = strResidency;
    }

    public String getStrStreetNr() {
        return strStreetNr;
    }

    public void setStrStreetNr(String strStreetNr) {
        this.strStreetNr = strStreetNr;
    }

    public String getStrStreet() {
        return strStreet;
    }

    public void setStrStreet(String strStreet) {
        this.strStreet = strStreet;
    }

    public String getStrStreetAdd() {
        return strStreetAdd;
    }

    public void setStrStreetAdd(String strStreetAdd) {
        this.strStreetAdd = strStreetAdd;
    }

    public String getStrPoBox() {
        return strPoBox;
    }

    public void setStrPoBox(String strPoBox) {
        this.strPoBox = strPoBox;
    }

    public String getStrCity() {
        return strCity;
    }

    public void setStrCity(String strCity) {
        this.strCity = strCity;
    }

    public String getStrState() {
        return strState;
    }

    public void setStrState(String strState) {
        this.strState = strState;
    }

    public String getStrZip() {
        return strZip;
    }

    public void setStrZip(String strZip) {
        this.strZip = strZip;
    }

    public String getStrCountry() {
        return strCountry;
    }

    public void setStrCountry(String strCountry) {
        this.strCountry = strCountry;
    }
}

package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJOContainerRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("type")
    private String strType;

    @JsonProperty("bpId")
    private String strBpId;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public String getStrBpId() {
        return strBpId;
    }

    public void setStrBpId(String strBpId) {
        this.strBpId = strBpId;
    }
}

package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;
import java.util.List;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJOMoneyAccountRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("ownerId")
    private String strOwnerId;

    @JsonProperty("type")
    private String strType;

    @JsonProperty("currency")
    private String strCurrency;

    @JsonProperty("rubric")
    private String strRubric;

    @JsonProperty("addressIds")
    private List<String> lstAddressIds;

    @JsonProperty("mailingOffsetDay")
    private BigDecimal mailingOffsetDay;

    @JsonProperty("mailingOffsetMonth")
    private BigDecimal mailingOffsetMonth;

    @JsonProperty("minimalNoticeDays")
    private BigDecimal minimalNoticeDays;

    @JsonProperty("isMailingPaper")
    private Boolean blnIsMailingPaper;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrOwnerId() {
        return strOwnerId;
    }

    public void setStrOwnerId(String strOwnerId) {
        this.strOwnerId = strOwnerId;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public String getStrCurrency() {
        return strCurrency;
    }

    public void setStrCurrency(String strCurrency) {
        this.strCurrency = strCurrency;
    }

    public String getStrRubric() {
        return strRubric;
    }

    public void setStrRubric(String strRubric) {
        this.strRubric = strRubric;
    }

    public List<String> getLstAddressIds() {
        return lstAddressIds;
    }

    public void setLstAddressIds(List<String> lstAddressIds) {
        this.lstAddressIds = lstAddressIds;
    }

    public BigDecimal getMailingOffsetDay() {
        return mailingOffsetDay;
    }

    public void setMailingOffsetDay(BigDecimal mailingOffsetDay) {
        this.mailingOffsetDay = mailingOffsetDay;
    }

    public BigDecimal getMailingOffsetMonth() {
        return mailingOffsetMonth;
    }

    public void setMailingOffsetMonth(BigDecimal mailingOffsetMonth) {
        this.mailingOffsetMonth = mailingOffsetMonth;
    }

    public BigDecimal getMinimalNoticeDays() {
        return minimalNoticeDays;
    }

    public void setMinimalNoticeDays(BigDecimal minimalNoticeDays) {
        this.minimalNoticeDays = minimalNoticeDays;
    }

    public Boolean getBlnIsMailingPaper() {
        return blnIsMailingPaper;
    }

    public void setBlnIsMailingPaper(Boolean blnIsMailingPaper) {
        this.blnIsMailingPaper = blnIsMailingPaper;
    }
}

package ICOS.pojo;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJODebitCardRequest {

    @JsonProperty("uuid")
    private String strUuid;

    @JsonProperty("type")
    private String strType;

    @JsonProperty("maccId")
    private String strMaccId;

    @JsonProperty("ownerId")
    private String strOwnerId;

    @JsonProperty("label")
    private String strLabel;

//    @JsonInclude(JsonInclude.Include.ALWAYS)
    @JsonProperty("dailyLimit")
    private BigDecimal bdDailyLimit;

    @JsonProperty("addressId")
    private String strAddressId;

    // Getters and Setters

    public String getStrUuid() {
        return strUuid;
    }

    public void setStrUuid(String strUuid) {
        this.strUuid = strUuid;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public String getStrMaccId() {
        return strMaccId;
    }

    public void setStrMaccId(String strMaccId) {
        this.strMaccId = strMaccId;
    }

    public String getStrOwnerId() {
        return strOwnerId;
    }

    public void setStrOwnerId(String strOwnerId) {
        this.strOwnerId = strOwnerId;
    }

    public String getStrLabel() {
        return strLabel;
    }

    public void setStrLabel(String strLabel) {
        this.strLabel = strLabel;
    }

    public BigDecimal getBdDailyLimit() {
        return bdDailyLimit;
    }

    public void setBdDailyLimit(BigDecimal bdDailyLimit) {
        this.bdDailyLimit = bdDailyLimit;
    }

    public String getStrAddressId() {
        return strAddressId;
    }

    public void setStrAddressId(String strAddressId) {
        this.strAddressId = strAddressId;
    }
}

Although it is working in POSTMAN
