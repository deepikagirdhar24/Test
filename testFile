// New method to get Contact Notes
    public Response getGetContactNotes(String strEnvType,String strBearerToken,String strJWTToken) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Actual value of Authentication is : " +strAuthentication);
        //String strTYKURLKey="TYK.ENV."+strEnvType;
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CONTACTNOTES");
        objCucumberLogger.PrintStatus("URL is"+strTYKURL);
        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .get(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);
        objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);
        return response;
    }

/Function to create a New Person
    public Response createNewPerson(String strEnvType,String strBearerToken,String strJWTToken, Map<String, String> mapPersonDetails) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        //objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CREATENEWPERSON");
        //objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        NewPersonRequest personRequest = new NewPersonRequest();
        personRequest.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        personRequest.setStrSubType(mapPersonDetails.get("subType"));
        personRequest.setStrDomiCountry(mapPersonDetails.get("domicileCountry"));
        personRequest.setStrFirstName(mapPersonDetails.get("firstName"));
        personRequest.setStrLastName(mapPersonDetails.get("lastName"));
        personRequest.setStrGender(mapPersonDetails.get("gender"));
        personRequest.setLstNationalities(Collections.singletonList(mapPersonDetails.get("nationality")));

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        //objCucumberLogger.PrintStatus(jsonBody);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        //objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        objCucumberLogger.PrintStatus("Response is"+responseBody);
        //objCucumberLogger.PrintStatus("Extracted Object Id is : "+ strObjectId);
        //objCucumberLogger.PrintStatus("Extracted Order Id is : "+ strOrderId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Object Id is : "+ strObjectId);
        ExtentCucumberAdapter.addTestStepLog("Extracted Order Id is : " + strOrderId);
        return response;
    }

    //Function to create a Contact Note
    public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapNoteDetails) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        //objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.CONTACTNOTES");
        //objCucumberLogger.PrintStatus("URL is"+strTYKURL);

        ContactNoteRequest noteRequest = new ContactNoteRequest();
        noteRequest.setLstPersonIds(Collections.singletonList(strObjectId)); // assumed already set globally

        noteRequest.setStrSubject(mapNoteDetails.get("subject"));
        noteRequest.setStrNotes(mapNoteDetails.get("notes"));
        noteRequest.setBoolHasFollowup(Boolean.parseBoolean(mapNoteDetails.get("hasFollowup")));

        strJsonBody = objectMapper.writeValueAsString(noteRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Contact Note");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        //objCucumberLogger.PrintStatus(strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        responseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);

        //objCucumberLogger.PrintStatus("Status code is"+response.statusCode());
        objCucumberLogger.PrintStatus("Response is"+responseBody);
        return response;
    }

These are 3 functions, we are calling these functions in step definitions, - 

    @Then("Send Request to get Contact Note Information")
    public void sendRequestToGetContactNoteInformation() throws JsonProcessingException {
        String jwtToken = scenarioContext.getToken("JWTToken");
        //response =objContactNotes.getGetContactNotes(strEnvType,objAccessToken.get("tokenType"),strJWTToken);
        response =objContactNotes.getGetContactNotes(strEnvType,"Bearer",jwtToken);
        ExtentCucumberAdapter.addTestStepLog("Actual Response is : " +response.asString());
    }
    @And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapPersonDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, mapPersonDetails);
    }
    @Then("Send POST ContactNote Request with below details")
    public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");
        response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails);
    }

and there is a function in GetUserSteps which uses below - 

    @When("I generate the JWT Token")
    public void iGenerateTheJWTToken() throws JsonProcessingException {
        String strBearerToken=objAccessToken.get("tokenType");
        String strAccessToken=objAccessToken.get("accessToken");
        strJWTToken= objdevHelperLibrary.getTykToken(strEnvType,strAccessToken,strBearerToken);
        scenarioContext.setToken("JWTToken",strJWTToken);
    }

and the above step definition uses devHelperLibrary for this - 

    public String getTykToken(String strEnvType, String strAccessToken, String strBearerToken) throws JsonProcessingException {
        HashMap<String,String> formParams= new HashMap<String,String>();
        //String strAuthentication=strBearerToken+" "+strAccessToken;
        //String strTYKURLKey="TYK.ENV."+strEnvType;
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("TYK.TOKEN");
        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strAccessToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .post(strTYKURL);
        responseBody = getResponseBody(response);
        String strTykToken = getResponseValueFromJsonNode(response,"token");
        objCucumberLogger.PrintStatus("Tyk Token is"+strTykToken);
        return strTykToken;
    }

How can we collect the comoon code below in the 3 classes - 
        HashMap<String,String> formParams= new HashMap<String,String>();
        String strAuthentication=strBearerToken+" "+strJWTToken;
        //objCucumberLogger.PrintStatus("authenticationis"+strAuthentication);
        String strTYKURL=testDataConfig.readApplicationProperty("TYK.ENV."+strEnvType)+testDataConfig.readApplicationProperty("This is different");
        //objCucumberLogger.PrintStatus("URL is"+strTYKURL);
