public POJONaturalPerson buildUpdateNaturalPersonPayload(Map<String, String> mapPersonDetails) {
    POJONaturalPerson person = new POJONaturalPerson();

    person.setStrUuid(payloadHelper.normalize(mapPersonDetails.get("uuid")));
    person.setStrId(payloadHelper.normalize(mapPersonDetails.get("id")));
    person.setStrSubType(payloadHelper.normalize(mapPersonDetails.get("subType")));
    person.setStrDomiCountry(payloadHelper.normalize(mapPersonDetails.get("domiCountry")));
    person.setStrFirstName(payloadHelper.normalize(mapPersonDetails.get("firstName")));
    person.setStrMiddleName(payloadHelper.normalize(mapPersonDetails.get("middleName")));
    person.setStrLastName(payloadHelper.normalize(mapPersonDetails.get("lastName")));
    person.setStrBirthDate(payloadHelper.resolveDate("UpdateNaturalPerson", "birthDate", mapPersonDetails.get("birthDate")));
    person.setStrGender(payloadHelper.normalize(mapPersonDetails.get("gender")));
    person.setListStrNationalities(payloadHelper.splitList(mapPersonDetails.get("nationalities")));
    person.setStrTitle(payloadHelper.normalize(mapPersonDetails.get("title")));
    person.setStrBirthPlace(payloadHelper.normalize(mapPersonDetails.get("birthPlace")));
    person.setStrBirthCountry(payloadHelper.normalize(mapPersonDetails.get("birthCountry")));
    person.setListObjElectronicAddresses(payloadHelper.buildElectronicAddresses(mapPersonDetails.get("electronicAddresses")));
    person.setBlnIsEmployee(payloadHelper.parseBoolean(mapPersonDetails.get("isEmployee")));
    person.setListObjTaxResidences(payloadHelper.buildTaxResidences(mapPersonDetails.get("taxResidences")));
    person.setListObjDocumentationIdentity(payloadHelper.buildDocumentationIdentity(
        mapPersonDetails.get("documentationIdentity"), "UpdateNaturalPerson"
    ));
    person.setStrPepAssociationCountry(payloadHelper.normalize(mapPersonDetails.get("pepAssociationCountry")));
    person.setStrPepClassificationReason(payloadHelper.normalize(mapPersonDetails.get("pepClassificationReason")));
    person.setStrPepCategory(payloadHelper.normalize(mapPersonDetails.get("pepCategory")));
    person.setBlnIsMarketingOptOut(payloadHelper.parseBoolean(mapPersonDetails.get("isMarketingOptOut")));
    person.setStrFatcaStatus(payloadHelper.normalize(mapPersonDetails.get("fatcaStatus")));
    person.setStrCrsType(payloadHelper.normalize(mapPersonDetails.get("crsType")));
    person.setStrUkTaxResidenceFromDate(payloadHelper.resolveDate("UpdateNaturalPerson", "ukTaxResidenceFromDate", mapPersonDetails.get("ukTaxResidenceFromDate")));
    person.setBlnHasTaxAvoidanceSchemes(payloadHelper.parseBoolean(mapPersonDetails.get("hasTaxAvoidanceSchemes")));
    person.setBlnIsHoldingBearerShares(payloadHelper.parseBoolean(mapPersonDetails.get("isHoldingBearerShares")));
    person.setBlnHasInvestableAssets10M(payloadHelper.parseBoolean(mapPersonDetails.get("hasInvestableAssets10M")));
    person.setBlnHasHistoricTaxIssues(payloadHelper.parseBoolean(mapPersonDetails.get("hasHistoricTaxIssues")));
    person.setBlnHasTaxChgDomiStatus(payloadHelper.parseBoolean(mapPersonDetails.get("hasTaxChgDomiStatus")));
    person.setBlnHasTaxChgUkDomiStatus(payloadHelper.parseBoolean(mapPersonDetails.get("hasTaxChgUkDomiStatus")));
    person.setBlnHasTaxPrevClaimRemitanceBasis(payloadHelper.parseBoolean(mapPersonDetails.get("hasTaxPrevClaimRemitanceBasis")));
    person.setBlnHasTaxIntendClaimRemitanceBasis(payloadHelper.parseBoolean(mapPersonDetails.get("hasTaxIntendClaimRemitanceBasis")));
    person.setListObjAccountants(payloadHelper.buildAccountants(mapPersonDetails.get("accountants")));
    person.setBlnHasTravelProtection(payloadHelper.parseBoolean(mapPersonDetails.get("hasTravelProtection")));
    person.setBlnHasCouttsOnline(payloadHelper.parseBoolean(mapPersonDetails.get("hasCouttsOnline")));
    person.setBlnHasCouttsId(payloadHelper.parseBoolean(mapPersonDetails.get("hasCouttsId")));
    person.setListObjAssociations(payloadHelper.buildAssociations(mapPersonDetails.get("associations")));
    person.setStrIdQuestionId(payloadHelper.normalize(mapPersonDetails.get("idQuestionId")));
    person.setStrCorrespondanceAddressId(payloadHelper.normalize(mapPersonDetails.get("correspondanceAddressId")));

    return person;
}
