public static POJOWorkRequest buildWorkRequestPayload(Map<String, String> mapWorkRequestDetails) {
    POJOWorkRequest workRequest = new POJOWorkRequest();

    workRequest.setStrBpId(normalize(mapWorkRequestDetails.get("bpId")));
    workRequest.setStrType(normalize(mapWorkRequestDetails.get("type")));
    workRequest.setStrSubject(normalize(mapWorkRequestDetails.get("subject")));
    workRequest.setStrDescription(normalize(mapWorkRequestDetails.get("description")));

    String dueDateInput = mapWorkRequestDetails.get("dueDate");
    String resolvedDueDate = resolveDueDate(dueDateInput);
    workRequest.setStrDueDate(resolvedDueDate);

    return workRequest;
}

//normalize Helper - Used for all fields except dueDate.
private static String normalize(String value) {
    if (value == null) return "";
    switch (value.trim().toUpperCase()) {
        case "NA": return null;
        case "EMPTY": return "";
        default: return value;
    }
}

// resolveDueDate Helper (handles NA, EMPTY, FUTURE etc.)
private static String resolveDueDate(String dueDateInput) {
    if (dueDateInput == null || dueDateInput.trim().isEmpty()) {
        return "";  // empty string
    }

    String trimmedInput = dueDateInput.trim().toUpperCase();

    switch (trimmedInput) {
        case "NA":
            return null;  // will be excluded in final payload
        case "EMPTY":
            return "";     // included as empty string
        case "FUTURE":
            return LocalDate.now().plusDays(7).toString();
        case "PAST":
            return LocalDate.now().minusDays(7).toString();
        case "TODAY":
            return LocalDate.now().toString();
        default:
            return dueDateInput;  // use as-is (custom date)
    }
}

import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class POJOWorkRequest {

