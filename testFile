public RequestSpecification buildBaseRequestSpec(String strBearerToken, String strJWTToken) {
    return given()
            .spec(rspec)
            .header("Authorization", strBearerToken + " " + strJWTToken)
            .header("X-TYK-API-KEY", TYK_KEY)
            .header("Content-Type", "application/json");
}

public void logRequestDetails(String method, String url, String body, Map<String, ?> queryParams) {
    ExtentCucumberAdapter.addTestStepLog("Sending " + method + " request to: " + url);
    if (queryParams != null && !queryParams.isEmpty()) {
        ExtentCucumberAdapter.addTestStepLog("Query Parameters: " + queryParams.toString());
    }
    if (body != null && !body.isEmpty()) {
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + body);
    }
}

public void logResponseDetails(Response response) {
    String responseBody = getResponseBody(response);
    ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
    ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + responseBody);
    objCucumberLogger.PrintStatus("Response is " + responseBody);
}


public Response createNewPerson(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

    strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
    NewPersonRequest personRequest = Payloads.buildNewPersonPayload(mapPersonDetails);
    strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

    objdevHelperLibrary.logRequestDetails("POST", strTYKURL, strJsonBody, null);

    response = objdevHelperLibrary.buildBaseRequestSpec(strBearerToken, strJWTToken)
            .body(strJsonBody)
            .post(strTYKURL);

    objdevHelperLibrary.logResponseDetails(response);

    scenarioContext.setContext("objectId", response.jsonPath().getString("objectId"));
    scenarioContext.setContext("orderId", response.jsonPath().getString("orderId"));
    scenarioContext.setContext("uuid", personRequest.getStrUuid());

    return response;
}


public Response getNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken, ScenarioContext scenarioContext) {

    String objectId = scenarioContext.getContext("objectId");
    String uuid = scenarioContext.getContext("uuid");
    String minimal = "yes";

    strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

    Map<String, String> queryParams = new HashMap<>();
    queryParams.put("uuid", uuid);
    queryParams.put("minimal", minimal);

    objdevHelperLibrary.logRequestDetails("GET", strTYKURL + "/" + objectId, null, queryParams);

    response = objdevHelperLibrary.buildBaseRequestSpec(strBearerToken, strJWTToken)
            .pathParam("id", objectId)
            .queryParams(queryParams)
            .get(strTYKURL + "/{id}");

    objdevHelperLibrary.logResponseDetails(response);

    return response;
}


public Response updateNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken,
                                    Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

    String orderId = scenarioContext.getContext("orderId");
    strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");
    NewPersonRequest personRequest = Payloads.buildNewPersonPayload(mapPersonDetails);
    strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

    Map<String, String> queryParams = new HashMap<>();
    queryParams.put("order", orderId);

    objdevHelperLibrary.logRequestDetails("PATCH", strTYKURL, strJsonBody, queryParams);

    response = objdevHelperLibrary.buildBaseRequestSpec(strBearerToken, strJWTToken)
            .queryParam("order", orderId)
            .body(strJsonBody)
            .patch(strTYKURL);

    objdevHelperLibrary.logResponseDetails(response);

    return response;
}
