package ICOS;

import ICOS.pojo.NewPersonRequest;
import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import commonLibrary.devHelperLibrary;
import config.TestConfig;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utilities.CucumberLogger;
import utilities.EncryptionUtil;
import utilities.Payloads;
import utilities.ScenarioContext;

import java.util.*;
import java.util.stream.Collectors;

import static io.restassured.RestAssured.with;

public class NaturalPerson {
    public ObjectMapper objectMapper;
    public static EncryptionUtil objEncryptionUtil;
    protected TestConfig testDataConfig= TestConfig.getTestDataConfig();

    CucumberLogger objCucumberLogger;
    devHelperLibrary objdevHelperLibrary;

    public static RequestSpecification rspec;
    private static Response response;
    private static String strResponseBody;
    String TYK_KEY = TestConfig.getTykApiKey();
    String strObjectId;
    String strOrderId;
    String strJsonBody;
    String strAuthentication;
    String strTYKURL;


    public NaturalPerson() throws Exception {
        objEncryptionUtil= new EncryptionUtil();
        objectMapper = new ObjectMapper();
        objCucumberLogger= new CucumberLogger();
        objdevHelperLibrary= new devHelperLibrary();
        rspec=objdevHelperLibrary.setup();
    }

    //Function to create a New Person
    public Response createNewPerson(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = Payloads.buildNewPersonPayload(mapPersonDetails);

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending request to Create New Person");
        ExtentCucumberAdapter.addTestStepLog("Request URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Request Headers: Authorization=" + strAuthentication);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization",strBearerToken+" "+strJWTToken)
                .header("X-TYK-API-KEY",TYK_KEY)
                .header("Content-Type","application/json")
                .body(strJsonBody)
                .post(strTYKURL);
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        strObjectId = response.jsonPath().getString("objectId");
        strOrderId = response.jsonPath().getString("orderId");

        //Store in ScenarioContext
        scenarioContext.setContext("objectId", strObjectId);
        scenarioContext.setContext("orderId", strOrderId);
        scenarioContext.setContext("uuid", personRequest.getStrUuid());

        return response;
    }

    // New method to get Natural Person
    public Response getNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken, ScenarioContext scenarioContext) throws JsonProcessingException {

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);

        String objectId = scenarioContext.getContext("objectId"); // Path param
        String uuid = scenarioContext.getContext("uuid"); //Query param
        String minimal = "yes";   // Query param

        // Base URL without path or query params
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        // Logging request details
        ExtentCucumberAdapter.addTestStepLog("Sending GET request for Natural Person");
        ExtentCucumberAdapter.addTestStepLog("Base URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Path Param - objectId: " + objectId);
        ExtentCucumberAdapter.addTestStepLog("Query Params - uuid: " + uuid + ", minimal: " + minimal);

        response = with().spec(rspec)
                .header("Authorization", strBearerToken + " " + strJWTToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json")
                //.params()
                .pathParam("id", objectId)
                .queryParam("uuid", uuid)
                .queryParam("minimal", minimal)
                .get(strTYKURL + "/{id}");
        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        // Logging response details
        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        objCucumberLogger.PrintStatus("Response is"+ strResponseBody);

        return response;
    }

    //Function to update New Person
    public Response updateNaturalPerson(String strEnvType, String strBearerToken, String strJWTToken,
                                        Map<String, String> mapPersonDetails, ScenarioContext scenarioContext) throws JsonProcessingException {

        String orderId = scenarioContext.getContext("orderId");
        String uuid = scenarioContext.getContext("uuid");

        strAuthentication = objdevHelperLibrary.buildAuthHeader(strBearerToken, strJWTToken);
        strTYKURL = objdevHelperLibrary.getTYKURL(strEnvType, "TYK.CREATENEWPERSON");

        NewPersonRequest personRequest = Payloads.buildNewPersonPayload(mapPersonDetails);

        strJsonBody = new ObjectMapper().writeValueAsString(personRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Update Natural Person");
        ExtentCucumberAdapter.addTestStepLog("Base URL: " + strTYKURL);
        ExtentCucumberAdapter.addTestStepLog("Query Param: order=" + orderId);
        ExtentCucumberAdapter.addTestStepLog("Request Body:\n" + strJsonBody);

        response = with().spec(rspec)
                .header("Authorization", strBearerToken + " " + strJWTToken)
                .header("X-TYK-API-KEY", TYK_KEY)
                .header("Content-Type", "application/json")
                .queryParam("order", orderId)  //query param usage
                .body(strJsonBody)
                .patch(strTYKURL);

        strResponseBody = objdevHelperLibrary.getResponseBody(response);

        ExtentCucumberAdapter.addTestStepLog("Response Code: " + response.getStatusCode());
        ExtentCucumberAdapter.addTestStepLog("Response Body:\n" + strResponseBody);

        return response;
    }

}
