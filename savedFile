@And("Send request to generate New Person with below details")
    public void sendRequestToGenerateNewPersonWithDetails(DataTable dataTable) throws JsonProcessingException {
        List<Map<String, String>> lstPersonList = dataTable.asMaps(String.class, String.class);
        List<String> lstGeneratedPersonIds = new ArrayList<>();

        for (Map<String, String> personDetails : lstPersonList) {
            String jwtToken = scenarioContext.getToken("JWTToken");
            Response personResponse = objContactNotes.createNewPerson(strEnvType, "Bearer", jwtToken, personDetails);

            String personId = personResponse.jsonPath().getString("objectId");
            lstGeneratedPersonIds.add(personId);
        }

        // Save generated personIds in scenarioContext for later use in ContactNote request
        scenarioContext.setToken("GeneratedPersonIds", lstGeneratedPersonIds);
    }

@Then("Send POST ContactNote Request with below details")
    public void sendPOSTContactNoteRequestWithDetails(DataTable dataTable) throws JsonProcessingException {
        Map<String, String> mapNoteDetails = dataTable.asMap(String.class, String.class);
        String jwtToken = scenarioContext.getToken("JWTToken");

        List<String> lstpersonIds;

        // CASE 1: Check if 'personIds' key exists in the DataTable (for negative test case)
        if (mapNoteDetails.containsKey("personIds") && mapNoteDetails.get("personIds") != null && !mapNoteDetails.get("personIds").isEmpty()) {
            // Support comma-separated multiple IDs if needed
            String[] strArrIds = mapNoteDetails.get("personIds").split(",");
            lstpersonIds = Arrays.stream(strArrIds).map(String::trim).collect(Collectors.toList());
        }
        // CASE 2: If 'GeneratedPersonIds' are stored from previous steps
        else if (scenarioContext.getToken("GeneratedPersonIds") != null) {
            lstpersonIds = (List<String>) scenarioContext.getToken("GeneratedPersonIds");
        }

        // CASE 3: Fail-safe to prevent NPEs
        else {
            throw new IllegalStateException("No valid personIds found for ContactNote request.");
        }

        response = objContactNotes.createContactNote(strEnvType, "Bearer", jwtToken, mapNoteDetails, lstpersonIds);
    }

public Response createContactNote(String strEnvType, String strBearerToken, String strJWTToken, Map<String, String> mapNoteDetails, List<String personIds)

noteRequest.setLstPersonIds(personIds);
