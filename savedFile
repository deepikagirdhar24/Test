// Create Address
    public Response createAddress(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapAddressDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.ADDRESS");
        POJOAddressRequest pojoAddressRequest = payloads.buildAddressPayload(mapAddressDetails, true);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoAddressRequest);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Address");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Address is: " + strResponseBody);

        String strAddressObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strAddressOrderId = jsonHelper.extractStringField(objResponse, "orderId");
        String strAddressUuid = pojoAddressRequest.getStrUuid();

        scenarioContext.setContext("addressObjectId", strAddressObjectId);
        scenarioContext.setContext("addressOrderId", strAddressOrderId);
        scenarioContext.setContext("addressUuid", strAddressUuid);

        // Append to list for multiple address support
        List<String> addressObjectIds = (List<String>) scenarioContext.getContext("addressObjectIds");
        if (addressObjectIds == null) {
            addressObjectIds = new ArrayList<>();
        }
        addressObjectIds.add(strAddressObjectId);
        scenarioContext.setContext("addressObjectIds", addressObjectIds);

        return objResponse;
    }

    // Create Money Account
    public Response createMoneyAccount(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.MONEYACCOUNT");

        POJOMoneyAccountRequest pojoMoneyAccountRequest = payloads.buildMoneyAccountPayload(mapMoneyAccountDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoMoneyAccountRequest);
        objCucumberLogger.PrintStatus("Request for Money Account is: " + strRequestBody);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Money Account");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Money Account is: " + strResponseBody);

        String strMoneyAccountObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strMoneyAccountOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("moneyAccountObjectId", strMoneyAccountObjectId);
        scenarioContext.setContext("moneyAccountOrderId", strMoneyAccountOrderId);

        return objResponse;
    }

// Create Debit Card
    public Response createDebitCard(String strEnvType, String strBearerToken, String strJWTToken,
                                      Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) throws Exception {

        String strTYKURL = getTYKURL(strEnvType, "TYK.DEBITCARD");

        POJODebitCardRequest pojoDebitCardRequest = payloads.buildDebitCardPayload(mapDebitCardDetails, scenarioContext);
        String strRequestBody = objObjectMapper.writeValueAsString(pojoDebitCardRequest);
        objCucumberLogger.PrintStatus("Request for Debit Card is: " + strRequestBody);

        ExtentCucumberAdapter.addTestStepLog("Sending request to Create Debit Card");

        Response objResponse = sendPostRequest(strTYKURL, strBearerToken, strJWTToken, strRequestBody, null);
        String strResponseBody = devHelperLibrary.getResponseBody(objResponse);
        objCucumberLogger.PrintStatus("Response for Debit Card is: " + strResponseBody);

        String strDebitCardObjectId = jsonHelper.extractStringField(objResponse, "objectId");
        String strDebitCardOrderId = jsonHelper.extractStringField(objResponse, "orderId");

        scenarioContext.setContext("debitCardObjectId", strDebitCardObjectId);
        scenarioContext.setContext("debitCardOrderId", strDebitCardOrderId);

        return objResponse;
    }

public POJOAddressRequest buildAddressPayload(Map<String, String> mapAddressDetails, boolean includeUuid) {
        POJOAddressRequest address = new POJOAddressRequest();

        if (includeUuid) {
            address.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        }

        address.setStrSalutation(payloadHelper.normalize(mapAddressDetails.get("salutation")));
        address.setStrSalutationLetter(payloadHelper.normalize(mapAddressDetails.get("salutationLetter")));
        address.setStrAttnOf(payloadHelper.normalize(mapAddressDetails.get("attnOf")));
        address.setStrCrof(payloadHelper.normalize(mapAddressDetails.get("crof")));
        address.setStrResidency(payloadHelper.normalize(mapAddressDetails.get("residency")));
        address.setStrStreetNr(payloadHelper.normalize(mapAddressDetails.get("streetNr")));

        // Street = fixed prefix + RANDOM_6
        String streetSuffix = payloadHelper.resolveDynamicText(mapAddressDetails.get("street"));
        address.setStrStreet("teststreet" + streetSuffix);

        address.setStrStreetAdd(payloadHelper.normalize(mapAddressDetails.get("streetAdd")));
        address.setStrPoBox(payloadHelper.normalize(mapAddressDetails.get("poBox")));
        address.setStrCity(payloadHelper.normalize(mapAddressDetails.get("city")));

        // state = RANDOM_49 or any other dynamic rule
        address.setStrState(payloadHelper.resolveDynamicText(mapAddressDetails.get("state")));

        address.setStrZip(payloadHelper.normalize(mapAddressDetails.get("zip")));
        address.setStrCountry(payloadHelper.normalize(mapAddressDetails.get("country")));

        return address;
    }

    public POJOContainerRequest buildContainerPayload(Map<String, String> mapContainerDetails) {
        POJOContainerRequest container = new POJOContainerRequest();

        container.setStrUuid(UUID.randomUUID().toString().substring(0, 7));
        container.setStrType(payloadHelper.normalize(mapContainerDetails.get("type")));
        container.setStrBpId(payloadHelper.normalize(mapContainerDetails.get("bpId")));

        return container;
    }

    public POJOMoneyAccountRequest buildMoneyAccountPayload(Map<String, String> mapMoneyAccountDetails, ScenarioContext scenarioContext) {
        POJOMoneyAccountRequest moneyAccount = new POJOMoneyAccountRequest();

        String strContainerObjectId = scenarioContext.getContext("containerObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");
//        String strAddressObjectId = scenarioContext.getContext("addressObjectIdAdhoc");
        @SuppressWarnings("unchecked")
        List<String> addressObjectIds = (List<String>) scenarioContext.getContext("addressObjectIds");

        moneyAccount.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        String ownerId = payloadHelper.resolveId(mapMoneyAccountDetails.get("ownerId"), strContainerObjectId);
        moneyAccount.setStrOwnerId((ownerId));

        moneyAccount.setStrType(payloadHelper.normalize(mapMoneyAccountDetails.get("type")));
        moneyAccount.setStrCurrency(payloadHelper.normalize(mapMoneyAccountDetails.get("currency")));
        moneyAccount.setStrRubric(payloadHelper.normalize(mapMoneyAccountDetails.get("rubric")));

        List<String> resolvedAddressIds = payloadHelper.resolveIdList(mapMoneyAccountDetails.get("addressIds"), strAddressObjectId, addressObjectIds);
        moneyAccount.setLstAddressIds(resolvedAddressIds);

        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetDay"), "mailingOffsetDay", moneyAccount);
        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("mailingOffsetMonth"), "mailingOffsetMonth", moneyAccount);
        payloadHelper.applyBigDecimalField(mapMoneyAccountDetails.get("minimalNoticeDays"), "minimalNoticeDays", moneyAccount);
        payloadHelper.applyBooleanField(mapMoneyAccountDetails.get("isMailingPaper"), "isMailingPaper", moneyAccount);

        return moneyAccount;
    }

    public POJODebitCardRequest buildDebitCardPayload(Map<String, String> mapDebitCardDetails, ScenarioContext scenarioContext) {
        POJODebitCardRequest debitCard = new POJODebitCardRequest();

        String strMoneyAccountObjectId = scenarioContext.getContext("moneyAccountObjectId");
        String strAddressObjectId = scenarioContext.getContext("addressObjectId");
//        String strAddressObjectId = scenarioContext.getContext("addressObjectIdAdhoc");

        debitCard.setStrUuid(UUID.randomUUID().toString().substring(0, 7));

        debitCard.setStrType(payloadHelper.normalize(mapDebitCardDetails.get("type")));

        String resolvedMaccId = payloadHelper.resolveId(mapDebitCardDetails.get("maccId"), strMoneyAccountObjectId);
        debitCard.setStrMaccId(resolvedMaccId);

        debitCard.setStrOwnerId(payloadHelper.normalize(mapDebitCardDetails.get("ownerId")));

        debitCard.setStrLabel(payloadHelper.normalize(mapDebitCardDetails.get("label")));
        payloadHelper.applyBigDecimalField(mapDebitCardDetails.get("dailyLimit"), "dailyLimit", debitCard);

        String resolvedAddressId = payloadHelper.resolveId(mapDebitCardDetails.get("addressId"), strAddressObjectId);
        debitCard.setStrAddressId(resolvedAddressId);

        return debitCard;
    }


public String resolveId(String input, String resolvedValue) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }

        switch (input.trim().toUpperCase()) {
            case "EMPTY":
                return "";
            case "NA":
                return null;
            case "NATURAL_PERSON_OBJECT_ID":
            case "CONTAINER_OBJECT_ID":
            case "ADDRESS_OBJECT_ID":
            case "ADDRESS_OBJECT_ID_ADHOC":
            case "MONEY_ACCOUNT_OBJECT_ID":
            case "DOCUMENT_OBJECT_ID":
            case "LEGAL_PERSON_OBJECT_ID":
            case "NATURAL_PERSON_OBJECT_ID_1":
                return resolvedValue;
            default:
                return input;
        }
    }

    public List<String> resolveIdList(String input, String fallbackSingleAddressId, List<String> addressObjectIds) {
        if (input == null || input.trim().isEmpty()) {
            return Collections.emptyList();
        }

        if ("ADDRESS_OBJECT_ID_LIST".equalsIgnoreCase(input.trim())) {
            return addressObjectIds != null ? addressObjectIds : Collections.emptyList();
        }

        // Resolve individual tokens
        return Arrays.stream(input.split(","))
                .map(id -> resolveId(id.trim(), fallbackSingleAddressId))
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }

what can be wrong here ?
